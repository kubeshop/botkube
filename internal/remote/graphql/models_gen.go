// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

type AuditEvent interface {
	IsAuditEvent()
	GetID() string
	GetType() *AuditEventType
	GetDeploymentID() string
	GetCreatedAt() string
	GetPluginName() string
	GetDeployment() *Deployment
}

type Pageable interface {
	IsPageable()
	GetPageInfo() *PageInfo
	GetTotalCount() int
}

type Action struct {
	ID          string          `json:"id"`
	Name        string          `json:"name"`
	DisplayName string          `json:"displayName"`
	Enabled     bool            `json:"enabled"`
	Command     string          `json:"command"`
	Bindings    *ActionBindings `json:"bindings"`
}

type ActionBindings struct {
	Sources   []string `json:"sources"`
	Executors []string `json:"executors"`
}

type ActionCreateUpdateInput struct {
	ID          *string                          `json:"id"`
	Name        string                           `json:"name"`
	DisplayName string                           `json:"displayName"`
	Enabled     bool                             `json:"enabled"`
	Command     string                           `json:"command"`
	Bindings    *ActionCreateUpdateInputBindings `json:"bindings"`
}

type ActionCreateUpdateInputBindings struct {
	Sources   []string `json:"sources"`
	Executors []string `json:"executors"`
}

type ActionPatchDeploymentConfigInput struct {
	Name    string `json:"name"`
	Enabled *bool  `json:"enabled"`
}

type AddMemberForOrganizationInput struct {
	OrgID     string  `json:"orgId"`
	UserID    *string `json:"userId"`
	UserEmail *string `json:"userEmail"`
}

type AddPlatformToOrganizationInput struct {
	OrganizationID string                       `json:"organizationId"`
	Slack          *AddSlackToOrganizationInput `json:"slack"`
	Teams          *AddTeamsToOrganizationInput `json:"teams"`
}

type AddSlackToOrganizationInput struct {
	Token string `json:"token"`
}

type AddTeamsToOrganizationInput struct {
	Token string `json:"token"`
}

type Alias struct {
	ID          string            `json:"id"`
	Name        string            `json:"name"`
	DisplayName string            `json:"displayName"`
	Command     string            `json:"command"`
	Deployments []*DeploymentInfo `json:"deployments"`
}

type AliasCreateInput struct {
	Name          string   `json:"name"`
	DisplayName   string   `json:"displayName"`
	Command       string   `json:"command"`
	DeploymentIds []string `json:"deploymentIds"`
}

type AliasPage struct {
	Data       []*Alias  `json:"data"`
	PageInfo   *PageInfo `json:"pageInfo"`
	TotalCount int       `json:"totalCount"`
	TotalPages int       `json:"totalPages"`
}

func (AliasPage) IsPageable()                 {}
func (this AliasPage) GetPageInfo() *PageInfo { return this.PageInfo }
func (this AliasPage) GetTotalCount() int     { return this.TotalCount }

type AliasUpdateInput struct {
	Name          *string  `json:"name"`
	DisplayName   *string  `json:"displayName"`
	Command       *string  `json:"command"`
	DeploymentIds []string `json:"deploymentIds"`
}

type APICallEvent struct {
	ID           string              `json:"id"`
	Type         *AuditEventType     `json:"type"`
	DeploymentID string              `json:"deploymentId"`
	CreatedAt    string              `json:"createdAt"`
	PluginName   string              `json:"pluginName"`
	Deployment   *Deployment         `json:"deployment"`
	User         string              `json:"user"`
	GqlType      APICallEventQglType `json:"gqlType"`
	GqlName      string              `json:"gqlName"`
	RequestBody  string              `json:"requestBody"`
	ResponseBody string              `json:"responseBody"`
}

func (APICallEvent) IsAuditEvent()                   {}
func (this APICallEvent) GetID() string              { return this.ID }
func (this APICallEvent) GetType() *AuditEventType   { return this.Type }
func (this APICallEvent) GetDeploymentID() string    { return this.DeploymentID }
func (this APICallEvent) GetCreatedAt() string       { return this.CreatedAt }
func (this APICallEvent) GetPluginName() string      { return this.PluginName }
func (this APICallEvent) GetDeployment() *Deployment { return this.Deployment }

type APIKey struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type AuditEventCommandCreateInput struct {
	PlatformUser            string       `json:"platformUser"`
	ConversationGroup       *string      `json:"conversationGroup"`
	Channel                 string       `json:"channel"`
	BotPlatform             *BotPlatform `json:"botPlatform"`
	Command                 string       `json:"command"`
	AdditionalCreateContext interface{}  `json:"additionalCreateContext"`
}

type AuditEventCreateInput struct {
	Type               AuditEventType                `json:"type"`
	CreatedAt          string                        `json:"createdAt"`
	DeploymentID       string                        `json:"deploymentId"`
	PluginName         string                        `json:"pluginName"`
	SourceEventEmitted *AuditEventSourceCreateInput  `json:"sourceEventEmitted"`
	CommandExecuted    *AuditEventCommandCreateInput `json:"commandExecuted"`
}

type AuditEventFilter struct {
	DeploymentID *string `json:"deploymentId"`
	StartDate    *string `json:"startDate"`
	EndDate      *string `json:"endDate"`
}

type AuditEventPage struct {
	Data       []AuditEvent `json:"data"`
	PageInfo   *PageInfo    `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
	TotalPages int          `json:"totalPages"`
}

func (AuditEventPage) IsPageable()                 {}
func (this AuditEventPage) GetPageInfo() *PageInfo { return this.PageInfo }
func (this AuditEventPage) GetTotalCount() int     { return this.TotalCount }

type AuditEventSourceCreateInput struct {
	Event  string                        `json:"event"`
	Source *AuditEventSourceDetailsInput `json:"source"`
}

type AuditEventSourceDetailsInput struct {
	Name        string `json:"name"`
	DisplayName string `json:"displayName"`
}

type BotBindings struct {
	Sources   []string `json:"sources"`
	Executors []string `json:"executors"`
}

type BotBindingsCreateInput struct {
	Sources   []*string `json:"sources"`
	Executors []*string `json:"executors"`
}

type BotBindingsUpdateInput struct {
	Sources   []*string `json:"sources"`
	Executors []*string `json:"executors"`
}

type ChannelBindingsByID struct {
	ID                    string       `json:"id"`
	Bindings              *BotBindings `json:"bindings"`
	NotificationsDisabled *bool        `json:"notificationsDisabled"`
}

type ChannelBindingsByIDCreateInput struct {
	ID                    string                  `json:"id"`
	Bindings              *BotBindingsCreateInput `json:"bindings"`
	NotificationsDisabled *bool                   `json:"notificationsDisabled"`
}

type ChannelBindingsByIDUpdateInput struct {
	ID       string                  `json:"id"`
	Bindings *BotBindingsUpdateInput `json:"bindings"`
}

type ChannelBindingsByName struct {
	Name                  string                 `json:"name"`
	Bindings              *BotBindings           `json:"bindings"`
	NotificationsDisabled *bool                  `json:"notificationsDisabled"`
	MessageTriggers       []*TextMessageTriggers `json:"messageTriggers"`
}

type ChannelBindingsByNameCreateInput struct {
	Name                  string                      `json:"name"`
	Bindings              *BotBindingsCreateInput     `json:"bindings"`
	NotificationsDisabled *bool                       `json:"notificationsDisabled"`
	MessageTriggers       []*TextMessageTriggersInput `json:"messageTriggers"`
}

type ChannelBindingsByNameUpdateInput struct {
	Name            string                      `json:"name"`
	Bindings        *BotBindingsUpdateInput     `json:"bindings"`
	MessageTriggers []*TextMessageTriggersInput `json:"messageTriggers"`
}

type CloudMsTeams struct {
	ID                    string                         `json:"id"`
	Name                  string                         `json:"name"`
	AadGroupID            string                         `json:"aadGroupId"`
	AttachmentStorage     *CloudMsTeamsAttachmentStorage `json:"attachmentStorage"`
	NotificationsDisabled *bool                          `json:"notificationsDisabled"`
	Channels              []*ChannelBindingsByID         `json:"channels"`
}

type CloudMsTeamsAttachmentStorage struct {
	SharePointSiteName string `json:"sharePointSiteName"`
}

type CloudMsTeamsAttachmentStorageCreateInput struct {
	SharePointSiteName *string `json:"sharePointSiteName"`
}

type CloudMsTeamsAttachmentStorageUpdateInput struct {
	SharePointSiteName string `json:"sharePointSiteName"`
}

type CloudMsTeamsUpdateInput struct {
	ID                    *string                                   `json:"id"`
	Name                  string                                    `json:"name"`
	AadGroupID            string                                    `json:"aadGroupId"`
	AttachmentStorage     *CloudMsTeamsAttachmentStorageUpdateInput `json:"attachmentStorage"`
	NotificationsDisabled *bool                                     `json:"notificationsDisabled"`
	Channels              []*ChannelBindingsByIDUpdateInput         `json:"channels"`
}

type CloudSlack struct {
	ID       string                   `json:"id"`
	Name     string                   `json:"name"`
	TeamID   string                   `json:"teamId"`
	BotToken string                   `json:"botToken"`
	Channels []*ChannelBindingsByName `json:"channels"`
}

type CloudSlackCreateInput struct {
	Name     string                              `json:"name"`
	TeamID   string                              `json:"teamId"`
	Channels []*ChannelBindingsByNameCreateInput `json:"channels"`
}

type CloudSlackUpdateInput struct {
	ID       *string                             `json:"id"`
	Name     string                              `json:"name"`
	TeamID   string                              `json:"teamId"`
	Channels []*ChannelBindingsByNameUpdateInput `json:"channels"`
}

type CommandExecutedEvent struct {
	ID                string          `json:"id"`
	Type              *AuditEventType `json:"type"`
	PlatformUser      *string         `json:"platformUser"`
	DeploymentID      string          `json:"deploymentId"`
	Deployment        *Deployment     `json:"deployment"`
	CreatedAt         string          `json:"createdAt"`
	Command           string          `json:"command"`
	BotPlatform       *BotPlatform    `json:"botPlatform"`
	ConversationGroup *string         `json:"conversationGroup"`
	Channel           string          `json:"channel"`
	PluginName        string          `json:"pluginName"`
}

func (CommandExecutedEvent) IsAuditEvent()                   {}
func (this CommandExecutedEvent) GetID() string              { return this.ID }
func (this CommandExecutedEvent) GetType() *AuditEventType   { return this.Type }
func (this CommandExecutedEvent) GetDeploymentID() string    { return this.DeploymentID }
func (this CommandExecutedEvent) GetCreatedAt() string       { return this.CreatedAt }
func (this CommandExecutedEvent) GetPluginName() string      { return this.PluginName }
func (this CommandExecutedEvent) GetDeployment() *Deployment { return this.Deployment }

type ConnectedPlatforms struct {
	Slack *SlackWorkspace    `json:"slack"`
	Teams *TeamsOrganization `json:"teams"`
}

type Coupon struct {
	Name             string               `json:"name"`
	AmountOff        *int                 `json:"amountOff"`
	PercentOff       *float64             `json:"percentOff"`
	Duration         StripeCouponDuration `json:"duration"`
	DurationInMonths *int                 `json:"durationInMonths"`
}

type DeleteByIDInput struct {
	ID string `json:"ID"`
}

type DeletePlatformInput struct {
	SocketSlack   *DeleteByIDInput `json:"socketSlack"`
	CloudSlack    *DeleteByIDInput `json:"cloudSlack"`
	Discord       *DeleteByIDInput `json:"discord"`
	Mattermost    *DeleteByIDInput `json:"mattermost"`
	Webhook       *DeleteByIDInput `json:"webhook"`
	CloudMsTeams  *DeleteByIDInput `json:"cloudMsTeams"`
	Elasticsearch *DeleteByIDInput `json:"elasticsearch"`
}

type Deployment struct {
	ID                         string                                   `json:"id"`
	Name                       string                                   `json:"name"`
	Actions                    []*Action                                `json:"actions"`
	Plugins                    []*Plugin                                `json:"plugins"`
	Platforms                  *Platforms                               `json:"platforms"`
	Status                     *DeploymentStatus                        `json:"status"`
	APIKey                     *APIKey                                  `json:"apiKey"`
	YamlConfig                 *string                                  `json:"yamlConfig"`
	Aliases                    []*Alias                                 `json:"aliases"`
	HelmCommand                *string                                  `json:"helmCommand"`
	ResourceVersion            int                                      `json:"resourceVersion"`
	Heartbeat                  *Heartbeat                               `json:"heartbeat"`
	InstallUpgradeInstructions []*InstallUpgradeInstructionsForPlatform `json:"installUpgradeInstructions"`
	Draft                      *bool                                    `json:"draft"`
}

type DeploymentConfig struct {
	ResourceVersion int         `json:"resourceVersion"`
	Value           interface{} `json:"value"`
}

type DeploymentCreateInput struct {
	Name                 string                     `json:"name"`
	Plugins              []*PluginsCreateInput      `json:"plugins"`
	Platforms            *PlatformsCreateInput      `json:"platforms"`
	Actions              []*ActionCreateUpdateInput `json:"actions"`
	AttachDefaultAliases *bool                      `json:"attachDefaultAliases"`
	AttachDefaultActions *bool                      `json:"attachDefaultActions"`
	Draft                *bool                      `json:"draft"`
}

type DeploymentFailureInput struct {
	ResourceVersion int    `json:"resourceVersion"`
	Message         string `json:"message"`
}

type DeploymentHeartbeatInput struct {
	NodeCount int `json:"nodeCount"`
}

type DeploymentInfo struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type DeploymentPage struct {
	Data       []*Deployment `json:"data"`
	PageInfo   *PageInfo     `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (DeploymentPage) IsPageable()                 {}
func (this DeploymentPage) GetPageInfo() *PageInfo { return this.PageInfo }
func (this DeploymentPage) GetTotalCount() int     { return this.TotalCount }

type DeploymentStatus struct {
	Phase              DeploymentStatusPhase    `json:"phase"`
	Message            *string                  `json:"message"`
	BotkubeVersion     *string                  `json:"botkubeVersion"`
	Upgrade            *DeploymentUpgradeStatus `json:"upgrade"`
	LastTransitionTime *string                  `json:"lastTransitionTime"`
}

type DeploymentStatusInput struct {
	Message *string                `json:"message"`
	Phase   *DeploymentStatusPhase `json:"phase"`
}

type DeploymentUpdateInput struct {
	Name                 string                     `json:"name"`
	Platforms            *PlatformsUpdateInput      `json:"platforms"`
	Plugins              []*PluginsUpdateInput      `json:"plugins"`
	Actions              []*ActionCreateUpdateInput `json:"actions"`
	AttachDefaultAliases *bool                      `json:"attachDefaultAliases"`
	AttachDefaultActions *bool                      `json:"attachDefaultActions"`
	ResourceVersion      int                        `json:"resourceVersion"`
	Draft                *bool                      `json:"draft"`
}

type DeploymentUpgradeStatus struct {
	NeedsUpgrade         bool   `json:"needsUpgrade"`
	TargetBotkubeVersion string `json:"targetBotkubeVersion"`
}

type Discord struct {
	ID       string                 `json:"id"`
	Name     string                 `json:"name"`
	Token    string                 `json:"token"`
	BotID    string                 `json:"botId"`
	Channels []*ChannelBindingsByID `json:"channels"`
}

type DiscordCreateInput struct {
	Name     string                            `json:"name"`
	Token    string                            `json:"token"`
	BotID    string                            `json:"botId"`
	Channels []*ChannelBindingsByIDCreateInput `json:"channels"`
}

type DiscordUpdateInput struct {
	ID       *string                           `json:"id"`
	Name     string                            `json:"name"`
	Token    string                            `json:"token"`
	BotID    string                            `json:"botId"`
	Channels []*ChannelBindingsByIDUpdateInput `json:"channels"`
}

type Elasticsearch struct {
	ID                string                `json:"id"`
	Name              string                `json:"name"`
	Username          string                `json:"username"`
	Password          string                `json:"password"`
	Server            string                `json:"server"`
	SkipTLSVerify     bool                  `json:"skipTlsVerify"`
	AwsSigningRegion  *string               `json:"awsSigningRegion"`
	AwsSigningRoleArn *string               `json:"awsSigningRoleArn"`
	Indices           []*ElasticsearchIndex `json:"indices"`
}

type ElasticsearchCreateInput struct {
	Name              string                           `json:"name"`
	Username          string                           `json:"username"`
	Password          string                           `json:"password"`
	Server            string                           `json:"server"`
	SkipTLSVerify     bool                             `json:"skipTlsVerify"`
	AwsSigningRegion  *string                          `json:"awsSigningRegion"`
	AwsSigningRoleArn *string                          `json:"awsSigningRoleArn"`
	Indices           []*ElasticsearchIndexCreateInput `json:"indices"`
}

type ElasticsearchIndex struct {
	ID       string        `json:"id"`
	Name     string        `json:"name"`
	Type     string        `json:"type"`
	Shards   int           `json:"shards"`
	Replicas int           `json:"replicas"`
	Bindings *SinkBindings `json:"bindings"`
}

type ElasticsearchIndexCreateInput struct {
	Name     string                   `json:"name"`
	Type     string                   `json:"type"`
	Shards   int                      `json:"shards"`
	Replicas int                      `json:"replicas"`
	Bindings *SinkBindingsCreateInput `json:"bindings"`
}

type ElasticsearchIndexUpdateInput struct {
	Name     string                   `json:"name"`
	Type     string                   `json:"type"`
	Shards   int                      `json:"shards"`
	Replicas int                      `json:"replicas"`
	Bindings *SinkBindingsUpdateInput `json:"bindings"`
}

type ElasticsearchUpdateInput struct {
	ID                *string                          `json:"id"`
	Name              string                           `json:"name"`
	Username          string                           `json:"username"`
	Password          string                           `json:"password"`
	Server            string                           `json:"server"`
	SkipTLSVerify     bool                             `json:"skipTlsVerify"`
	AwsSigningRegion  *string                          `json:"awsSigningRegion"`
	AwsSigningRoleArn *string                          `json:"awsSigningRoleArn"`
	Indices           []*ElasticsearchIndexUpdateInput `json:"indices"`
}

type GroupPolicySubject struct {
	Type   PolicySubjectType   `json:"type"`
	Static *GroupStaticSubject `json:"static"`
	Prefix *string             `json:"prefix"`
}

type GroupPolicySubjectInput struct {
	Type   PolicySubjectType        `json:"type"`
	Static *GroupStaticSubjectInput `json:"static"`
	Prefix *string                  `json:"prefix"`
}

type GroupStaticSubject struct {
	Values []string `json:"values"`
}

type GroupStaticSubjectInput struct {
	Values []string `json:"values"`
}

type Heartbeat struct {
	NodeCount *int `json:"nodeCount"`
}

type HubSpotIdentificationToken struct {
	Token string `json:"token"`
}

type HubspotIdentificationTokenInput struct {
	Email     string  `json:"email"`
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
}

type InstallUpgradeInstructionsForPlatform struct {
	PlatformName          string                        `json:"platformName"`
	PlatformType          InstallationPlatformType      `json:"platformType"`
	InstallationType      InstallationType              `json:"installationType"`
	Prerequisites         []*InstallUpgradePrerequisite `json:"prerequisites"`
	InstallUpgradeCommand string                        `json:"installUpgradeCommand"`
}

type InstallUpgradePrerequisite struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
	Command     *string `json:"command"`
}

type Invoice struct {
	IsOnTrial             bool           `json:"isOnTrial"`
	UpcomingAmount        int            `json:"upcomingAmount"`
	Currency              string         `json:"currency"`
	EndOfBillingCycleDate *string        `json:"endOfBillingCycleDate"`
	EndOfTrialDate        *string        `json:"endOfTrialDate"`
	Items                 []*InvoiceItem `json:"items"`
	Coupon                *Coupon        `json:"coupon"`
}

type InvoiceItem struct {
	Amount          int     `json:"amount"`
	PriceUnitAmount string  `json:"priceUnitAmount"`
	Currency        string  `json:"currency"`
	Description     *string `json:"description"`
}

type Mattermost struct {
	ID       string                   `json:"id"`
	Name     string                   `json:"name"`
	BotName  string                   `json:"botName"`
	URL      string                   `json:"url"`
	Token    string                   `json:"token"`
	Team     string                   `json:"team"`
	Channels []*ChannelBindingsByName `json:"channels"`
}

type MattermostCreateInput struct {
	Name     string                              `json:"name"`
	BotName  string                              `json:"botName"`
	URL      string                              `json:"url"`
	Token    string                              `json:"token"`
	Team     string                              `json:"team"`
	Channels []*ChannelBindingsByNameCreateInput `json:"channels"`
}

type MattermostUpdateInput struct {
	ID       *string                             `json:"id"`
	Name     string                              `json:"name"`
	BotName  string                              `json:"botName"`
	URL      string                              `json:"url"`
	Token    string                              `json:"token"`
	Team     string                              `json:"team"`
	Channels []*ChannelBindingsByNameUpdateInput `json:"channels"`
}

type NotificationPatchDeploymentConfigInput struct {
	CommunicationGroupName string      `json:"communicationGroupName"`
	Platform               BotPlatform `json:"platform"`
	ChannelAlias           string      `json:"channelAlias"`
	Disabled               bool        `json:"disabled"`
}

type Organization struct {
	ID                      string                          `json:"id"`
	DisplayName             string                          `json:"displayName"`
	Subscription            *OrganizationSubscription       `json:"subscription"`
	ConnectedPlatforms      *OrganizationConnectedPlatforms `json:"connectedPlatforms"`
	OwnerID                 string                          `json:"ownerId"`
	Owner                   *User                           `json:"owner"`
	Members                 []*User                         `json:"members"`
	Quota                   *Quota                          `json:"quota"`
	BillingHistoryAvailable bool                            `json:"billingHistoryAvailable"`
	UpdateOperations        *OrganizationUpdateOperations   `json:"updateOperations"`
	Usage                   *Usage                          `json:"usage"`
}

type OrganizationCreateInput struct {
	DisplayName string `json:"displayName"`
}

type OrganizationSubscription struct {
	PlanName        string   `json:"planName"`
	CustomerID      *string  `json:"customerId"`
	SubscriptionID  *string  `json:"subscriptionId"`
	PlanDisplayName *string  `json:"planDisplayName"`
	IsDefaultPlan   *bool    `json:"isDefaultPlan"`
	TrialConsumed   bool     `json:"trialConsumed"`
	Invoice         *Invoice `json:"invoice"`
}

type OrganizationUpdateInput struct {
	DisplayName string `json:"displayName"`
}

type OrganizationUpdateOperations struct {
	Blocked bool     `json:"blocked"`
	Reasons []string `json:"reasons"`
}

type PageInfo struct {
	Limit       int  `json:"limit"`
	Offset      int  `json:"offset"`
	HasNextPage bool `json:"hasNextPage"`
}

type PatchDeploymentConfigInput struct {
	ResourceVersion int                                      `json:"resourceVersion"`
	Notification    *NotificationPatchDeploymentConfigInput  `json:"notification"`
	SourceBinding   *SourceBindingPatchDeploymentConfigInput `json:"sourceBinding"`
	Action          *ActionPatchDeploymentConfigInput        `json:"action"`
}

type PlatformsCreateInput struct {
	Discords        []*DiscordCreateInput       `json:"discords"`
	SocketSlacks    []*SocketSlackCreateInput   `json:"socketSlacks"`
	CloudSlacks     []*CloudSlackCreateInput    `json:"cloudSlacks"`
	Mattermosts     []*MattermostCreateInput    `json:"mattermosts"`
	Webhooks        []*WebhookCreateInput       `json:"webhooks"`
	Elasticsearches []*ElasticsearchCreateInput `json:"elasticsearches"`
}

type PlatformsUpdateInput struct {
	SocketSlacks    []*SocketSlackUpdateInput   `json:"socketSlacks"`
	CloudSlacks     []*CloudSlackUpdateInput    `json:"cloudSlacks"`
	Discords        []*DiscordUpdateInput       `json:"discords"`
	Mattermosts     []*MattermostUpdateInput    `json:"mattermosts"`
	Webhooks        []*WebhookUpdateInput       `json:"webhooks"`
	CloudMsTeams    []*CloudMsTeamsUpdateInput  `json:"cloudMsTeams"`
	Elasticsearches []*ElasticsearchUpdateInput `json:"elasticsearches"`
}

type Plugin struct {
	ID                string     `json:"id"`
	Name              string     `json:"name"`
	DisplayName       string     `json:"displayName"`
	Type              PluginType `json:"type"`
	ConfigurationName string     `json:"configurationName"`
	Configuration     string     `json:"configuration"`
	Enabled           bool       `json:"enabled"`
	Rbac              *Rbac      `json:"rbac"`
}

type PluginConfigurationGroupInput struct {
	Name           string                      `json:"name"`
	DisplayName    string                      `json:"displayName"`
	Type           PluginType                  `json:"type"`
	Configurations []*PluginConfigurationInput `json:"configurations"`
	Enabled        bool                        `json:"enabled"`
}

type PluginConfigurationGroupUpdateInput struct {
	ID             *string                           `json:"id"`
	Name           string                            `json:"name"`
	DisplayName    string                            `json:"displayName"`
	Type           PluginType                        `json:"type"`
	Enabled        bool                              `json:"enabled"`
	Configurations []*PluginConfigurationUpdateInput `json:"configurations"`
}

type PluginConfigurationInput struct {
	Name          string     `json:"name"`
	Configuration string     `json:"configuration"`
	Rbac          *RBACInput `json:"rbac"`
}

type PluginConfigurationUpdateInput struct {
	ID            *string          `json:"id"`
	Name          string           `json:"name"`
	Configuration string           `json:"configuration"`
	Rbac          *RBACUpdateInput `json:"rbac"`
}

type PluginPage struct {
	Data       []*Plugin `json:"data"`
	PageInfo   *PageInfo `json:"pageInfo"`
	TotalCount int       `json:"totalCount"`
}

func (PluginPage) IsPageable()                 {}
func (this PluginPage) GetPageInfo() *PageInfo { return this.PageInfo }
func (this PluginPage) GetTotalCount() int     { return this.TotalCount }

type PluginTemplate struct {
	Name             string      `json:"name"`
	Title            string      `json:"title"`
	Description      string      `json:"description"`
	DocumentationURL *string     `json:"documentationUrl"`
	Type             PluginType  `json:"type"`
	Recommended      bool        `json:"recommended"`
	Schema           interface{} `json:"schema"`
}

type PluginTemplatePage struct {
	Data []*PluginTemplate `json:"data"`
}

type PluginsCreateInput struct {
	Groups []*PluginConfigurationGroupInput `json:"groups"`
}

type PluginsUpdateInput struct {
	Groups []*PluginConfigurationGroupUpdateInput `json:"groups"`
}

type Quota struct {
	DeploymentCount      *int `json:"deploymentCount"`
	AuditRetentionPeriod *int `json:"auditRetentionPeriod"`
	MemberCount          *int `json:"memberCount"`
	NodeCount            *int `json:"nodeCount"`
	CloudSlackUseCount   *int `json:"cloudSlackUseCount"`
	AiMonthlyTokenCount  *int `json:"aiMonthlyTokenCount"`
}

type Rbac struct {
	ID    string              `json:"id"`
	User  *UserPolicySubject  `json:"user"`
	Group *GroupPolicySubject `json:"group"`
}

type RBACInput struct {
	User  *UserPolicySubjectInput  `json:"user"`
	Group *GroupPolicySubjectInput `json:"group"`
}

type RBACUpdateInput struct {
	ID    string                   `json:"id"`
	User  *UserPolicySubjectInput  `json:"user"`
	Group *GroupPolicySubjectInput `json:"group"`
}

type RegexConstraints struct {
	Include []string `json:"include"`
	Exclude []string `json:"exclude"`
}

type RegexConstraintsInput struct {
	Include []string `json:"include"`
	Exclude []string `json:"exclude"`
}

type RemoveMemberFromOrganizationInput struct {
	OrgID  string `json:"orgId"`
	UserID string `json:"userId"`
}

type RemovePlatformFromOrganizationInput struct {
	OrganizationID string                            `json:"organizationId"`
	Slack          *RemoveSlackFromOrganizationInput `json:"slack"`
	Teams          *RemoveTeamsFromOrganizationInput `json:"teams"`
}

type RemoveSlackFromOrganizationInput struct {
	ID string `json:"ID"`
}

type RemoveTeamsFromOrganizationInput struct {
	ID string `json:"ID"`
}

type SinkBindings struct {
	Sources []string `json:"sources"`
}

type SinkBindingsCreateInput struct {
	Sources []*string `json:"sources"`
}

type SinkBindingsUpdateInput struct {
	Sources []*string `json:"sources"`
}

type SlackWorkspace struct {
	ID                     string                                  `json:"id"`
	Name                   string                                  `json:"name"`
	TeamID                 string                                  `json:"teamId"`
	URL                    string                                  `json:"url"`
	Channels               []*SlackWorkspaceChannel                `json:"channels"`
	IsReinstallRequired    bool                                    `json:"isReinstallRequired"`
	ConnectedOrganizations []*SlackWorkspaceConnectedOrganizations `json:"connectedOrganizations"`
}

type SlackWorkspaceChannel struct {
	Name      string  `json:"name"`
	IsPrivate bool    `json:"isPrivate"`
	Topic     *string `json:"topic"`
	Purpose   *string `json:"purpose"`
}

type SlackWorkspaceConnectedOrganizations struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type SocketSlack struct {
	ID       string                   `json:"id"`
	Name     string                   `json:"name"`
	AppToken string                   `json:"appToken"`
	BotToken string                   `json:"botToken"`
	Channels []*ChannelBindingsByName `json:"channels"`
}

type SocketSlackCreateInput struct {
	Name     string                              `json:"name"`
	AppToken string                              `json:"appToken"`
	BotToken string                              `json:"botToken"`
	Channels []*ChannelBindingsByNameCreateInput `json:"channels"`
}

type SocketSlackUpdateInput struct {
	ID       *string                             `json:"id"`
	Name     string                              `json:"name"`
	AppToken string                              `json:"appToken"`
	BotToken string                              `json:"botToken"`
	Channels []*ChannelBindingsByNameUpdateInput `json:"channels"`
}

type SourceBindingPatchDeploymentConfigInput struct {
	CommunicationGroupName string      `json:"communicationGroupName"`
	Platform               BotPlatform `json:"platform"`
	ChannelAlias           string      `json:"channelAlias"`
	SourceBindings         []string    `json:"sourceBindings"`
}

type SourceEventDetails struct {
	Name        string `json:"name"`
	DisplayName string `json:"displayName"`
}

type SourceEventEmittedEvent struct {
	ID           string              `json:"id"`
	Type         AuditEventType      `json:"type"`
	DeploymentID string              `json:"deploymentId"`
	Deployment   *Deployment         `json:"deployment"`
	CreatedAt    string              `json:"createdAt"`
	Event        interface{}         `json:"event"`
	Source       *SourceEventDetails `json:"source"`
	PluginName   string              `json:"pluginName"`
}

func (SourceEventEmittedEvent) IsAuditEvent()                   {}
func (this SourceEventEmittedEvent) GetID() string              { return this.ID }
func (this SourceEventEmittedEvent) GetType() *AuditEventType   { return &this.Type }
func (this SourceEventEmittedEvent) GetDeploymentID() string    { return this.DeploymentID }
func (this SourceEventEmittedEvent) GetCreatedAt() string       { return this.CreatedAt }
func (this SourceEventEmittedEvent) GetPluginName() string      { return this.PluginName }
func (this SourceEventEmittedEvent) GetDeployment() *Deployment { return this.Deployment }

type SubscriptionPlan struct {
	Name             string `json:"name"`
	DisplayName      string `json:"displayName"`
	IsDefault        bool   `json:"isDefault"`
	DisplayUnitPrice int    `json:"displayUnitPrice"`
	TrialPeriodDays  int    `json:"trialPeriodDays"`
}

type TeamsOrganizationConnectedOrganizations struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type TeamsOrganizationTeamChannel struct {
	ConversationID string `json:"conversationId"`
	Name           string `json:"name"`
	Description    string `json:"description"`
}

type TextMessageTriggers struct {
	Event                   TextMessageTriggerEvent `json:"event"`
	Text                    *RegexConstraints       `json:"text"`
	Users                   *RegexConstraints       `json:"users"`
	Command                 *string                 `json:"command"`
	Executors               []string                `json:"executors"`
	ProcessedEmojiIndicator *string                 `json:"processedEmojiIndicator"`
}

type TextMessageTriggersInput struct {
	Event                   TextMessageTriggerEvent `json:"event"`
	Text                    *RegexConstraintsInput  `json:"text"`
	Users                   *RegexConstraintsInput  `json:"users"`
	Command                 *string                 `json:"command"`
	Executors               []string                `json:"executors"`
	ProcessedEmojiIndicator *string                 `json:"processedEmojiIndicator"`
}

type UpdateCurrentUserInput struct {
	FirstLoginPageVisitedIn bool `json:"firstLoginPageVisitedIn"`
}

type User struct {
	ID                      string `json:"id"`
	Email                   string `json:"email"`
	FirstLoginPageVisitedIn bool   `json:"firstLoginPageVisitedIn"`
}

type UserPolicySubject struct {
	Type   PolicySubjectType  `json:"type"`
	Static *UserStaticSubject `json:"static"`
	Prefix *string            `json:"prefix"`
}

type UserPolicySubjectInput struct {
	Type   PolicySubjectType       `json:"type"`
	Static *UserStaticSubjectInput `json:"static"`
	Prefix *string                 `json:"prefix"`
}

type UserStaticSubject struct {
	Value string `json:"value"`
}

type UserStaticSubjectInput struct {
	Value string `json:"value"`
}

type Webhook struct {
	ID       string        `json:"id"`
	Name     string        `json:"name"`
	URL      string        `json:"url"`
	Bindings *SinkBindings `json:"bindings"`
}

type WebhookCreateInput struct {
	Name     string                   `json:"name"`
	URL      string                   `json:"url"`
	Bindings *SinkBindingsCreateInput `json:"bindings"`
}

type WebhookUpdateInput struct {
	ID       *string                  `json:"id"`
	Name     string                   `json:"name"`
	URL      string                   `json:"url"`
	Bindings *SinkBindingsUpdateInput `json:"bindings"`
}

type APICallEventQglType string

const (
	APICallEventQglTypeQuery    APICallEventQglType = "QUERY"
	APICallEventQglTypeMutation APICallEventQglType = "MUTATION"
)

var AllAPICallEventQglType = []APICallEventQglType{
	APICallEventQglTypeQuery,
	APICallEventQglTypeMutation,
}

func (e APICallEventQglType) IsValid() bool {
	switch e {
	case APICallEventQglTypeQuery, APICallEventQglTypeMutation:
		return true
	}
	return false
}

func (e APICallEventQglType) String() string {
	return string(e)
}

func (e *APICallEventQglType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = APICallEventQglType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApiCallEventQglType", str)
	}
	return nil
}

func (e APICallEventQglType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuditEventType string

const (
	AuditEventTypeCommandExecuted    AuditEventType = "COMMAND_EXECUTED"
	AuditEventTypeSourceEventEmitted AuditEventType = "SOURCE_EVENT_EMITTED"
	AuditEventTypeAPICall            AuditEventType = "API_CALL"
)

var AllAuditEventType = []AuditEventType{
	AuditEventTypeCommandExecuted,
	AuditEventTypeSourceEventEmitted,
	AuditEventTypeAPICall,
}

func (e AuditEventType) IsValid() bool {
	switch e {
	case AuditEventTypeCommandExecuted, AuditEventTypeSourceEventEmitted, AuditEventTypeAPICall:
		return true
	}
	return false
}

func (e AuditEventType) String() string {
	return string(e)
}

func (e *AuditEventType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuditEventType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuditEventType", str)
	}
	return nil
}

func (e AuditEventType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BotPlatform string

const (
	BotPlatformSLACk      BotPlatform = "SLACK"
	BotPlatformDiscord    BotPlatform = "DISCORD"
	BotPlatformMattermost BotPlatform = "MATTERMOST"
	BotPlatformMsTeams    BotPlatform = "MS_TEAMS"
	BotPlatformUnknown    BotPlatform = "UNKNOWN"
)

var AllBotPlatform = []BotPlatform{
	BotPlatformSLACk,
	BotPlatformDiscord,
	BotPlatformMattermost,
	BotPlatformMsTeams,
	BotPlatformUnknown,
}

func (e BotPlatform) IsValid() bool {
	switch e {
	case BotPlatformSLACk, BotPlatformDiscord, BotPlatformMattermost, BotPlatformMsTeams, BotPlatformUnknown:
		return true
	}
	return false
}

func (e BotPlatform) String() string {
	return string(e)
}

func (e *BotPlatform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BotPlatform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BotPlatform", str)
	}
	return nil
}

func (e BotPlatform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeploymentStatusPhase string

const (
	DeploymentStatusPhaseConnecting   DeploymentStatusPhase = "CONNECTING"
	DeploymentStatusPhaseConnected    DeploymentStatusPhase = "CONNECTED"
	DeploymentStatusPhaseDisconnected DeploymentStatusPhase = "DISCONNECTED"
	DeploymentStatusPhaseFailed       DeploymentStatusPhase = "FAILED"
	DeploymentStatusPhaseCreating     DeploymentStatusPhase = "CREATING"
	DeploymentStatusPhaseUpdating     DeploymentStatusPhase = "UPDATING"
	DeploymentStatusPhaseDeleted      DeploymentStatusPhase = "DELETED"
)

var AllDeploymentStatusPhase = []DeploymentStatusPhase{
	DeploymentStatusPhaseConnecting,
	DeploymentStatusPhaseConnected,
	DeploymentStatusPhaseDisconnected,
	DeploymentStatusPhaseFailed,
	DeploymentStatusPhaseCreating,
	DeploymentStatusPhaseUpdating,
	DeploymentStatusPhaseDeleted,
}

func (e DeploymentStatusPhase) IsValid() bool {
	switch e {
	case DeploymentStatusPhaseConnecting, DeploymentStatusPhaseConnected, DeploymentStatusPhaseDisconnected, DeploymentStatusPhaseFailed, DeploymentStatusPhaseCreating, DeploymentStatusPhaseUpdating, DeploymentStatusPhaseDeleted:
		return true
	}
	return false
}

func (e DeploymentStatusPhase) String() string {
	return string(e)
}

func (e *DeploymentStatusPhase) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeploymentStatusPhase(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeploymentStatusPhase", str)
	}
	return nil
}

func (e DeploymentStatusPhase) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InstallationPlatformType string

const (
	InstallationPlatformTypeMacSilicon InstallationPlatformType = "MAC_SILICON"
	InstallationPlatformTypeMacIntel   InstallationPlatformType = "MAC_INTEL"
	InstallationPlatformTypeLinux      InstallationPlatformType = "LINUX"
	InstallationPlatformTypeWindows    InstallationPlatformType = "WINDOWS"
	InstallationPlatformTypeOther      InstallationPlatformType = "OTHER"
	InstallationPlatformTypeFlux       InstallationPlatformType = "FLUX"
	InstallationPlatformTypeArgo       InstallationPlatformType = "ARGO"
)

var AllInstallationPlatformType = []InstallationPlatformType{
	InstallationPlatformTypeMacSilicon,
	InstallationPlatformTypeMacIntel,
	InstallationPlatformTypeLinux,
	InstallationPlatformTypeWindows,
	InstallationPlatformTypeOther,
	InstallationPlatformTypeFlux,
	InstallationPlatformTypeArgo,
}

func (e InstallationPlatformType) IsValid() bool {
	switch e {
	case InstallationPlatformTypeMacSilicon, InstallationPlatformTypeMacIntel, InstallationPlatformTypeLinux, InstallationPlatformTypeWindows, InstallationPlatformTypeOther, InstallationPlatformTypeFlux, InstallationPlatformTypeArgo:
		return true
	}
	return false
}

func (e InstallationPlatformType) String() string {
	return string(e)
}

func (e *InstallationPlatformType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InstallationPlatformType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InstallationPlatformType", str)
	}
	return nil
}

func (e InstallationPlatformType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InstallationType string

const (
	InstallationTypeCli    InstallationType = "CLI"
	InstallationTypeGitOps InstallationType = "GIT_OPS"
)

var AllInstallationType = []InstallationType{
	InstallationTypeCli,
	InstallationTypeGitOps,
}

func (e InstallationType) IsValid() bool {
	switch e {
	case InstallationTypeCli, InstallationTypeGitOps:
		return true
	}
	return false
}

func (e InstallationType) String() string {
	return string(e)
}

func (e *InstallationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InstallationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InstallationType", str)
	}
	return nil
}

func (e InstallationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PluginType string

const (
	PluginTypeSource   PluginType = "SOURCE"
	PluginTypeExecutor PluginType = "EXECUTOR"
)

var AllPluginType = []PluginType{
	PluginTypeSource,
	PluginTypeExecutor,
}

func (e PluginType) IsValid() bool {
	switch e {
	case PluginTypeSource, PluginTypeExecutor:
		return true
	}
	return false
}

func (e PluginType) String() string {
	return string(e)
}

func (e *PluginType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PluginType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PluginType", str)
	}
	return nil
}

func (e PluginType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PolicySubjectType string

const (
	PolicySubjectTypeStatic      PolicySubjectType = "STATIC"
	PolicySubjectTypeChannelName PolicySubjectType = "CHANNEL_NAME"
	PolicySubjectTypeEmpty       PolicySubjectType = "EMPTY"
)

var AllPolicySubjectType = []PolicySubjectType{
	PolicySubjectTypeStatic,
	PolicySubjectTypeChannelName,
	PolicySubjectTypeEmpty,
}

func (e PolicySubjectType) IsValid() bool {
	switch e {
	case PolicySubjectTypeStatic, PolicySubjectTypeChannelName, PolicySubjectTypeEmpty:
		return true
	}
	return false
}

func (e PolicySubjectType) String() string {
	return string(e)
}

func (e *PolicySubjectType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PolicySubjectType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PolicySubjectType", str)
	}
	return nil
}

func (e PolicySubjectType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StripeCouponDuration string

const (
	StripeCouponDurationForever   StripeCouponDuration = "FOREVER"
	StripeCouponDurationOnce      StripeCouponDuration = "ONCE"
	StripeCouponDurationRepeating StripeCouponDuration = "REPEATING"
	StripeCouponDurationUnknown   StripeCouponDuration = "UNKNOWN"
)

var AllStripeCouponDuration = []StripeCouponDuration{
	StripeCouponDurationForever,
	StripeCouponDurationOnce,
	StripeCouponDurationRepeating,
	StripeCouponDurationUnknown,
}

func (e StripeCouponDuration) IsValid() bool {
	switch e {
	case StripeCouponDurationForever, StripeCouponDurationOnce, StripeCouponDurationRepeating, StripeCouponDurationUnknown:
		return true
	}
	return false
}

func (e StripeCouponDuration) String() string {
	return string(e)
}

func (e *StripeCouponDuration) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StripeCouponDuration(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StripeCouponDuration", str)
	}
	return nil
}

func (e StripeCouponDuration) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TextMessageTriggerEvent string

const (
	TextMessageTriggerEventChannelMessage TextMessageTriggerEvent = "CHANNEL_MESSAGE"
)

var AllTextMessageTriggerEvent = []TextMessageTriggerEvent{
	TextMessageTriggerEventChannelMessage,
}

func (e TextMessageTriggerEvent) IsValid() bool {
	switch e {
	case TextMessageTriggerEventChannelMessage:
		return true
	}
	return false
}

func (e TextMessageTriggerEvent) String() string {
	return string(e)
}

func (e *TextMessageTriggerEvent) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TextMessageTriggerEvent(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TextMessageTriggerEvent", str)
	}
	return nil
}

func (e TextMessageTriggerEvent) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
