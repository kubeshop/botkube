// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Alias() AliasResolver
	CommandExecutedEvent() CommandExecutedEventResolver
	Deployment() DeploymentResolver
	DeploymentStatus() DeploymentStatusResolver
	Mutation() MutationResolver
	Organization() OrganizationResolver
	OrganizationSubscription() OrganizationSubscriptionResolver
	Platforms() PlatformsResolver
	PluginTemplate() PluginTemplateResolver
	Query() QueryResolver
	SourceEventEmittedEvent() SourceEventEmittedEventResolver
	Usage() UsageResolver
}

type DirectiveRoot struct {
	HasScopes                         func(ctx context.Context, obj interface{}, next graphql.Resolver, scopes []string, disableEmailValidation *bool) (res interface{}, err error)
	RestrictDeploymentAccessForSameID func(ctx context.Context, obj interface{}, next graphql.Resolver, idInputFieldName string) (res interface{}, err error)
	RestrictOnOrgUpdatesBlocked       func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	Action struct {
		Bindings    func(childComplexity int) int
		Command     func(childComplexity int) int
		DisplayName func(childComplexity int) int
		Enabled     func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	ActionBindings struct {
		Executors func(childComplexity int) int
		Sources   func(childComplexity int) int
	}

	Alias struct {
		Command     func(childComplexity int) int
		Deployments func(childComplexity int) int
		DisplayName func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	AliasPage struct {
		Data       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
		TotalPages func(childComplexity int) int
	}

	ApiKey struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	AuditEventPage struct {
		Data       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
		TotalPages func(childComplexity int) int
	}

	BotBindings struct {
		Executors func(childComplexity int) int
		Sources   func(childComplexity int) int
	}

	ChannelBindingsByID struct {
		Bindings              func(childComplexity int) int
		ID                    func(childComplexity int) int
		NotificationsDisabled func(childComplexity int) int
	}

	ChannelBindingsByName struct {
		Bindings              func(childComplexity int) int
		Name                  func(childComplexity int) int
		NotificationsDisabled func(childComplexity int) int
	}

	CommandExecutedEvent struct {
		BotPlatform  func(childComplexity int) int
		Channel      func(childComplexity int) int
		Command      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Deployment   func(childComplexity int) int
		DeploymentID func(childComplexity int) int
		ID           func(childComplexity int) int
		PlatformUser func(childComplexity int) int
		PluginName   func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	Deployment struct {
		APIKey          func(childComplexity int) int
		Actions         func(childComplexity int) int
		Aliases         func(childComplexity int) int
		Heartbeat       func(childComplexity int) int
		HelmCommand     func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Platforms       func(childComplexity int) int
		Plugins         func(childComplexity int) int
		ResourceVersion func(childComplexity int) int
		Status          func(childComplexity int) int
		YamlConfig      func(childComplexity int) int
	}

	DeploymentConfig struct {
		ResourceVersion func(childComplexity int) int
		Value           func(childComplexity int) int
	}

	DeploymentInfo struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	DeploymentPage struct {
		Data       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	DeploymentStatus struct {
		BotkubeVersion     func(childComplexity int) int
		LastTransitionTime func(childComplexity int) int
		Message            func(childComplexity int) int
		Phase              func(childComplexity int) int
		Upgrade            func(childComplexity int) int
	}

	DeploymentUpgradeStatus struct {
		NeedsUpgrade         func(childComplexity int) int
		TargetBotkubeVersion func(childComplexity int) int
	}

	Discord struct {
		BotID    func(childComplexity int) int
		Channels func(childComplexity int) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		Token    func(childComplexity int) int
	}

	Elasticsearch struct {
		AwsSigningRegion  func(childComplexity int) int
		AwsSigningRoleArn func(childComplexity int) int
		ID                func(childComplexity int) int
		Indices           func(childComplexity int) int
		Name              func(childComplexity int) int
		Password          func(childComplexity int) int
		Server            func(childComplexity int) int
		SkipTLSVerify     func(childComplexity int) int
		Username          func(childComplexity int) int
	}

	ElasticsearchIndex struct {
		Bindings func(childComplexity int) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		Replicas func(childComplexity int) int
		Shards   func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	Heartbeat struct {
		NodeCount func(childComplexity int) int
	}

	Invoice struct {
		Currency              func(childComplexity int) int
		EndOfBillingCycleDate func(childComplexity int) int
		EndOfTrialDate        func(childComplexity int) int
		IsOnTrial             func(childComplexity int) int
		Items                 func(childComplexity int) int
		UpcomingAmount        func(childComplexity int) int
	}

	InvoiceItem struct {
		Amount          func(childComplexity int) int
		Currency        func(childComplexity int) int
		Description     func(childComplexity int) int
		PriceUnitAmount func(childComplexity int) int
	}

	Mattermost struct {
		BotName  func(childComplexity int) int
		Channels func(childComplexity int) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		Team     func(childComplexity int) int
		Token    func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	MsTeams struct {
		AppID                 func(childComplexity int) int
		AppPassword           func(childComplexity int) int
		Bindings              func(childComplexity int) int
		BotName               func(childComplexity int) int
		ID                    func(childComplexity int) int
		MessagePath           func(childComplexity int) int
		Name                  func(childComplexity int) int
		NotificationsDisabled func(childComplexity int) int
		Port                  func(childComplexity int) int
	}

	Mutation struct {
		AddMemberForOrganization     func(childComplexity int, input AddMemberForOrganizationInput) int
		CreateAlias                  func(childComplexity int, input AliasCreateInput) int
		CreateAuditEvent             func(childComplexity int, input AuditEventCreateInput) int
		CreateDeployment             func(childComplexity int, input DeploymentCreateInput) int
		CreateOrganization           func(childComplexity int, input OrganizationCreateInput) int
		DeleteAlias                  func(childComplexity int, id string) int
		DeleteDeployment             func(childComplexity int, id string) int
		GenerateBillingPortalURL     func(childComplexity int) int
		GenerateCheckoutURL          func(childComplexity int, planName string) int
		PatchDeploymentConfig        func(childComplexity int, id string, input PatchDeploymentConfigInput) int
		RegenerateDeploymentAPIKey   func(childComplexity int, id string) int
		RemoveMemberFromOrganization func(childComplexity int, input RemoveMemberFromOrganizationInput) int
		ReportDeploymentFailure      func(childComplexity int, id string, in DeploymentFailureInput) int
		ReportDeploymentHeartbeat    func(childComplexity int, id string, in DeploymentHeartbeatInput) int
		ReportDeploymentShutdown     func(childComplexity int, id string, resourceVersion int) int
		ReportDeploymentStartup      func(childComplexity int, id string, resourceVersion int, botkubeVersion *string) int
		ResendEmailVerification      func(childComplexity int) int
		UpdateAlias                  func(childComplexity int, id string, input AliasUpdateInput) int
		UpdateDeployment             func(childComplexity int, id string, input DeploymentUpdateInput) int
		UpdateOrganization           func(childComplexity int, id string, input OrganizationUpdateInput) int
	}

	Organization struct {
		BillingHistoryAvailable func(childComplexity int) int
		DisplayName             func(childComplexity int) int
		ID                      func(childComplexity int) int
		Members                 func(childComplexity int) int
		Owner                   func(childComplexity int) int
		OwnerID                 func(childComplexity int) int
		Quota                   func(childComplexity int) int
		Subscription            func(childComplexity int) int
		UpdateOperations        func(childComplexity int) int
		Usage                   func(childComplexity int) int
	}

	OrganizationSubscription struct {
		CustomerID      func(childComplexity int) int
		Invoice         func(childComplexity int) int
		IsDefaultPlan   func(childComplexity int) int
		PlanDisplayName func(childComplexity int) int
		PlanName        func(childComplexity int) int
		SubscriptionID  func(childComplexity int) int
		TrialConsumed   func(childComplexity int) int
	}

	OrganizationUpdateOperations struct {
		Blocked func(childComplexity int) int
		Reasons func(childComplexity int) int
	}

	PageInfo struct {
		HasNextPage func(childComplexity int) int
		Limit       func(childComplexity int) int
		Offset      func(childComplexity int) int
	}

	Platforms struct {
		Discords        func(childComplexity int) int
		Elasticsearches func(childComplexity int) int
		Mattermosts     func(childComplexity int) int
		MsTeams         func(childComplexity int) int
		SocketSlacks    func(childComplexity int) int
		Webhooks        func(childComplexity int) int
	}

	Plugin struct {
		Configuration     func(childComplexity int) int
		ConfigurationName func(childComplexity int) int
		DisplayName       func(childComplexity int) int
		ID                func(childComplexity int) int
		Name              func(childComplexity int) int
		Type              func(childComplexity int) int
	}

	PluginPage struct {
		Data       func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PluginTemplate struct {
		Description func(childComplexity int) int
		Name        func(childComplexity int) int
		Schema      func(childComplexity int) int
		Title       func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	PluginTemplatePage struct {
		Data func(childComplexity int) int
	}

	Query struct {
		Aliases           func(childComplexity int, offset *int, limit *int) int
		AuditEvents       func(childComplexity int, filter *AuditEventFilter, offset *int, limit *int) int
		Deployment        func(childComplexity int, id string) int
		Deployments       func(childComplexity int, offset *int, limit *int) int
		Organization      func(childComplexity int, id string) int
		Organizations     func(childComplexity int) int
		PluginTemplate    func(childComplexity int, name string) int
		PluginTemplates   func(childComplexity int) int
		SubscriptionPlans func(childComplexity int) int
	}

	Quota struct {
		AuditRetentionPeriod func(childComplexity int) int
		DeploymentCount      func(childComplexity int) int
		MemberCount          func(childComplexity int) int
		NodeCount            func(childComplexity int) int
	}

	SinkBindings struct {
		Sources func(childComplexity int) int
	}

	SocketSlack struct {
		AppToken func(childComplexity int) int
		BotToken func(childComplexity int) int
		Channels func(childComplexity int) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
	}

	SourceEventDetails struct {
		DisplayName func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	SourceEventEmittedEvent struct {
		CreatedAt    func(childComplexity int) int
		Deployment   func(childComplexity int) int
		DeploymentID func(childComplexity int) int
		Event        func(childComplexity int) int
		ID           func(childComplexity int) int
		PluginName   func(childComplexity int) int
		Source       func(childComplexity int) int
		Type         func(childComplexity int) int
	}

	SubscriptionPlan struct {
		DisplayName      func(childComplexity int) int
		DisplayUnitPrice func(childComplexity int) int
		IsDefault        func(childComplexity int) int
		Name             func(childComplexity int) int
		TrialPeriodDays  func(childComplexity int) int
	}

	Usage struct {
		DeploymentCount func(childComplexity int) int
		MemberCount     func(childComplexity int) int
		NodeCount       func(childComplexity int) int
	}

	User struct {
		Email func(childComplexity int) int
		ID    func(childComplexity int) int
	}

	Webhook struct {
		Bindings func(childComplexity int) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		URL      func(childComplexity int) int
	}
}

type AliasResolver interface {
	Deployments(ctx context.Context, obj *Alias) ([]*DeploymentInfo, error)
}
type CommandExecutedEventResolver interface {
	Deployment(ctx context.Context, obj *CommandExecutedEvent) (*Deployment, error)
}
type DeploymentResolver interface {
	Actions(ctx context.Context, obj *Deployment) ([]*Action, error)
	Plugins(ctx context.Context, obj *Deployment) ([]*Plugin, error)
	Platforms(ctx context.Context, obj *Deployment) (*Platforms, error)

	APIKey(ctx context.Context, obj *Deployment) (*APIKey, error)
	YamlConfig(ctx context.Context, obj *Deployment) (*string, error)
	Aliases(ctx context.Context, obj *Deployment) ([]*Alias, error)
	HelmCommand(ctx context.Context, obj *Deployment) (*string, error)
}
type DeploymentStatusResolver interface {
	Upgrade(ctx context.Context, obj *DeploymentStatus) (*DeploymentUpgradeStatus, error)
}
type MutationResolver interface {
	CreateAuditEvent(ctx context.Context, input AuditEventCreateInput) (AuditEvent, error)
	CreateAlias(ctx context.Context, input AliasCreateInput) (*Alias, error)
	UpdateAlias(ctx context.Context, id string, input AliasUpdateInput) (*Alias, error)
	DeleteAlias(ctx context.Context, id string) (*bool, error)
	CreateDeployment(ctx context.Context, input DeploymentCreateInput) (*Deployment, error)
	UpdateDeployment(ctx context.Context, id string, input DeploymentUpdateInput) (*Deployment, error)
	DeleteDeployment(ctx context.Context, id string) (*bool, error)
	PatchDeploymentConfig(ctx context.Context, id string, input PatchDeploymentConfigInput) (*bool, error)
	RegenerateDeploymentAPIKey(ctx context.Context, id string) (*APIKey, error)
	ReportDeploymentStartup(ctx context.Context, id string, resourceVersion int, botkubeVersion *string) (*bool, error)
	ReportDeploymentShutdown(ctx context.Context, id string, resourceVersion int) (*bool, error)
	ReportDeploymentFailure(ctx context.Context, id string, in DeploymentFailureInput) (*bool, error)
	ReportDeploymentHeartbeat(ctx context.Context, id string, in DeploymentHeartbeatInput) (*bool, error)
	CreateOrganization(ctx context.Context, input OrganizationCreateInput) (*Organization, error)
	UpdateOrganization(ctx context.Context, id string, input OrganizationUpdateInput) (*Organization, error)
	AddMemberForOrganization(ctx context.Context, input AddMemberForOrganizationInput) (*Organization, error)
	RemoveMemberFromOrganization(ctx context.Context, input RemoveMemberFromOrganizationInput) (*Organization, error)
	GenerateCheckoutURL(ctx context.Context, planName string) (string, error)
	GenerateBillingPortalURL(ctx context.Context) (string, error)
	ResendEmailVerification(ctx context.Context) (bool, error)
}
type OrganizationResolver interface {
	Owner(ctx context.Context, obj *Organization) (*User, error)
	Members(ctx context.Context, obj *Organization) ([]*User, error)
	Quota(ctx context.Context, obj *Organization) (*Quota, error)

	Usage(ctx context.Context, obj *Organization) (*Usage, error)
}
type OrganizationSubscriptionResolver interface {
	Invoice(ctx context.Context, obj *OrganizationSubscription) (*Invoice, error)
}
type PlatformsResolver interface {
	SocketSlacks(ctx context.Context, obj *Platforms) ([]*SocketSlack, error)
	Discords(ctx context.Context, obj *Platforms) ([]*Discord, error)
	Mattermosts(ctx context.Context, obj *Platforms) ([]*Mattermost, error)
	Webhooks(ctx context.Context, obj *Platforms) ([]*Webhook, error)
	MsTeams(ctx context.Context, obj *Platforms) ([]*MsTeams, error)
	Elasticsearches(ctx context.Context, obj *Platforms) ([]*Elasticsearch, error)
}
type PluginTemplateResolver interface {
	Schema(ctx context.Context, obj *PluginTemplate) (interface{}, error)
}
type QueryResolver interface {
	AuditEvents(ctx context.Context, filter *AuditEventFilter, offset *int, limit *int) (*AuditEventPage, error)
	Aliases(ctx context.Context, offset *int, limit *int) (*AliasPage, error)
	Deployments(ctx context.Context, offset *int, limit *int) (*DeploymentPage, error)
	Deployment(ctx context.Context, id string) (*Deployment, error)
	PluginTemplates(ctx context.Context) (*PluginTemplatePage, error)
	PluginTemplate(ctx context.Context, name string) (*PluginTemplate, error)
	Organizations(ctx context.Context) ([]*Organization, error)
	Organization(ctx context.Context, id string) (*Organization, error)
	SubscriptionPlans(ctx context.Context) ([]*SubscriptionPlan, error)
}
type SourceEventEmittedEventResolver interface {
	Deployment(ctx context.Context, obj *SourceEventEmittedEvent) (*Deployment, error)
}
type UsageResolver interface {
	DeploymentCount(ctx context.Context, obj *Usage) (*int, error)
	MemberCount(ctx context.Context, obj *Usage) (*int, error)
	NodeCount(ctx context.Context, obj *Usage) (*int, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Action.bindings":
		if e.complexity.Action.Bindings == nil {
			break
		}

		return e.complexity.Action.Bindings(childComplexity), true

	case "Action.command":
		if e.complexity.Action.Command == nil {
			break
		}

		return e.complexity.Action.Command(childComplexity), true

	case "Action.displayName":
		if e.complexity.Action.DisplayName == nil {
			break
		}

		return e.complexity.Action.DisplayName(childComplexity), true

	case "Action.enabled":
		if e.complexity.Action.Enabled == nil {
			break
		}

		return e.complexity.Action.Enabled(childComplexity), true

	case "Action.id":
		if e.complexity.Action.ID == nil {
			break
		}

		return e.complexity.Action.ID(childComplexity), true

	case "Action.name":
		if e.complexity.Action.Name == nil {
			break
		}

		return e.complexity.Action.Name(childComplexity), true

	case "ActionBindings.executors":
		if e.complexity.ActionBindings.Executors == nil {
			break
		}

		return e.complexity.ActionBindings.Executors(childComplexity), true

	case "ActionBindings.sources":
		if e.complexity.ActionBindings.Sources == nil {
			break
		}

		return e.complexity.ActionBindings.Sources(childComplexity), true

	case "Alias.command":
		if e.complexity.Alias.Command == nil {
			break
		}

		return e.complexity.Alias.Command(childComplexity), true

	case "Alias.deployments":
		if e.complexity.Alias.Deployments == nil {
			break
		}

		return e.complexity.Alias.Deployments(childComplexity), true

	case "Alias.displayName":
		if e.complexity.Alias.DisplayName == nil {
			break
		}

		return e.complexity.Alias.DisplayName(childComplexity), true

	case "Alias.id":
		if e.complexity.Alias.ID == nil {
			break
		}

		return e.complexity.Alias.ID(childComplexity), true

	case "Alias.name":
		if e.complexity.Alias.Name == nil {
			break
		}

		return e.complexity.Alias.Name(childComplexity), true

	case "AliasPage.data":
		if e.complexity.AliasPage.Data == nil {
			break
		}

		return e.complexity.AliasPage.Data(childComplexity), true

	case "AliasPage.pageInfo":
		if e.complexity.AliasPage.PageInfo == nil {
			break
		}

		return e.complexity.AliasPage.PageInfo(childComplexity), true

	case "AliasPage.totalCount":
		if e.complexity.AliasPage.TotalCount == nil {
			break
		}

		return e.complexity.AliasPage.TotalCount(childComplexity), true

	case "AliasPage.totalPages":
		if e.complexity.AliasPage.TotalPages == nil {
			break
		}

		return e.complexity.AliasPage.TotalPages(childComplexity), true

	case "ApiKey.name":
		if e.complexity.ApiKey.Name == nil {
			break
		}

		return e.complexity.ApiKey.Name(childComplexity), true

	case "ApiKey.value":
		if e.complexity.ApiKey.Value == nil {
			break
		}

		return e.complexity.ApiKey.Value(childComplexity), true

	case "AuditEventPage.data":
		if e.complexity.AuditEventPage.Data == nil {
			break
		}

		return e.complexity.AuditEventPage.Data(childComplexity), true

	case "AuditEventPage.pageInfo":
		if e.complexity.AuditEventPage.PageInfo == nil {
			break
		}

		return e.complexity.AuditEventPage.PageInfo(childComplexity), true

	case "AuditEventPage.totalCount":
		if e.complexity.AuditEventPage.TotalCount == nil {
			break
		}

		return e.complexity.AuditEventPage.TotalCount(childComplexity), true

	case "AuditEventPage.totalPages":
		if e.complexity.AuditEventPage.TotalPages == nil {
			break
		}

		return e.complexity.AuditEventPage.TotalPages(childComplexity), true

	case "BotBindings.executors":
		if e.complexity.BotBindings.Executors == nil {
			break
		}

		return e.complexity.BotBindings.Executors(childComplexity), true

	case "BotBindings.sources":
		if e.complexity.BotBindings.Sources == nil {
			break
		}

		return e.complexity.BotBindings.Sources(childComplexity), true

	case "ChannelBindingsByID.bindings":
		if e.complexity.ChannelBindingsByID.Bindings == nil {
			break
		}

		return e.complexity.ChannelBindingsByID.Bindings(childComplexity), true

	case "ChannelBindingsByID.id":
		if e.complexity.ChannelBindingsByID.ID == nil {
			break
		}

		return e.complexity.ChannelBindingsByID.ID(childComplexity), true

	case "ChannelBindingsByID.notificationsDisabled":
		if e.complexity.ChannelBindingsByID.NotificationsDisabled == nil {
			break
		}

		return e.complexity.ChannelBindingsByID.NotificationsDisabled(childComplexity), true

	case "ChannelBindingsByName.bindings":
		if e.complexity.ChannelBindingsByName.Bindings == nil {
			break
		}

		return e.complexity.ChannelBindingsByName.Bindings(childComplexity), true

	case "ChannelBindingsByName.name":
		if e.complexity.ChannelBindingsByName.Name == nil {
			break
		}

		return e.complexity.ChannelBindingsByName.Name(childComplexity), true

	case "ChannelBindingsByName.notificationsDisabled":
		if e.complexity.ChannelBindingsByName.NotificationsDisabled == nil {
			break
		}

		return e.complexity.ChannelBindingsByName.NotificationsDisabled(childComplexity), true

	case "CommandExecutedEvent.botPlatform":
		if e.complexity.CommandExecutedEvent.BotPlatform == nil {
			break
		}

		return e.complexity.CommandExecutedEvent.BotPlatform(childComplexity), true

	case "CommandExecutedEvent.channel":
		if e.complexity.CommandExecutedEvent.Channel == nil {
			break
		}

		return e.complexity.CommandExecutedEvent.Channel(childComplexity), true

	case "CommandExecutedEvent.command":
		if e.complexity.CommandExecutedEvent.Command == nil {
			break
		}

		return e.complexity.CommandExecutedEvent.Command(childComplexity), true

	case "CommandExecutedEvent.createdAt":
		if e.complexity.CommandExecutedEvent.CreatedAt == nil {
			break
		}

		return e.complexity.CommandExecutedEvent.CreatedAt(childComplexity), true

	case "CommandExecutedEvent.deployment":
		if e.complexity.CommandExecutedEvent.Deployment == nil {
			break
		}

		return e.complexity.CommandExecutedEvent.Deployment(childComplexity), true

	case "CommandExecutedEvent.deploymentId":
		if e.complexity.CommandExecutedEvent.DeploymentID == nil {
			break
		}

		return e.complexity.CommandExecutedEvent.DeploymentID(childComplexity), true

	case "CommandExecutedEvent.id":
		if e.complexity.CommandExecutedEvent.ID == nil {
			break
		}

		return e.complexity.CommandExecutedEvent.ID(childComplexity), true

	case "CommandExecutedEvent.platformUser":
		if e.complexity.CommandExecutedEvent.PlatformUser == nil {
			break
		}

		return e.complexity.CommandExecutedEvent.PlatformUser(childComplexity), true

	case "CommandExecutedEvent.pluginName":
		if e.complexity.CommandExecutedEvent.PluginName == nil {
			break
		}

		return e.complexity.CommandExecutedEvent.PluginName(childComplexity), true

	case "CommandExecutedEvent.type":
		if e.complexity.CommandExecutedEvent.Type == nil {
			break
		}

		return e.complexity.CommandExecutedEvent.Type(childComplexity), true

	case "Deployment.apiKey":
		if e.complexity.Deployment.APIKey == nil {
			break
		}

		return e.complexity.Deployment.APIKey(childComplexity), true

	case "Deployment.actions":
		if e.complexity.Deployment.Actions == nil {
			break
		}

		return e.complexity.Deployment.Actions(childComplexity), true

	case "Deployment.aliases":
		if e.complexity.Deployment.Aliases == nil {
			break
		}

		return e.complexity.Deployment.Aliases(childComplexity), true

	case "Deployment.heartbeat":
		if e.complexity.Deployment.Heartbeat == nil {
			break
		}

		return e.complexity.Deployment.Heartbeat(childComplexity), true

	case "Deployment.helmCommand":
		if e.complexity.Deployment.HelmCommand == nil {
			break
		}

		return e.complexity.Deployment.HelmCommand(childComplexity), true

	case "Deployment.id":
		if e.complexity.Deployment.ID == nil {
			break
		}

		return e.complexity.Deployment.ID(childComplexity), true

	case "Deployment.name":
		if e.complexity.Deployment.Name == nil {
			break
		}

		return e.complexity.Deployment.Name(childComplexity), true

	case "Deployment.platforms":
		if e.complexity.Deployment.Platforms == nil {
			break
		}

		return e.complexity.Deployment.Platforms(childComplexity), true

	case "Deployment.plugins":
		if e.complexity.Deployment.Plugins == nil {
			break
		}

		return e.complexity.Deployment.Plugins(childComplexity), true

	case "Deployment.resourceVersion":
		if e.complexity.Deployment.ResourceVersion == nil {
			break
		}

		return e.complexity.Deployment.ResourceVersion(childComplexity), true

	case "Deployment.status":
		if e.complexity.Deployment.Status == nil {
			break
		}

		return e.complexity.Deployment.Status(childComplexity), true

	case "Deployment.yamlConfig":
		if e.complexity.Deployment.YamlConfig == nil {
			break
		}

		return e.complexity.Deployment.YamlConfig(childComplexity), true

	case "DeploymentConfig.resourceVersion":
		if e.complexity.DeploymentConfig.ResourceVersion == nil {
			break
		}

		return e.complexity.DeploymentConfig.ResourceVersion(childComplexity), true

	case "DeploymentConfig.value":
		if e.complexity.DeploymentConfig.Value == nil {
			break
		}

		return e.complexity.DeploymentConfig.Value(childComplexity), true

	case "DeploymentInfo.id":
		if e.complexity.DeploymentInfo.ID == nil {
			break
		}

		return e.complexity.DeploymentInfo.ID(childComplexity), true

	case "DeploymentInfo.name":
		if e.complexity.DeploymentInfo.Name == nil {
			break
		}

		return e.complexity.DeploymentInfo.Name(childComplexity), true

	case "DeploymentPage.data":
		if e.complexity.DeploymentPage.Data == nil {
			break
		}

		return e.complexity.DeploymentPage.Data(childComplexity), true

	case "DeploymentPage.pageInfo":
		if e.complexity.DeploymentPage.PageInfo == nil {
			break
		}

		return e.complexity.DeploymentPage.PageInfo(childComplexity), true

	case "DeploymentPage.totalCount":
		if e.complexity.DeploymentPage.TotalCount == nil {
			break
		}

		return e.complexity.DeploymentPage.TotalCount(childComplexity), true

	case "DeploymentStatus.botkubeVersion":
		if e.complexity.DeploymentStatus.BotkubeVersion == nil {
			break
		}

		return e.complexity.DeploymentStatus.BotkubeVersion(childComplexity), true

	case "DeploymentStatus.lastTransitionTime":
		if e.complexity.DeploymentStatus.LastTransitionTime == nil {
			break
		}

		return e.complexity.DeploymentStatus.LastTransitionTime(childComplexity), true

	case "DeploymentStatus.message":
		if e.complexity.DeploymentStatus.Message == nil {
			break
		}

		return e.complexity.DeploymentStatus.Message(childComplexity), true

	case "DeploymentStatus.phase":
		if e.complexity.DeploymentStatus.Phase == nil {
			break
		}

		return e.complexity.DeploymentStatus.Phase(childComplexity), true

	case "DeploymentStatus.upgrade":
		if e.complexity.DeploymentStatus.Upgrade == nil {
			break
		}

		return e.complexity.DeploymentStatus.Upgrade(childComplexity), true

	case "DeploymentUpgradeStatus.needsUpgrade":
		if e.complexity.DeploymentUpgradeStatus.NeedsUpgrade == nil {
			break
		}

		return e.complexity.DeploymentUpgradeStatus.NeedsUpgrade(childComplexity), true

	case "DeploymentUpgradeStatus.targetBotkubeVersion":
		if e.complexity.DeploymentUpgradeStatus.TargetBotkubeVersion == nil {
			break
		}

		return e.complexity.DeploymentUpgradeStatus.TargetBotkubeVersion(childComplexity), true

	case "Discord.botId":
		if e.complexity.Discord.BotID == nil {
			break
		}

		return e.complexity.Discord.BotID(childComplexity), true

	case "Discord.channels":
		if e.complexity.Discord.Channels == nil {
			break
		}

		return e.complexity.Discord.Channels(childComplexity), true

	case "Discord.id":
		if e.complexity.Discord.ID == nil {
			break
		}

		return e.complexity.Discord.ID(childComplexity), true

	case "Discord.name":
		if e.complexity.Discord.Name == nil {
			break
		}

		return e.complexity.Discord.Name(childComplexity), true

	case "Discord.token":
		if e.complexity.Discord.Token == nil {
			break
		}

		return e.complexity.Discord.Token(childComplexity), true

	case "Elasticsearch.awsSigningRegion":
		if e.complexity.Elasticsearch.AwsSigningRegion == nil {
			break
		}

		return e.complexity.Elasticsearch.AwsSigningRegion(childComplexity), true

	case "Elasticsearch.awsSigningRoleArn":
		if e.complexity.Elasticsearch.AwsSigningRoleArn == nil {
			break
		}

		return e.complexity.Elasticsearch.AwsSigningRoleArn(childComplexity), true

	case "Elasticsearch.id":
		if e.complexity.Elasticsearch.ID == nil {
			break
		}

		return e.complexity.Elasticsearch.ID(childComplexity), true

	case "Elasticsearch.indices":
		if e.complexity.Elasticsearch.Indices == nil {
			break
		}

		return e.complexity.Elasticsearch.Indices(childComplexity), true

	case "Elasticsearch.name":
		if e.complexity.Elasticsearch.Name == nil {
			break
		}

		return e.complexity.Elasticsearch.Name(childComplexity), true

	case "Elasticsearch.password":
		if e.complexity.Elasticsearch.Password == nil {
			break
		}

		return e.complexity.Elasticsearch.Password(childComplexity), true

	case "Elasticsearch.server":
		if e.complexity.Elasticsearch.Server == nil {
			break
		}

		return e.complexity.Elasticsearch.Server(childComplexity), true

	case "Elasticsearch.skipTlsVerify":
		if e.complexity.Elasticsearch.SkipTLSVerify == nil {
			break
		}

		return e.complexity.Elasticsearch.SkipTLSVerify(childComplexity), true

	case "Elasticsearch.username":
		if e.complexity.Elasticsearch.Username == nil {
			break
		}

		return e.complexity.Elasticsearch.Username(childComplexity), true

	case "ElasticsearchIndex.bindings":
		if e.complexity.ElasticsearchIndex.Bindings == nil {
			break
		}

		return e.complexity.ElasticsearchIndex.Bindings(childComplexity), true

	case "ElasticsearchIndex.id":
		if e.complexity.ElasticsearchIndex.ID == nil {
			break
		}

		return e.complexity.ElasticsearchIndex.ID(childComplexity), true

	case "ElasticsearchIndex.name":
		if e.complexity.ElasticsearchIndex.Name == nil {
			break
		}

		return e.complexity.ElasticsearchIndex.Name(childComplexity), true

	case "ElasticsearchIndex.replicas":
		if e.complexity.ElasticsearchIndex.Replicas == nil {
			break
		}

		return e.complexity.ElasticsearchIndex.Replicas(childComplexity), true

	case "ElasticsearchIndex.shards":
		if e.complexity.ElasticsearchIndex.Shards == nil {
			break
		}

		return e.complexity.ElasticsearchIndex.Shards(childComplexity), true

	case "ElasticsearchIndex.type":
		if e.complexity.ElasticsearchIndex.Type == nil {
			break
		}

		return e.complexity.ElasticsearchIndex.Type(childComplexity), true

	case "Heartbeat.nodeCount":
		if e.complexity.Heartbeat.NodeCount == nil {
			break
		}

		return e.complexity.Heartbeat.NodeCount(childComplexity), true

	case "Invoice.currency":
		if e.complexity.Invoice.Currency == nil {
			break
		}

		return e.complexity.Invoice.Currency(childComplexity), true

	case "Invoice.endOfBillingCycleDate":
		if e.complexity.Invoice.EndOfBillingCycleDate == nil {
			break
		}

		return e.complexity.Invoice.EndOfBillingCycleDate(childComplexity), true

	case "Invoice.endOfTrialDate":
		if e.complexity.Invoice.EndOfTrialDate == nil {
			break
		}

		return e.complexity.Invoice.EndOfTrialDate(childComplexity), true

	case "Invoice.isOnTrial":
		if e.complexity.Invoice.IsOnTrial == nil {
			break
		}

		return e.complexity.Invoice.IsOnTrial(childComplexity), true

	case "Invoice.items":
		if e.complexity.Invoice.Items == nil {
			break
		}

		return e.complexity.Invoice.Items(childComplexity), true

	case "Invoice.upcomingAmount":
		if e.complexity.Invoice.UpcomingAmount == nil {
			break
		}

		return e.complexity.Invoice.UpcomingAmount(childComplexity), true

	case "InvoiceItem.amount":
		if e.complexity.InvoiceItem.Amount == nil {
			break
		}

		return e.complexity.InvoiceItem.Amount(childComplexity), true

	case "InvoiceItem.currency":
		if e.complexity.InvoiceItem.Currency == nil {
			break
		}

		return e.complexity.InvoiceItem.Currency(childComplexity), true

	case "InvoiceItem.description":
		if e.complexity.InvoiceItem.Description == nil {
			break
		}

		return e.complexity.InvoiceItem.Description(childComplexity), true

	case "InvoiceItem.priceUnitAmount":
		if e.complexity.InvoiceItem.PriceUnitAmount == nil {
			break
		}

		return e.complexity.InvoiceItem.PriceUnitAmount(childComplexity), true

	case "Mattermost.botName":
		if e.complexity.Mattermost.BotName == nil {
			break
		}

		return e.complexity.Mattermost.BotName(childComplexity), true

	case "Mattermost.channels":
		if e.complexity.Mattermost.Channels == nil {
			break
		}

		return e.complexity.Mattermost.Channels(childComplexity), true

	case "Mattermost.id":
		if e.complexity.Mattermost.ID == nil {
			break
		}

		return e.complexity.Mattermost.ID(childComplexity), true

	case "Mattermost.name":
		if e.complexity.Mattermost.Name == nil {
			break
		}

		return e.complexity.Mattermost.Name(childComplexity), true

	case "Mattermost.team":
		if e.complexity.Mattermost.Team == nil {
			break
		}

		return e.complexity.Mattermost.Team(childComplexity), true

	case "Mattermost.token":
		if e.complexity.Mattermost.Token == nil {
			break
		}

		return e.complexity.Mattermost.Token(childComplexity), true

	case "Mattermost.url":
		if e.complexity.Mattermost.URL == nil {
			break
		}

		return e.complexity.Mattermost.URL(childComplexity), true

	case "MsTeams.appId":
		if e.complexity.MsTeams.AppID == nil {
			break
		}

		return e.complexity.MsTeams.AppID(childComplexity), true

	case "MsTeams.appPassword":
		if e.complexity.MsTeams.AppPassword == nil {
			break
		}

		return e.complexity.MsTeams.AppPassword(childComplexity), true

	case "MsTeams.bindings":
		if e.complexity.MsTeams.Bindings == nil {
			break
		}

		return e.complexity.MsTeams.Bindings(childComplexity), true

	case "MsTeams.botName":
		if e.complexity.MsTeams.BotName == nil {
			break
		}

		return e.complexity.MsTeams.BotName(childComplexity), true

	case "MsTeams.id":
		if e.complexity.MsTeams.ID == nil {
			break
		}

		return e.complexity.MsTeams.ID(childComplexity), true

	case "MsTeams.messagePath":
		if e.complexity.MsTeams.MessagePath == nil {
			break
		}

		return e.complexity.MsTeams.MessagePath(childComplexity), true

	case "MsTeams.name":
		if e.complexity.MsTeams.Name == nil {
			break
		}

		return e.complexity.MsTeams.Name(childComplexity), true

	case "MsTeams.notificationsDisabled":
		if e.complexity.MsTeams.NotificationsDisabled == nil {
			break
		}

		return e.complexity.MsTeams.NotificationsDisabled(childComplexity), true

	case "MsTeams.port":
		if e.complexity.MsTeams.Port == nil {
			break
		}

		return e.complexity.MsTeams.Port(childComplexity), true

	case "Mutation.addMemberForOrganization":
		if e.complexity.Mutation.AddMemberForOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_addMemberForOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddMemberForOrganization(childComplexity, args["input"].(AddMemberForOrganizationInput)), true

	case "Mutation.createAlias":
		if e.complexity.Mutation.CreateAlias == nil {
			break
		}

		args, err := ec.field_Mutation_createAlias_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAlias(childComplexity, args["input"].(AliasCreateInput)), true

	case "Mutation.createAuditEvent":
		if e.complexity.Mutation.CreateAuditEvent == nil {
			break
		}

		args, err := ec.field_Mutation_createAuditEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAuditEvent(childComplexity, args["input"].(AuditEventCreateInput)), true

	case "Mutation.createDeployment":
		if e.complexity.Mutation.CreateDeployment == nil {
			break
		}

		args, err := ec.field_Mutation_createDeployment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDeployment(childComplexity, args["input"].(DeploymentCreateInput)), true

	case "Mutation.createOrganization":
		if e.complexity.Mutation.CreateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganization(childComplexity, args["input"].(OrganizationCreateInput)), true

	case "Mutation.deleteAlias":
		if e.complexity.Mutation.DeleteAlias == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAlias_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAlias(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDeployment":
		if e.complexity.Mutation.DeleteDeployment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDeployment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDeployment(childComplexity, args["id"].(string)), true

	case "Mutation.generateBillingPortalURL":
		if e.complexity.Mutation.GenerateBillingPortalURL == nil {
			break
		}

		return e.complexity.Mutation.GenerateBillingPortalURL(childComplexity), true

	case "Mutation.generateCheckoutURL":
		if e.complexity.Mutation.GenerateCheckoutURL == nil {
			break
		}

		args, err := ec.field_Mutation_generateCheckoutURL_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.GenerateCheckoutURL(childComplexity, args["planName"].(string)), true

	case "Mutation.patchDeploymentConfig":
		if e.complexity.Mutation.PatchDeploymentConfig == nil {
			break
		}

		args, err := ec.field_Mutation_patchDeploymentConfig_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PatchDeploymentConfig(childComplexity, args["id"].(string), args["input"].(PatchDeploymentConfigInput)), true

	case "Mutation.regenerateDeploymentApiKey":
		if e.complexity.Mutation.RegenerateDeploymentAPIKey == nil {
			break
		}

		args, err := ec.field_Mutation_regenerateDeploymentApiKey_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RegenerateDeploymentAPIKey(childComplexity, args["id"].(string)), true

	case "Mutation.removeMemberFromOrganization":
		if e.complexity.Mutation.RemoveMemberFromOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_removeMemberFromOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveMemberFromOrganization(childComplexity, args["input"].(RemoveMemberFromOrganizationInput)), true

	case "Mutation.reportDeploymentFailure":
		if e.complexity.Mutation.ReportDeploymentFailure == nil {
			break
		}

		args, err := ec.field_Mutation_reportDeploymentFailure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReportDeploymentFailure(childComplexity, args["id"].(string), args["in"].(DeploymentFailureInput)), true

	case "Mutation.reportDeploymentHeartbeat":
		if e.complexity.Mutation.ReportDeploymentHeartbeat == nil {
			break
		}

		args, err := ec.field_Mutation_reportDeploymentHeartbeat_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReportDeploymentHeartbeat(childComplexity, args["id"].(string), args["in"].(DeploymentHeartbeatInput)), true

	case "Mutation.reportDeploymentShutdown":
		if e.complexity.Mutation.ReportDeploymentShutdown == nil {
			break
		}

		args, err := ec.field_Mutation_reportDeploymentShutdown_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReportDeploymentShutdown(childComplexity, args["id"].(string), args["resourceVersion"].(int)), true

	case "Mutation.reportDeploymentStartup":
		if e.complexity.Mutation.ReportDeploymentStartup == nil {
			break
		}

		args, err := ec.field_Mutation_reportDeploymentStartup_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReportDeploymentStartup(childComplexity, args["id"].(string), args["resourceVersion"].(int), args["botkubeVersion"].(*string)), true

	case "Mutation.resendEmailVerification":
		if e.complexity.Mutation.ResendEmailVerification == nil {
			break
		}

		return e.complexity.Mutation.ResendEmailVerification(childComplexity), true

	case "Mutation.updateAlias":
		if e.complexity.Mutation.UpdateAlias == nil {
			break
		}

		args, err := ec.field_Mutation_updateAlias_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAlias(childComplexity, args["id"].(string), args["input"].(AliasUpdateInput)), true

	case "Mutation.updateDeployment":
		if e.complexity.Mutation.UpdateDeployment == nil {
			break
		}

		args, err := ec.field_Mutation_updateDeployment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDeployment(childComplexity, args["id"].(string), args["input"].(DeploymentUpdateInput)), true

	case "Mutation.updateOrganization":
		if e.complexity.Mutation.UpdateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganization(childComplexity, args["id"].(string), args["input"].(OrganizationUpdateInput)), true

	case "Organization.billingHistoryAvailable":
		if e.complexity.Organization.BillingHistoryAvailable == nil {
			break
		}

		return e.complexity.Organization.BillingHistoryAvailable(childComplexity), true

	case "Organization.displayName":
		if e.complexity.Organization.DisplayName == nil {
			break
		}

		return e.complexity.Organization.DisplayName(childComplexity), true

	case "Organization.id":
		if e.complexity.Organization.ID == nil {
			break
		}

		return e.complexity.Organization.ID(childComplexity), true

	case "Organization.members":
		if e.complexity.Organization.Members == nil {
			break
		}

		return e.complexity.Organization.Members(childComplexity), true

	case "Organization.owner":
		if e.complexity.Organization.Owner == nil {
			break
		}

		return e.complexity.Organization.Owner(childComplexity), true

	case "Organization.ownerId":
		if e.complexity.Organization.OwnerID == nil {
			break
		}

		return e.complexity.Organization.OwnerID(childComplexity), true

	case "Organization.quota":
		if e.complexity.Organization.Quota == nil {
			break
		}

		return e.complexity.Organization.Quota(childComplexity), true

	case "Organization.subscription":
		if e.complexity.Organization.Subscription == nil {
			break
		}

		return e.complexity.Organization.Subscription(childComplexity), true

	case "Organization.updateOperations":
		if e.complexity.Organization.UpdateOperations == nil {
			break
		}

		return e.complexity.Organization.UpdateOperations(childComplexity), true

	case "Organization.usage":
		if e.complexity.Organization.Usage == nil {
			break
		}

		return e.complexity.Organization.Usage(childComplexity), true

	case "OrganizationSubscription.customerId":
		if e.complexity.OrganizationSubscription.CustomerID == nil {
			break
		}

		return e.complexity.OrganizationSubscription.CustomerID(childComplexity), true

	case "OrganizationSubscription.invoice":
		if e.complexity.OrganizationSubscription.Invoice == nil {
			break
		}

		return e.complexity.OrganizationSubscription.Invoice(childComplexity), true

	case "OrganizationSubscription.isDefaultPlan":
		if e.complexity.OrganizationSubscription.IsDefaultPlan == nil {
			break
		}

		return e.complexity.OrganizationSubscription.IsDefaultPlan(childComplexity), true

	case "OrganizationSubscription.planDisplayName":
		if e.complexity.OrganizationSubscription.PlanDisplayName == nil {
			break
		}

		return e.complexity.OrganizationSubscription.PlanDisplayName(childComplexity), true

	case "OrganizationSubscription.planName":
		if e.complexity.OrganizationSubscription.PlanName == nil {
			break
		}

		return e.complexity.OrganizationSubscription.PlanName(childComplexity), true

	case "OrganizationSubscription.subscriptionId":
		if e.complexity.OrganizationSubscription.SubscriptionID == nil {
			break
		}

		return e.complexity.OrganizationSubscription.SubscriptionID(childComplexity), true

	case "OrganizationSubscription.trialConsumed":
		if e.complexity.OrganizationSubscription.TrialConsumed == nil {
			break
		}

		return e.complexity.OrganizationSubscription.TrialConsumed(childComplexity), true

	case "OrganizationUpdateOperations.blocked":
		if e.complexity.OrganizationUpdateOperations.Blocked == nil {
			break
		}

		return e.complexity.OrganizationUpdateOperations.Blocked(childComplexity), true

	case "OrganizationUpdateOperations.reasons":
		if e.complexity.OrganizationUpdateOperations.Reasons == nil {
			break
		}

		return e.complexity.OrganizationUpdateOperations.Reasons(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.limit":
		if e.complexity.PageInfo.Limit == nil {
			break
		}

		return e.complexity.PageInfo.Limit(childComplexity), true

	case "PageInfo.offset":
		if e.complexity.PageInfo.Offset == nil {
			break
		}

		return e.complexity.PageInfo.Offset(childComplexity), true

	case "Platforms.discords":
		if e.complexity.Platforms.Discords == nil {
			break
		}

		return e.complexity.Platforms.Discords(childComplexity), true

	case "Platforms.elasticsearches":
		if e.complexity.Platforms.Elasticsearches == nil {
			break
		}

		return e.complexity.Platforms.Elasticsearches(childComplexity), true

	case "Platforms.mattermosts":
		if e.complexity.Platforms.Mattermosts == nil {
			break
		}

		return e.complexity.Platforms.Mattermosts(childComplexity), true

	case "Platforms.msTeams":
		if e.complexity.Platforms.MsTeams == nil {
			break
		}

		return e.complexity.Platforms.MsTeams(childComplexity), true

	case "Platforms.socketSlacks":
		if e.complexity.Platforms.SocketSlacks == nil {
			break
		}

		return e.complexity.Platforms.SocketSlacks(childComplexity), true

	case "Platforms.webhooks":
		if e.complexity.Platforms.Webhooks == nil {
			break
		}

		return e.complexity.Platforms.Webhooks(childComplexity), true

	case "Plugin.configuration":
		if e.complexity.Plugin.Configuration == nil {
			break
		}

		return e.complexity.Plugin.Configuration(childComplexity), true

	case "Plugin.configurationName":
		if e.complexity.Plugin.ConfigurationName == nil {
			break
		}

		return e.complexity.Plugin.ConfigurationName(childComplexity), true

	case "Plugin.displayName":
		if e.complexity.Plugin.DisplayName == nil {
			break
		}

		return e.complexity.Plugin.DisplayName(childComplexity), true

	case "Plugin.id":
		if e.complexity.Plugin.ID == nil {
			break
		}

		return e.complexity.Plugin.ID(childComplexity), true

	case "Plugin.name":
		if e.complexity.Plugin.Name == nil {
			break
		}

		return e.complexity.Plugin.Name(childComplexity), true

	case "Plugin.type":
		if e.complexity.Plugin.Type == nil {
			break
		}

		return e.complexity.Plugin.Type(childComplexity), true

	case "PluginPage.data":
		if e.complexity.PluginPage.Data == nil {
			break
		}

		return e.complexity.PluginPage.Data(childComplexity), true

	case "PluginPage.pageInfo":
		if e.complexity.PluginPage.PageInfo == nil {
			break
		}

		return e.complexity.PluginPage.PageInfo(childComplexity), true

	case "PluginPage.totalCount":
		if e.complexity.PluginPage.TotalCount == nil {
			break
		}

		return e.complexity.PluginPage.TotalCount(childComplexity), true

	case "PluginTemplate.description":
		if e.complexity.PluginTemplate.Description == nil {
			break
		}

		return e.complexity.PluginTemplate.Description(childComplexity), true

	case "PluginTemplate.name":
		if e.complexity.PluginTemplate.Name == nil {
			break
		}

		return e.complexity.PluginTemplate.Name(childComplexity), true

	case "PluginTemplate.schema":
		if e.complexity.PluginTemplate.Schema == nil {
			break
		}

		return e.complexity.PluginTemplate.Schema(childComplexity), true

	case "PluginTemplate.title":
		if e.complexity.PluginTemplate.Title == nil {
			break
		}

		return e.complexity.PluginTemplate.Title(childComplexity), true

	case "PluginTemplate.type":
		if e.complexity.PluginTemplate.Type == nil {
			break
		}

		return e.complexity.PluginTemplate.Type(childComplexity), true

	case "PluginTemplatePage.data":
		if e.complexity.PluginTemplatePage.Data == nil {
			break
		}

		return e.complexity.PluginTemplatePage.Data(childComplexity), true

	case "Query.aliases":
		if e.complexity.Query.Aliases == nil {
			break
		}

		args, err := ec.field_Query_aliases_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Aliases(childComplexity, args["offset"].(*int), args["limit"].(*int)), true

	case "Query.auditEvents":
		if e.complexity.Query.AuditEvents == nil {
			break
		}

		args, err := ec.field_Query_auditEvents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuditEvents(childComplexity, args["filter"].(*AuditEventFilter), args["offset"].(*int), args["limit"].(*int)), true

	case "Query.deployment":
		if e.complexity.Query.Deployment == nil {
			break
		}

		args, err := ec.field_Query_deployment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Deployment(childComplexity, args["id"].(string)), true

	case "Query.deployments":
		if e.complexity.Query.Deployments == nil {
			break
		}

		args, err := ec.field_Query_deployments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Deployments(childComplexity, args["offset"].(*int), args["limit"].(*int)), true

	case "Query.organization":
		if e.complexity.Query.Organization == nil {
			break
		}

		args, err := ec.field_Query_organization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organization(childComplexity, args["id"].(string)), true

	case "Query.organizations":
		if e.complexity.Query.Organizations == nil {
			break
		}

		return e.complexity.Query.Organizations(childComplexity), true

	case "Query.pluginTemplate":
		if e.complexity.Query.PluginTemplate == nil {
			break
		}

		args, err := ec.field_Query_pluginTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PluginTemplate(childComplexity, args["name"].(string)), true

	case "Query.pluginTemplates":
		if e.complexity.Query.PluginTemplates == nil {
			break
		}

		return e.complexity.Query.PluginTemplates(childComplexity), true

	case "Query.subscriptionPlans":
		if e.complexity.Query.SubscriptionPlans == nil {
			break
		}

		return e.complexity.Query.SubscriptionPlans(childComplexity), true

	case "Quota.auditRetentionPeriod":
		if e.complexity.Quota.AuditRetentionPeriod == nil {
			break
		}

		return e.complexity.Quota.AuditRetentionPeriod(childComplexity), true

	case "Quota.deploymentCount":
		if e.complexity.Quota.DeploymentCount == nil {
			break
		}

		return e.complexity.Quota.DeploymentCount(childComplexity), true

	case "Quota.memberCount":
		if e.complexity.Quota.MemberCount == nil {
			break
		}

		return e.complexity.Quota.MemberCount(childComplexity), true

	case "Quota.nodeCount":
		if e.complexity.Quota.NodeCount == nil {
			break
		}

		return e.complexity.Quota.NodeCount(childComplexity), true

	case "SinkBindings.sources":
		if e.complexity.SinkBindings.Sources == nil {
			break
		}

		return e.complexity.SinkBindings.Sources(childComplexity), true

	case "SocketSlack.appToken":
		if e.complexity.SocketSlack.AppToken == nil {
			break
		}

		return e.complexity.SocketSlack.AppToken(childComplexity), true

	case "SocketSlack.botToken":
		if e.complexity.SocketSlack.BotToken == nil {
			break
		}

		return e.complexity.SocketSlack.BotToken(childComplexity), true

	case "SocketSlack.channels":
		if e.complexity.SocketSlack.Channels == nil {
			break
		}

		return e.complexity.SocketSlack.Channels(childComplexity), true

	case "SocketSlack.id":
		if e.complexity.SocketSlack.ID == nil {
			break
		}

		return e.complexity.SocketSlack.ID(childComplexity), true

	case "SocketSlack.name":
		if e.complexity.SocketSlack.Name == nil {
			break
		}

		return e.complexity.SocketSlack.Name(childComplexity), true

	case "SourceEventDetails.displayName":
		if e.complexity.SourceEventDetails.DisplayName == nil {
			break
		}

		return e.complexity.SourceEventDetails.DisplayName(childComplexity), true

	case "SourceEventDetails.name":
		if e.complexity.SourceEventDetails.Name == nil {
			break
		}

		return e.complexity.SourceEventDetails.Name(childComplexity), true

	case "SourceEventEmittedEvent.createdAt":
		if e.complexity.SourceEventEmittedEvent.CreatedAt == nil {
			break
		}

		return e.complexity.SourceEventEmittedEvent.CreatedAt(childComplexity), true

	case "SourceEventEmittedEvent.deployment":
		if e.complexity.SourceEventEmittedEvent.Deployment == nil {
			break
		}

		return e.complexity.SourceEventEmittedEvent.Deployment(childComplexity), true

	case "SourceEventEmittedEvent.deploymentId":
		if e.complexity.SourceEventEmittedEvent.DeploymentID == nil {
			break
		}

		return e.complexity.SourceEventEmittedEvent.DeploymentID(childComplexity), true

	case "SourceEventEmittedEvent.event":
		if e.complexity.SourceEventEmittedEvent.Event == nil {
			break
		}

		return e.complexity.SourceEventEmittedEvent.Event(childComplexity), true

	case "SourceEventEmittedEvent.id":
		if e.complexity.SourceEventEmittedEvent.ID == nil {
			break
		}

		return e.complexity.SourceEventEmittedEvent.ID(childComplexity), true

	case "SourceEventEmittedEvent.pluginName":
		if e.complexity.SourceEventEmittedEvent.PluginName == nil {
			break
		}

		return e.complexity.SourceEventEmittedEvent.PluginName(childComplexity), true

	case "SourceEventEmittedEvent.source":
		if e.complexity.SourceEventEmittedEvent.Source == nil {
			break
		}

		return e.complexity.SourceEventEmittedEvent.Source(childComplexity), true

	case "SourceEventEmittedEvent.type":
		if e.complexity.SourceEventEmittedEvent.Type == nil {
			break
		}

		return e.complexity.SourceEventEmittedEvent.Type(childComplexity), true

	case "SubscriptionPlan.displayName":
		if e.complexity.SubscriptionPlan.DisplayName == nil {
			break
		}

		return e.complexity.SubscriptionPlan.DisplayName(childComplexity), true

	case "SubscriptionPlan.displayUnitPrice":
		if e.complexity.SubscriptionPlan.DisplayUnitPrice == nil {
			break
		}

		return e.complexity.SubscriptionPlan.DisplayUnitPrice(childComplexity), true

	case "SubscriptionPlan.isDefault":
		if e.complexity.SubscriptionPlan.IsDefault == nil {
			break
		}

		return e.complexity.SubscriptionPlan.IsDefault(childComplexity), true

	case "SubscriptionPlan.name":
		if e.complexity.SubscriptionPlan.Name == nil {
			break
		}

		return e.complexity.SubscriptionPlan.Name(childComplexity), true

	case "SubscriptionPlan.trialPeriodDays":
		if e.complexity.SubscriptionPlan.TrialPeriodDays == nil {
			break
		}

		return e.complexity.SubscriptionPlan.TrialPeriodDays(childComplexity), true

	case "Usage.deploymentCount":
		if e.complexity.Usage.DeploymentCount == nil {
			break
		}

		return e.complexity.Usage.DeploymentCount(childComplexity), true

	case "Usage.memberCount":
		if e.complexity.Usage.MemberCount == nil {
			break
		}

		return e.complexity.Usage.MemberCount(childComplexity), true

	case "Usage.nodeCount":
		if e.complexity.Usage.NodeCount == nil {
			break
		}

		return e.complexity.Usage.NodeCount(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "Webhook.bindings":
		if e.complexity.Webhook.Bindings == nil {
			break
		}

		return e.complexity.Webhook.Bindings(childComplexity), true

	case "Webhook.id":
		if e.complexity.Webhook.ID == nil {
			break
		}

		return e.complexity.Webhook.ID(childComplexity), true

	case "Webhook.name":
		if e.complexity.Webhook.Name == nil {
			break
		}

		return e.complexity.Webhook.Name(childComplexity), true

	case "Webhook.url":
		if e.complexity.Webhook.URL == nil {
			break
		}

		return e.complexity.Webhook.URL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputActionCreateUpdateInput,
		ec.unmarshalInputActionCreateUpdateInputBindings,
		ec.unmarshalInputActionPatchDeploymentConfigInput,
		ec.unmarshalInputAddMemberForOrganizationInput,
		ec.unmarshalInputAliasCreateInput,
		ec.unmarshalInputAliasUpdateInput,
		ec.unmarshalInputAuditEventCommandCreateInput,
		ec.unmarshalInputAuditEventCreateInput,
		ec.unmarshalInputAuditEventFilter,
		ec.unmarshalInputAuditEventSourceCreateInput,
		ec.unmarshalInputAuditEventSourceDetailsInput,
		ec.unmarshalInputBotBindingsCreateInput,
		ec.unmarshalInputBotBindingsUpdateInput,
		ec.unmarshalInputChannelBindingsByIDCreateInput,
		ec.unmarshalInputChannelBindingsByIDUpdateInput,
		ec.unmarshalInputChannelBindingsByNameCreateInput,
		ec.unmarshalInputChannelBindingsByNameUpdateInput,
		ec.unmarshalInputDeploymentCreateInput,
		ec.unmarshalInputDeploymentFailureInput,
		ec.unmarshalInputDeploymentHeartbeatInput,
		ec.unmarshalInputDeploymentStatusInput,
		ec.unmarshalInputDeploymentUpdateInput,
		ec.unmarshalInputDiscordCreateInput,
		ec.unmarshalInputDiscordUpdateInput,
		ec.unmarshalInputElasticsearchCreateInput,
		ec.unmarshalInputElasticsearchIndexCreateInput,
		ec.unmarshalInputElasticsearchIndexUpdateInput,
		ec.unmarshalInputElasticsearchUpdateInput,
		ec.unmarshalInputMattermostCreateInput,
		ec.unmarshalInputMattermostUpdateInput,
		ec.unmarshalInputMsTeamsCreateInput,
		ec.unmarshalInputMsTeamsUpdateInput,
		ec.unmarshalInputNotificationPatchDeploymentConfigInput,
		ec.unmarshalInputOrganizationCreateInput,
		ec.unmarshalInputOrganizationUpdateInput,
		ec.unmarshalInputPatchDeploymentConfigInput,
		ec.unmarshalInputPlatformsCreateInput,
		ec.unmarshalInputPlatformsUpdateInput,
		ec.unmarshalInputPluginConfigurationGroupInput,
		ec.unmarshalInputPluginConfigurationGroupUpdateInput,
		ec.unmarshalInputPluginConfigurationInput,
		ec.unmarshalInputPluginsCreateInput,
		ec.unmarshalInputPluginsUpdateInput,
		ec.unmarshalInputRemoveMemberFromOrganizationInput,
		ec.unmarshalInputSinkBindingsCreateInput,
		ec.unmarshalInputSinkBindingsUpdateInput,
		ec.unmarshalInputSocketSlackCreateInput,
		ec.unmarshalInputSocketSlackUpdateInput,
		ec.unmarshalInputSourceBindingPatchDeploymentConfigInput,
		ec.unmarshalInputWebhookCreateInput,
		ec.unmarshalInputWebhookUpdateInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

//go:embed "schema.graphql"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schema.graphql", Input: sourceData("schema.graphql"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) dir_hasScopes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["scopes"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scopes"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["scopes"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["disableEmailValidation"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disableEmailValidation"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["disableEmailValidation"] = arg1
	return args, nil
}

func (ec *executionContext) dir_restrictDeploymentAccessForSameID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["idInputFieldName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idInputFieldName"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["idInputFieldName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addMemberForOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AddMemberForOrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAddMemberForOrganizationInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAddMemberForOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAlias_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AliasCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAliasCreateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAuditEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 AuditEventCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAuditEventCreateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDeployment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 DeploymentCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeploymentCreateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 OrganizationCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOrganizationCreateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganizationCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAlias_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDeployment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_generateCheckoutURL_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["planName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("planName"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["planName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_patchDeploymentConfig_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 PatchDeploymentConfigInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNPatchDeploymentConfigInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPatchDeploymentConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_regenerateDeploymentApiKey_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeMemberFromOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 RemoveMemberFromOrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRemoveMemberFromOrganizationInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐRemoveMemberFromOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_reportDeploymentFailure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 DeploymentFailureInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNDeploymentFailureInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentFailureInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_reportDeploymentHeartbeat_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 DeploymentHeartbeatInput
	if tmp, ok := rawArgs["in"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
		arg1, err = ec.unmarshalNDeploymentHeartbeatInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentHeartbeatInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["in"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_reportDeploymentShutdown_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["resourceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourceVersion"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resourceVersion"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_reportDeploymentStartup_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["resourceVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourceVersion"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resourceVersion"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["botkubeVersion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botkubeVersion"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["botkubeVersion"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAlias_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 AliasUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNAliasUpdateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDeployment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 DeploymentUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNDeploymentUpdateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 OrganizationUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNOrganizationUpdateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganizationUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_aliases_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_auditEvents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *AuditEventFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOAuditEventFilter2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_deployment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_deployments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_organization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_pluginTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Action_id(ctx context.Context, field graphql.CollectedField, obj *Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_name(ctx context.Context, field graphql.CollectedField, obj *Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_displayName(ctx context.Context, field graphql.CollectedField, obj *Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_enabled(ctx context.Context, field graphql.CollectedField, obj *Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_command(ctx context.Context, field graphql.CollectedField, obj *Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_command(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Command, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_command(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Action_bindings(ctx context.Context, field graphql.CollectedField, obj *Action) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Action_bindings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bindings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*ActionBindings)
	fc.Result = res
	return ec.marshalNActionBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionBindings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Action_bindings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sources":
				return ec.fieldContext_ActionBindings_sources(ctx, field)
			case "executors":
				return ec.fieldContext_ActionBindings_executors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ActionBindings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionBindings_sources(ctx context.Context, field graphql.CollectedField, obj *ActionBindings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionBindings_sources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionBindings_sources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionBindings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ActionBindings_executors(ctx context.Context, field graphql.CollectedField, obj *ActionBindings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ActionBindings_executors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Executors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ActionBindings_executors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ActionBindings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alias_id(ctx context.Context, field graphql.CollectedField, obj *Alias) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Alias_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Alias_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alias",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alias_name(ctx context.Context, field graphql.CollectedField, obj *Alias) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Alias_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Alias_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alias",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alias_displayName(ctx context.Context, field graphql.CollectedField, obj *Alias) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Alias_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Alias_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alias",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alias_command(ctx context.Context, field graphql.CollectedField, obj *Alias) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Alias_command(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Command, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Alias_command(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alias",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Alias_deployments(ctx context.Context, field graphql.CollectedField, obj *Alias) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Alias_deployments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Alias().Deployments(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:list"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, obj, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*DeploymentInfo); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.DeploymentInfo`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*DeploymentInfo)
	fc.Result = res
	return ec.marshalNDeploymentInfo2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Alias_deployments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Alias",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeploymentInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_DeploymentInfo_name(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeploymentInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AliasPage_data(ctx context.Context, field graphql.CollectedField, obj *AliasPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AliasPage_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Alias)
	fc.Result = res
	return ec.marshalNAlias2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AliasPage_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AliasPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alias_id(ctx, field)
			case "name":
				return ec.fieldContext_Alias_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Alias_displayName(ctx, field)
			case "command":
				return ec.fieldContext_Alias_command(ctx, field)
			case "deployments":
				return ec.fieldContext_Alias_deployments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alias", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AliasPage_pageInfo(ctx context.Context, field graphql.CollectedField, obj *AliasPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AliasPage_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AliasPage_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AliasPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_PageInfo_limit(ctx, field)
			case "offset":
				return ec.fieldContext_PageInfo_offset(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AliasPage_totalCount(ctx context.Context, field graphql.CollectedField, obj *AliasPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AliasPage_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AliasPage_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AliasPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AliasPage_totalPages(ctx context.Context, field graphql.CollectedField, obj *AliasPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AliasPage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AliasPage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AliasPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiKey_name(ctx context.Context, field graphql.CollectedField, obj *APIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApiKey_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApiKey_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiKey_value(ctx context.Context, field graphql.CollectedField, obj *APIKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApiKey_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApiKey_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditEventPage_data(ctx context.Context, field graphql.CollectedField, obj *AuditEventPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditEventPage_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]AuditEvent)
	fc.Result = res
	return ec.marshalNAuditEvent2ᚕgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditEventPage_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditEventPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditEventPage_pageInfo(ctx context.Context, field graphql.CollectedField, obj *AuditEventPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditEventPage_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditEventPage_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditEventPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_PageInfo_limit(ctx, field)
			case "offset":
				return ec.fieldContext_PageInfo_offset(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditEventPage_totalCount(ctx context.Context, field graphql.CollectedField, obj *AuditEventPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditEventPage_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditEventPage_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditEventPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuditEventPage_totalPages(ctx context.Context, field graphql.CollectedField, obj *AuditEventPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuditEventPage_totalPages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalPages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuditEventPage_totalPages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuditEventPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BotBindings_sources(ctx context.Context, field graphql.CollectedField, obj *BotBindings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BotBindings_sources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BotBindings_sources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BotBindings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BotBindings_executors(ctx context.Context, field graphql.CollectedField, obj *BotBindings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BotBindings_executors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Executors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BotBindings_executors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BotBindings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBindingsByID_id(ctx context.Context, field graphql.CollectedField, obj *ChannelBindingsByID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBindingsByID_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBindingsByID_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBindingsByID",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBindingsByID_bindings(ctx context.Context, field graphql.CollectedField, obj *ChannelBindingsByID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBindingsByID_bindings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bindings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*BotBindings)
	fc.Result = res
	return ec.marshalNBotBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBindingsByID_bindings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBindingsByID",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sources":
				return ec.fieldContext_BotBindings_sources(ctx, field)
			case "executors":
				return ec.fieldContext_BotBindings_executors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BotBindings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBindingsByID_notificationsDisabled(ctx context.Context, field graphql.CollectedField, obj *ChannelBindingsByID) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBindingsByID_notificationsDisabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBindingsByID_notificationsDisabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBindingsByID",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBindingsByName_name(ctx context.Context, field graphql.CollectedField, obj *ChannelBindingsByName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBindingsByName_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBindingsByName_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBindingsByName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBindingsByName_bindings(ctx context.Context, field graphql.CollectedField, obj *ChannelBindingsByName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBindingsByName_bindings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bindings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*BotBindings)
	fc.Result = res
	return ec.marshalNBotBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBindingsByName_bindings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBindingsByName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sources":
				return ec.fieldContext_BotBindings_sources(ctx, field)
			case "executors":
				return ec.fieldContext_BotBindings_executors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BotBindings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChannelBindingsByName_notificationsDisabled(ctx context.Context, field graphql.CollectedField, obj *ChannelBindingsByName) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChannelBindingsByName_notificationsDisabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChannelBindingsByName_notificationsDisabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChannelBindingsByName",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandExecutedEvent_id(ctx context.Context, field graphql.CollectedField, obj *CommandExecutedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandExecutedEvent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandExecutedEvent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandExecutedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandExecutedEvent_type(ctx context.Context, field graphql.CollectedField, obj *CommandExecutedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandExecutedEvent_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*AuditEventType)
	fc.Result = res
	return ec.marshalOAuditEventType2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandExecutedEvent_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandExecutedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuditEventType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandExecutedEvent_platformUser(ctx context.Context, field graphql.CollectedField, obj *CommandExecutedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandExecutedEvent_platformUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlatformUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandExecutedEvent_platformUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandExecutedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandExecutedEvent_deploymentId(ctx context.Context, field graphql.CollectedField, obj *CommandExecutedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandExecutedEvent_deploymentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandExecutedEvent_deploymentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandExecutedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandExecutedEvent_deployment(ctx context.Context, field graphql.CollectedField, obj *CommandExecutedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandExecutedEvent_deployment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.CommandExecutedEvent().Deployment(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:get"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, obj, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Deployment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Deployment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Deployment)
	fc.Result = res
	return ec.marshalODeployment2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeployment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandExecutedEvent_deployment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandExecutedEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deployment_id(ctx, field)
			case "name":
				return ec.fieldContext_Deployment_name(ctx, field)
			case "actions":
				return ec.fieldContext_Deployment_actions(ctx, field)
			case "plugins":
				return ec.fieldContext_Deployment_plugins(ctx, field)
			case "platforms":
				return ec.fieldContext_Deployment_platforms(ctx, field)
			case "status":
				return ec.fieldContext_Deployment_status(ctx, field)
			case "apiKey":
				return ec.fieldContext_Deployment_apiKey(ctx, field)
			case "yamlConfig":
				return ec.fieldContext_Deployment_yamlConfig(ctx, field)
			case "aliases":
				return ec.fieldContext_Deployment_aliases(ctx, field)
			case "helmCommand":
				return ec.fieldContext_Deployment_helmCommand(ctx, field)
			case "resourceVersion":
				return ec.fieldContext_Deployment_resourceVersion(ctx, field)
			case "heartbeat":
				return ec.fieldContext_Deployment_heartbeat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deployment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandExecutedEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *CommandExecutedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandExecutedEvent_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNTimestamp2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandExecutedEvent_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandExecutedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandExecutedEvent_command(ctx context.Context, field graphql.CollectedField, obj *CommandExecutedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandExecutedEvent_command(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Command, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandExecutedEvent_command(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandExecutedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandExecutedEvent_botPlatform(ctx context.Context, field graphql.CollectedField, obj *CommandExecutedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandExecutedEvent_botPlatform(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BotPlatform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*BotPlatform)
	fc.Result = res
	return ec.marshalOBotPlatform2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotPlatform(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandExecutedEvent_botPlatform(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandExecutedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type BotPlatform does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandExecutedEvent_channel(ctx context.Context, field graphql.CollectedField, obj *CommandExecutedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandExecutedEvent_channel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandExecutedEvent_channel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandExecutedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CommandExecutedEvent_pluginName(ctx context.Context, field graphql.CollectedField, obj *CommandExecutedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CommandExecutedEvent_pluginName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PluginName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CommandExecutedEvent_pluginName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CommandExecutedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_id(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_name(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_actions(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_actions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deployment().Actions(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Action)
	fc.Result = res
	return ec.marshalNAction2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_actions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Action_id(ctx, field)
			case "name":
				return ec.fieldContext_Action_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Action_displayName(ctx, field)
			case "enabled":
				return ec.fieldContext_Action_enabled(ctx, field)
			case "command":
				return ec.fieldContext_Action_command(ctx, field)
			case "bindings":
				return ec.fieldContext_Action_bindings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Action", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_plugins(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_plugins(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deployment().Plugins(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Plugin)
	fc.Result = res
	return ec.marshalNPlugin2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_plugins(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plugin_id(ctx, field)
			case "name":
				return ec.fieldContext_Plugin_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Plugin_displayName(ctx, field)
			case "type":
				return ec.fieldContext_Plugin_type(ctx, field)
			case "configurationName":
				return ec.fieldContext_Plugin_configurationName(ctx, field)
			case "configuration":
				return ec.fieldContext_Plugin_configuration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plugin", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_platforms(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_platforms(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deployment().Platforms(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Platforms)
	fc.Result = res
	return ec.marshalNPlatforms2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPlatforms(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_platforms(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "socketSlacks":
				return ec.fieldContext_Platforms_socketSlacks(ctx, field)
			case "discords":
				return ec.fieldContext_Platforms_discords(ctx, field)
			case "mattermosts":
				return ec.fieldContext_Platforms_mattermosts(ctx, field)
			case "webhooks":
				return ec.fieldContext_Platforms_webhooks(ctx, field)
			case "msTeams":
				return ec.fieldContext_Platforms_msTeams(ctx, field)
			case "elasticsearches":
				return ec.fieldContext_Platforms_elasticsearches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Platforms", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_status(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeploymentStatus)
	fc.Result = res
	return ec.marshalNDeploymentStatus2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "phase":
				return ec.fieldContext_DeploymentStatus_phase(ctx, field)
			case "message":
				return ec.fieldContext_DeploymentStatus_message(ctx, field)
			case "botkubeVersion":
				return ec.fieldContext_DeploymentStatus_botkubeVersion(ctx, field)
			case "upgrade":
				return ec.fieldContext_DeploymentStatus_upgrade(ctx, field)
			case "lastTransitionTime":
				return ec.fieldContext_DeploymentStatus_lastTransitionTime(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeploymentStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_apiKey(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_apiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deployment().APIKey(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*APIKey)
	fc.Result = res
	return ec.marshalOApiKey2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAPIKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_apiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ApiKey_name(ctx, field)
			case "value":
				return ec.fieldContext_ApiKey_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiKey", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_yamlConfig(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_yamlConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deployment().YamlConfig(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_yamlConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_aliases(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_aliases(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deployment().Aliases(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Alias)
	fc.Result = res
	return ec.marshalOAlias2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_aliases(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alias_id(ctx, field)
			case "name":
				return ec.fieldContext_Alias_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Alias_displayName(ctx, field)
			case "command":
				return ec.fieldContext_Alias_command(ctx, field)
			case "deployments":
				return ec.fieldContext_Alias_deployments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alias", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_helmCommand(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_helmCommand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Deployment().HelmCommand(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_helmCommand(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_resourceVersion(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_resourceVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_resourceVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Deployment_heartbeat(ctx context.Context, field graphql.CollectedField, obj *Deployment) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Deployment_heartbeat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Heartbeat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Heartbeat)
	fc.Result = res
	return ec.marshalOHeartbeat2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐHeartbeat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Deployment_heartbeat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Deployment",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "nodeCount":
				return ec.fieldContext_Heartbeat_nodeCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Heartbeat", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentConfig_resourceVersion(ctx context.Context, field graphql.CollectedField, obj *DeploymentConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentConfig_resourceVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentConfig_resourceVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentConfig_value(ctx context.Context, field graphql.CollectedField, obj *DeploymentConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentConfig_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentConfig_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentInfo_id(ctx context.Context, field graphql.CollectedField, obj *DeploymentInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentInfo_name(ctx context.Context, field graphql.CollectedField, obj *DeploymentInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentInfo_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentPage_data(ctx context.Context, field graphql.CollectedField, obj *DeploymentPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentPage_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Deployment)
	fc.Result = res
	return ec.marshalNDeployment2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentPage_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deployment_id(ctx, field)
			case "name":
				return ec.fieldContext_Deployment_name(ctx, field)
			case "actions":
				return ec.fieldContext_Deployment_actions(ctx, field)
			case "plugins":
				return ec.fieldContext_Deployment_plugins(ctx, field)
			case "platforms":
				return ec.fieldContext_Deployment_platforms(ctx, field)
			case "status":
				return ec.fieldContext_Deployment_status(ctx, field)
			case "apiKey":
				return ec.fieldContext_Deployment_apiKey(ctx, field)
			case "yamlConfig":
				return ec.fieldContext_Deployment_yamlConfig(ctx, field)
			case "aliases":
				return ec.fieldContext_Deployment_aliases(ctx, field)
			case "helmCommand":
				return ec.fieldContext_Deployment_helmCommand(ctx, field)
			case "resourceVersion":
				return ec.fieldContext_Deployment_resourceVersion(ctx, field)
			case "heartbeat":
				return ec.fieldContext_Deployment_heartbeat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deployment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentPage_pageInfo(ctx context.Context, field graphql.CollectedField, obj *DeploymentPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentPage_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentPage_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_PageInfo_limit(ctx, field)
			case "offset":
				return ec.fieldContext_PageInfo_offset(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentPage_totalCount(ctx context.Context, field graphql.CollectedField, obj *DeploymentPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentPage_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentPage_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentStatus_phase(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentStatus_phase(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(DeploymentStatusPhase)
	fc.Result = res
	return ec.marshalNDeploymentStatusPhase2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentStatusPhase(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentStatus_phase(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeploymentStatusPhase does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentStatus_message(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentStatus_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentStatus_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentStatus_botkubeVersion(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentStatus_botkubeVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BotkubeVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentStatus_botkubeVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentStatus_upgrade(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentStatus_upgrade(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.DeploymentStatus().Upgrade(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*DeploymentUpgradeStatus)
	fc.Result = res
	return ec.marshalODeploymentUpgradeStatus2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentUpgradeStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentStatus_upgrade(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "needsUpgrade":
				return ec.fieldContext_DeploymentUpgradeStatus_needsUpgrade(ctx, field)
			case "targetBotkubeVersion":
				return ec.fieldContext_DeploymentUpgradeStatus_targetBotkubeVersion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeploymentUpgradeStatus", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentStatus_lastTransitionTime(ctx context.Context, field graphql.CollectedField, obj *DeploymentStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentStatus_lastTransitionTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastTransitionTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOTimestamp2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentStatus_lastTransitionTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentUpgradeStatus_needsUpgrade(ctx context.Context, field graphql.CollectedField, obj *DeploymentUpgradeStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentUpgradeStatus_needsUpgrade(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NeedsUpgrade, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentUpgradeStatus_needsUpgrade(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentUpgradeStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeploymentUpgradeStatus_targetBotkubeVersion(ctx context.Context, field graphql.CollectedField, obj *DeploymentUpgradeStatus) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeploymentUpgradeStatus_targetBotkubeVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TargetBotkubeVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeploymentUpgradeStatus_targetBotkubeVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeploymentUpgradeStatus",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Discord_id(ctx context.Context, field graphql.CollectedField, obj *Discord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Discord_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Discord_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Discord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Discord_name(ctx context.Context, field graphql.CollectedField, obj *Discord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Discord_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Discord_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Discord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Discord_token(ctx context.Context, field graphql.CollectedField, obj *Discord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Discord_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Discord_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Discord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Discord_botId(ctx context.Context, field graphql.CollectedField, obj *Discord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Discord_botId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BotID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Discord_botId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Discord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Discord_channels(ctx context.Context, field graphql.CollectedField, obj *Discord) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Discord_channels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ChannelBindingsByID)
	fc.Result = res
	return ec.marshalNChannelBindingsByID2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByIDᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Discord_channels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Discord",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChannelBindingsByID_id(ctx, field)
			case "bindings":
				return ec.fieldContext_ChannelBindingsByID_bindings(ctx, field)
			case "notificationsDisabled":
				return ec.fieldContext_ChannelBindingsByID_notificationsDisabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelBindingsByID", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Elasticsearch_id(ctx context.Context, field graphql.CollectedField, obj *Elasticsearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Elasticsearch_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Elasticsearch_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Elasticsearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Elasticsearch_name(ctx context.Context, field graphql.CollectedField, obj *Elasticsearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Elasticsearch_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Elasticsearch_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Elasticsearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Elasticsearch_username(ctx context.Context, field graphql.CollectedField, obj *Elasticsearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Elasticsearch_username(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Elasticsearch_username(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Elasticsearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Elasticsearch_password(ctx context.Context, field graphql.CollectedField, obj *Elasticsearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Elasticsearch_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Elasticsearch_password(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Elasticsearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Elasticsearch_server(ctx context.Context, field graphql.CollectedField, obj *Elasticsearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Elasticsearch_server(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Server, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Elasticsearch_server(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Elasticsearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Elasticsearch_skipTlsVerify(ctx context.Context, field graphql.CollectedField, obj *Elasticsearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Elasticsearch_skipTlsVerify(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SkipTLSVerify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Elasticsearch_skipTlsVerify(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Elasticsearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Elasticsearch_awsSigningRegion(ctx context.Context, field graphql.CollectedField, obj *Elasticsearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Elasticsearch_awsSigningRegion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AwsSigningRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Elasticsearch_awsSigningRegion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Elasticsearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Elasticsearch_awsSigningRoleArn(ctx context.Context, field graphql.CollectedField, obj *Elasticsearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Elasticsearch_awsSigningRoleArn(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AwsSigningRoleArn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Elasticsearch_awsSigningRoleArn(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Elasticsearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Elasticsearch_indices(ctx context.Context, field graphql.CollectedField, obj *Elasticsearch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Elasticsearch_indices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Indices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ElasticsearchIndex)
	fc.Result = res
	return ec.marshalNElasticsearchIndex2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndexᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Elasticsearch_indices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Elasticsearch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ElasticsearchIndex_id(ctx, field)
			case "name":
				return ec.fieldContext_ElasticsearchIndex_name(ctx, field)
			case "type":
				return ec.fieldContext_ElasticsearchIndex_type(ctx, field)
			case "shards":
				return ec.fieldContext_ElasticsearchIndex_shards(ctx, field)
			case "replicas":
				return ec.fieldContext_ElasticsearchIndex_replicas(ctx, field)
			case "bindings":
				return ec.fieldContext_ElasticsearchIndex_bindings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ElasticsearchIndex", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ElasticsearchIndex_id(ctx context.Context, field graphql.CollectedField, obj *ElasticsearchIndex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ElasticsearchIndex_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ElasticsearchIndex_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ElasticsearchIndex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ElasticsearchIndex_name(ctx context.Context, field graphql.CollectedField, obj *ElasticsearchIndex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ElasticsearchIndex_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ElasticsearchIndex_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ElasticsearchIndex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ElasticsearchIndex_type(ctx context.Context, field graphql.CollectedField, obj *ElasticsearchIndex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ElasticsearchIndex_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ElasticsearchIndex_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ElasticsearchIndex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ElasticsearchIndex_shards(ctx context.Context, field graphql.CollectedField, obj *ElasticsearchIndex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ElasticsearchIndex_shards(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shards, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ElasticsearchIndex_shards(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ElasticsearchIndex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ElasticsearchIndex_replicas(ctx context.Context, field graphql.CollectedField, obj *ElasticsearchIndex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ElasticsearchIndex_replicas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replicas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ElasticsearchIndex_replicas(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ElasticsearchIndex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ElasticsearchIndex_bindings(ctx context.Context, field graphql.CollectedField, obj *ElasticsearchIndex) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ElasticsearchIndex_bindings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bindings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*SinkBindings)
	fc.Result = res
	return ec.marshalOSinkBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ElasticsearchIndex_bindings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ElasticsearchIndex",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sources":
				return ec.fieldContext_SinkBindings_sources(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SinkBindings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Heartbeat_nodeCount(ctx context.Context, field graphql.CollectedField, obj *Heartbeat) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Heartbeat_nodeCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Heartbeat_nodeCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Heartbeat",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_isOnTrial(ctx context.Context, field graphql.CollectedField, obj *Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_isOnTrial(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsOnTrial, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_isOnTrial(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_upcomingAmount(ctx context.Context, field graphql.CollectedField, obj *Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_upcomingAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpcomingAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_upcomingAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_currency(ctx context.Context, field graphql.CollectedField, obj *Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_endOfBillingCycleDate(ctx context.Context, field graphql.CollectedField, obj *Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_endOfBillingCycleDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndOfBillingCycleDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_endOfBillingCycleDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_endOfTrialDate(ctx context.Context, field graphql.CollectedField, obj *Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_endOfTrialDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndOfTrialDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_endOfTrialDate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Invoice_items(ctx context.Context, field graphql.CollectedField, obj *Invoice) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Invoice_items(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*InvoiceItem)
	fc.Result = res
	return ec.marshalNInvoiceItem2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐInvoiceItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Invoice_items(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Invoice",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "amount":
				return ec.fieldContext_InvoiceItem_amount(ctx, field)
			case "priceUnitAmount":
				return ec.fieldContext_InvoiceItem_priceUnitAmount(ctx, field)
			case "currency":
				return ec.fieldContext_InvoiceItem_currency(ctx, field)
			case "description":
				return ec.fieldContext_InvoiceItem_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type InvoiceItem", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceItem_amount(ctx context.Context, field graphql.CollectedField, obj *InvoiceItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceItem_amount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceItem_amount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceItem_priceUnitAmount(ctx context.Context, field graphql.CollectedField, obj *InvoiceItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceItem_priceUnitAmount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceUnitAmount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceItem_priceUnitAmount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceItem_currency(ctx context.Context, field graphql.CollectedField, obj *InvoiceItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceItem_currency(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceItem_currency(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _InvoiceItem_description(ctx context.Context, field graphql.CollectedField, obj *InvoiceItem) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_InvoiceItem_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_InvoiceItem_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "InvoiceItem",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mattermost_id(ctx context.Context, field graphql.CollectedField, obj *Mattermost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mattermost_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mattermost_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mattermost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mattermost_name(ctx context.Context, field graphql.CollectedField, obj *Mattermost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mattermost_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mattermost_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mattermost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mattermost_botName(ctx context.Context, field graphql.CollectedField, obj *Mattermost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mattermost_botName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BotName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mattermost_botName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mattermost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mattermost_url(ctx context.Context, field graphql.CollectedField, obj *Mattermost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mattermost_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mattermost_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mattermost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mattermost_token(ctx context.Context, field graphql.CollectedField, obj *Mattermost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mattermost_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mattermost_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mattermost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mattermost_team(ctx context.Context, field graphql.CollectedField, obj *Mattermost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mattermost_team(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Team, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mattermost_team(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mattermost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mattermost_channels(ctx context.Context, field graphql.CollectedField, obj *Mattermost) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mattermost_channels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ChannelBindingsByName)
	fc.Result = res
	return ec.marshalNChannelBindingsByName2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mattermost_channels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mattermost",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ChannelBindingsByName_name(ctx, field)
			case "bindings":
				return ec.fieldContext_ChannelBindingsByName_bindings(ctx, field)
			case "notificationsDisabled":
				return ec.fieldContext_ChannelBindingsByName_notificationsDisabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelBindingsByName", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MsTeams_id(ctx context.Context, field graphql.CollectedField, obj *MsTeams) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MsTeams_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MsTeams_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MsTeams",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MsTeams_name(ctx context.Context, field graphql.CollectedField, obj *MsTeams) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MsTeams_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MsTeams_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MsTeams",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MsTeams_botName(ctx context.Context, field graphql.CollectedField, obj *MsTeams) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MsTeams_botName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BotName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MsTeams_botName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MsTeams",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MsTeams_appId(ctx context.Context, field graphql.CollectedField, obj *MsTeams) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MsTeams_appId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MsTeams_appId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MsTeams",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MsTeams_appPassword(ctx context.Context, field graphql.CollectedField, obj *MsTeams) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MsTeams_appPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppPassword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MsTeams_appPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MsTeams",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MsTeams_port(ctx context.Context, field graphql.CollectedField, obj *MsTeams) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MsTeams_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MsTeams_port(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MsTeams",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MsTeams_messagePath(ctx context.Context, field graphql.CollectedField, obj *MsTeams) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MsTeams_messagePath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessagePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MsTeams_messagePath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MsTeams",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MsTeams_notificationsDisabled(ctx context.Context, field graphql.CollectedField, obj *MsTeams) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MsTeams_notificationsDisabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationsDisabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MsTeams_notificationsDisabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MsTeams",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MsTeams_bindings(ctx context.Context, field graphql.CollectedField, obj *MsTeams) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MsTeams_bindings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bindings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*BotBindings)
	fc.Result = res
	return ec.marshalNBotBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MsTeams_bindings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MsTeams",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sources":
				return ec.fieldContext_BotBindings_sources(ctx, field)
			case "executors":
				return ec.fieldContext_BotBindings_executors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BotBindings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAuditEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAuditEvent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAuditEvent(rctx, fc.Args["input"].(AuditEventCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"audit_log:create"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(AuditEvent); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.AuditEvent`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(AuditEvent)
	fc.Result = res
	return ec.marshalNAuditEvent2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEvent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAuditEvent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAuditEvent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createAlias(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createAlias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateAlias(rctx, fc.Args["input"].(AliasCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"alias:create"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RestrictOnOrgUpdatesBlocked == nil {
				return nil, errors.New("directive restrictOnOrgUpdatesBlocked is not implemented")
			}
			return ec.directives.RestrictOnOrgUpdatesBlocked(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Alias); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Alias`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Alias)
	fc.Result = res
	return ec.marshalNAlias2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAlias(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createAlias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alias_id(ctx, field)
			case "name":
				return ec.fieldContext_Alias_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Alias_displayName(ctx, field)
			case "command":
				return ec.fieldContext_Alias_command(ctx, field)
			case "deployments":
				return ec.fieldContext_Alias_deployments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alias", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createAlias_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateAlias(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateAlias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateAlias(rctx, fc.Args["id"].(string), fc.Args["input"].(AliasUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"alias:update"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RestrictOnOrgUpdatesBlocked == nil {
				return nil, errors.New("directive restrictOnOrgUpdatesBlocked is not implemented")
			}
			return ec.directives.RestrictOnOrgUpdatesBlocked(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Alias); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Alias`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Alias)
	fc.Result = res
	return ec.marshalNAlias2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAlias(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateAlias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Alias_id(ctx, field)
			case "name":
				return ec.fieldContext_Alias_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Alias_displayName(ctx, field)
			case "command":
				return ec.fieldContext_Alias_command(ctx, field)
			case "deployments":
				return ec.fieldContext_Alias_deployments(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Alias", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateAlias_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAlias(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAlias(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteAlias(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"alias:delete"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RestrictOnOrgUpdatesBlocked == nil {
				return nil, errors.New("directive restrictOnOrgUpdatesBlocked is not implemented")
			}
			return ec.directives.RestrictOnOrgUpdatesBlocked(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAlias(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAlias_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createDeployment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createDeployment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateDeployment(rctx, fc.Args["input"].(DeploymentCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:create", "api_key:create"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RestrictOnOrgUpdatesBlocked == nil {
				return nil, errors.New("directive restrictOnOrgUpdatesBlocked is not implemented")
			}
			return ec.directives.RestrictOnOrgUpdatesBlocked(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Deployment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Deployment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Deployment)
	fc.Result = res
	return ec.marshalNDeployment2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeployment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createDeployment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deployment_id(ctx, field)
			case "name":
				return ec.fieldContext_Deployment_name(ctx, field)
			case "actions":
				return ec.fieldContext_Deployment_actions(ctx, field)
			case "plugins":
				return ec.fieldContext_Deployment_plugins(ctx, field)
			case "platforms":
				return ec.fieldContext_Deployment_platforms(ctx, field)
			case "status":
				return ec.fieldContext_Deployment_status(ctx, field)
			case "apiKey":
				return ec.fieldContext_Deployment_apiKey(ctx, field)
			case "yamlConfig":
				return ec.fieldContext_Deployment_yamlConfig(ctx, field)
			case "aliases":
				return ec.fieldContext_Deployment_aliases(ctx, field)
			case "helmCommand":
				return ec.fieldContext_Deployment_helmCommand(ctx, field)
			case "resourceVersion":
				return ec.fieldContext_Deployment_resourceVersion(ctx, field)
			case "heartbeat":
				return ec.fieldContext_Deployment_heartbeat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deployment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createDeployment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateDeployment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateDeployment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateDeployment(rctx, fc.Args["id"].(string), fc.Args["input"].(DeploymentUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:update"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RestrictOnOrgUpdatesBlocked == nil {
				return nil, errors.New("directive restrictOnOrgUpdatesBlocked is not implemented")
			}
			return ec.directives.RestrictOnOrgUpdatesBlocked(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Deployment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Deployment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Deployment)
	fc.Result = res
	return ec.marshalNDeployment2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeployment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateDeployment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deployment_id(ctx, field)
			case "name":
				return ec.fieldContext_Deployment_name(ctx, field)
			case "actions":
				return ec.fieldContext_Deployment_actions(ctx, field)
			case "plugins":
				return ec.fieldContext_Deployment_plugins(ctx, field)
			case "platforms":
				return ec.fieldContext_Deployment_platforms(ctx, field)
			case "status":
				return ec.fieldContext_Deployment_status(ctx, field)
			case "apiKey":
				return ec.fieldContext_Deployment_apiKey(ctx, field)
			case "yamlConfig":
				return ec.fieldContext_Deployment_yamlConfig(ctx, field)
			case "aliases":
				return ec.fieldContext_Deployment_aliases(ctx, field)
			case "helmCommand":
				return ec.fieldContext_Deployment_helmCommand(ctx, field)
			case "resourceVersion":
				return ec.fieldContext_Deployment_resourceVersion(ctx, field)
			case "heartbeat":
				return ec.fieldContext_Deployment_heartbeat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deployment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateDeployment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteDeployment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteDeployment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().DeleteDeployment(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:delete"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteDeployment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteDeployment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_patchDeploymentConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_patchDeploymentConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().PatchDeploymentConfig(rctx, fc.Args["id"].(string), fc.Args["input"].(PatchDeploymentConfigInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:update_config"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RestrictOnOrgUpdatesBlocked == nil {
				return nil, errors.New("directive restrictOnOrgUpdatesBlocked is not implemented")
			}
			return ec.directives.RestrictOnOrgUpdatesBlocked(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_patchDeploymentConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_patchDeploymentConfig_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_regenerateDeploymentApiKey(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_regenerateDeploymentApiKey(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RegenerateDeploymentAPIKey(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"api_key:update", "deployment:update"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RestrictOnOrgUpdatesBlocked == nil {
				return nil, errors.New("directive restrictOnOrgUpdatesBlocked is not implemented")
			}
			return ec.directives.RestrictOnOrgUpdatesBlocked(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*APIKey); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.APIKey`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*APIKey)
	fc.Result = res
	return ec.marshalNApiKey2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAPIKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_regenerateDeploymentApiKey(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ApiKey_name(ctx, field)
			case "value":
				return ec.fieldContext_ApiKey_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiKey", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_regenerateDeploymentApiKey_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_reportDeploymentStartup(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_reportDeploymentStartup(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ReportDeploymentStartup(rctx, fc.Args["id"].(string), fc.Args["resourceVersion"].(int), fc.Args["botkubeVersion"].(*string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:report_status"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			idInputFieldName, err := ec.unmarshalNString2string(ctx, "id")
			if err != nil {
				return nil, err
			}
			if ec.directives.RestrictDeploymentAccessForSameID == nil {
				return nil, errors.New("directive restrictDeploymentAccessForSameID is not implemented")
			}
			return ec.directives.RestrictDeploymentAccessForSameID(ctx, nil, directive1, idInputFieldName)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_reportDeploymentStartup(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_reportDeploymentStartup_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_reportDeploymentShutdown(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_reportDeploymentShutdown(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ReportDeploymentShutdown(rctx, fc.Args["id"].(string), fc.Args["resourceVersion"].(int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:report_status"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			idInputFieldName, err := ec.unmarshalNString2string(ctx, "id")
			if err != nil {
				return nil, err
			}
			if ec.directives.RestrictDeploymentAccessForSameID == nil {
				return nil, errors.New("directive restrictDeploymentAccessForSameID is not implemented")
			}
			return ec.directives.RestrictDeploymentAccessForSameID(ctx, nil, directive1, idInputFieldName)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_reportDeploymentShutdown(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_reportDeploymentShutdown_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_reportDeploymentFailure(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_reportDeploymentFailure(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ReportDeploymentFailure(rctx, fc.Args["id"].(string), fc.Args["in"].(DeploymentFailureInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:report_status"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			idInputFieldName, err := ec.unmarshalNString2string(ctx, "id")
			if err != nil {
				return nil, err
			}
			if ec.directives.RestrictDeploymentAccessForSameID == nil {
				return nil, errors.New("directive restrictDeploymentAccessForSameID is not implemented")
			}
			return ec.directives.RestrictDeploymentAccessForSameID(ctx, nil, directive1, idInputFieldName)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_reportDeploymentFailure(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_reportDeploymentFailure_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_reportDeploymentHeartbeat(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_reportDeploymentHeartbeat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ReportDeploymentHeartbeat(rctx, fc.Args["id"].(string), fc.Args["in"].(DeploymentHeartbeatInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:report_status"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			idInputFieldName, err := ec.unmarshalNString2string(ctx, "id")
			if err != nil {
				return nil, err
			}
			if ec.directives.RestrictDeploymentAccessForSameID == nil {
				return nil, errors.New("directive restrictDeploymentAccessForSameID is not implemented")
			}
			return ec.directives.RestrictDeploymentAccessForSameID(ctx, nil, directive1, idInputFieldName)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_reportDeploymentHeartbeat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_reportDeploymentHeartbeat_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().CreateOrganization(rctx, fc.Args["input"].(OrganizationCreateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, "org:create")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Organization_displayName(ctx, field)
			case "subscription":
				return ec.fieldContext_Organization_subscription(ctx, field)
			case "ownerId":
				return ec.fieldContext_Organization_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "members":
				return ec.fieldContext_Organization_members(ctx, field)
			case "quota":
				return ec.fieldContext_Organization_quota(ctx, field)
			case "billingHistoryAvailable":
				return ec.fieldContext_Organization_billingHistoryAvailable(ctx, field)
			case "updateOperations":
				return ec.fieldContext_Organization_updateOperations(ctx, field)
			case "usage":
				return ec.fieldContext_Organization_usage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().UpdateOrganization(rctx, fc.Args["id"].(string), fc.Args["input"].(OrganizationUpdateInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, "org:update")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RestrictOnOrgUpdatesBlocked == nil {
				return nil, errors.New("directive restrictOnOrgUpdatesBlocked is not implemented")
			}
			return ec.directives.RestrictOnOrgUpdatesBlocked(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Organization_displayName(ctx, field)
			case "subscription":
				return ec.fieldContext_Organization_subscription(ctx, field)
			case "ownerId":
				return ec.fieldContext_Organization_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "members":
				return ec.fieldContext_Organization_members(ctx, field)
			case "quota":
				return ec.fieldContext_Organization_quota(ctx, field)
			case "billingHistoryAvailable":
				return ec.fieldContext_Organization_billingHistoryAvailable(ctx, field)
			case "updateOperations":
				return ec.fieldContext_Organization_updateOperations(ctx, field)
			case "usage":
				return ec.fieldContext_Organization_usage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addMemberForOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addMemberForOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().AddMemberForOrganization(rctx, fc.Args["input"].(AddMemberForOrganizationInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, "org:add_member")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.RestrictOnOrgUpdatesBlocked == nil {
				return nil, errors.New("directive restrictOnOrgUpdatesBlocked is not implemented")
			}
			return ec.directives.RestrictOnOrgUpdatesBlocked(ctx, nil, directive1)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addMemberForOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Organization_displayName(ctx, field)
			case "subscription":
				return ec.fieldContext_Organization_subscription(ctx, field)
			case "ownerId":
				return ec.fieldContext_Organization_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "members":
				return ec.fieldContext_Organization_members(ctx, field)
			case "quota":
				return ec.fieldContext_Organization_quota(ctx, field)
			case "billingHistoryAvailable":
				return ec.fieldContext_Organization_billingHistoryAvailable(ctx, field)
			case "updateOperations":
				return ec.fieldContext_Organization_updateOperations(ctx, field)
			case "usage":
				return ec.fieldContext_Organization_usage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addMemberForOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeMemberFromOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeMemberFromOrganization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().RemoveMemberFromOrganization(rctx, fc.Args["input"].(RemoveMemberFromOrganizationInput))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, "org:remove_member")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeMemberFromOrganization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Organization_displayName(ctx, field)
			case "subscription":
				return ec.fieldContext_Organization_subscription(ctx, field)
			case "ownerId":
				return ec.fieldContext_Organization_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "members":
				return ec.fieldContext_Organization_members(ctx, field)
			case "quota":
				return ec.fieldContext_Organization_quota(ctx, field)
			case "billingHistoryAvailable":
				return ec.fieldContext_Organization_billingHistoryAvailable(ctx, field)
			case "updateOperations":
				return ec.fieldContext_Organization_updateOperations(ctx, field)
			case "usage":
				return ec.fieldContext_Organization_usage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeMemberFromOrganization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_generateCheckoutURL(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_generateCheckoutURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GenerateCheckoutURL(rctx, fc.Args["planName"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, "org:update")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_generateCheckoutURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_generateCheckoutURL_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_generateBillingPortalURL(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_generateBillingPortalURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().GenerateBillingPortalURL(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, "org:update")
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_generateBillingPortalURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_resendEmailVerification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_resendEmailVerification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Mutation().ResendEmailVerification(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, "user:update")
			if err != nil {
				return nil, err
			}
			disableEmailValidation, err := ec.unmarshalOBoolean2ᚖbool(ctx, true)
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, disableEmailValidation)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_resendEmailVerification(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_id(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_displayName(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_subscription(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_subscription(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subscription, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*OrganizationSubscription)
	fc.Result = res
	return ec.marshalNOrganizationSubscription2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganizationSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_subscription(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "planName":
				return ec.fieldContext_OrganizationSubscription_planName(ctx, field)
			case "customerId":
				return ec.fieldContext_OrganizationSubscription_customerId(ctx, field)
			case "subscriptionId":
				return ec.fieldContext_OrganizationSubscription_subscriptionId(ctx, field)
			case "planDisplayName":
				return ec.fieldContext_OrganizationSubscription_planDisplayName(ctx, field)
			case "isDefaultPlan":
				return ec.fieldContext_OrganizationSubscription_isDefaultPlan(ctx, field)
			case "trialConsumed":
				return ec.fieldContext_OrganizationSubscription_trialConsumed(ctx, field)
			case "invoice":
				return ec.fieldContext_OrganizationSubscription_invoice(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationSubscription", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_ownerId(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_ownerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OwnerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_ownerId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_owner(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Owner(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_members(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_members(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Members(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_members(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_quota(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_quota(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Quota(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Quota)
	fc.Result = res
	return ec.marshalOQuota2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐQuota(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_quota(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deploymentCount":
				return ec.fieldContext_Quota_deploymentCount(ctx, field)
			case "auditRetentionPeriod":
				return ec.fieldContext_Quota_auditRetentionPeriod(ctx, field)
			case "memberCount":
				return ec.fieldContext_Quota_memberCount(ctx, field)
			case "nodeCount":
				return ec.fieldContext_Quota_nodeCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Quota", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_billingHistoryAvailable(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_billingHistoryAvailable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BillingHistoryAvailable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_billingHistoryAvailable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_updateOperations(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_updateOperations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateOperations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*OrganizationUpdateOperations)
	fc.Result = res
	return ec.marshalOOrganizationUpdateOperations2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganizationUpdateOperations(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_updateOperations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "blocked":
				return ec.fieldContext_OrganizationUpdateOperations_blocked(ctx, field)
			case "reasons":
				return ec.fieldContext_OrganizationUpdateOperations_reasons(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OrganizationUpdateOperations", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Organization_usage(ctx context.Context, field graphql.CollectedField, obj *Organization) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Organization_usage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Organization().Usage(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Usage)
	fc.Result = res
	return ec.marshalOUsage2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐUsage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Organization_usage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "deploymentCount":
				return ec.fieldContext_Usage_deploymentCount(ctx, field)
			case "memberCount":
				return ec.fieldContext_Usage_memberCount(ctx, field)
			case "nodeCount":
				return ec.fieldContext_Usage_nodeCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Usage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSubscription_planName(ctx context.Context, field graphql.CollectedField, obj *OrganizationSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSubscription_planName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSubscription_planName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSubscription_customerId(ctx context.Context, field graphql.CollectedField, obj *OrganizationSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSubscription_customerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSubscription_customerId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSubscription_subscriptionId(ctx context.Context, field graphql.CollectedField, obj *OrganizationSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSubscription_subscriptionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSubscription_subscriptionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSubscription_planDisplayName(ctx context.Context, field graphql.CollectedField, obj *OrganizationSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSubscription_planDisplayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanDisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSubscription_planDisplayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSubscription_isDefaultPlan(ctx context.Context, field graphql.CollectedField, obj *OrganizationSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSubscription_isDefaultPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefaultPlan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSubscription_isDefaultPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSubscription_trialConsumed(ctx context.Context, field graphql.CollectedField, obj *OrganizationSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSubscription_trialConsumed(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrialConsumed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSubscription_trialConsumed(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSubscription",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationSubscription_invoice(ctx context.Context, field graphql.CollectedField, obj *OrganizationSubscription) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationSubscription_invoice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OrganizationSubscription().Invoice(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Invoice)
	fc.Result = res
	return ec.marshalOInvoice2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationSubscription_invoice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationSubscription",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isOnTrial":
				return ec.fieldContext_Invoice_isOnTrial(ctx, field)
			case "upcomingAmount":
				return ec.fieldContext_Invoice_upcomingAmount(ctx, field)
			case "currency":
				return ec.fieldContext_Invoice_currency(ctx, field)
			case "endOfBillingCycleDate":
				return ec.fieldContext_Invoice_endOfBillingCycleDate(ctx, field)
			case "endOfTrialDate":
				return ec.fieldContext_Invoice_endOfTrialDate(ctx, field)
			case "items":
				return ec.fieldContext_Invoice_items(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Invoice", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUpdateOperations_blocked(ctx context.Context, field graphql.CollectedField, obj *OrganizationUpdateOperations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUpdateOperations_blocked(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blocked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUpdateOperations_blocked(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUpdateOperations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OrganizationUpdateOperations_reasons(ctx context.Context, field graphql.CollectedField, obj *OrganizationUpdateOperations) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OrganizationUpdateOperations_reasons(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reasons, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OrganizationUpdateOperations_reasons(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OrganizationUpdateOperations",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_limit(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_limit(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Limit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_limit(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_offset(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_offset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Offset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_offset(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Platforms_socketSlacks(ctx context.Context, field graphql.CollectedField, obj *Platforms) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Platforms_socketSlacks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Platforms().SocketSlacks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*SocketSlack)
	fc.Result = res
	return ec.marshalOSocketSlack2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlackᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Platforms_socketSlacks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Platforms",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SocketSlack_id(ctx, field)
			case "name":
				return ec.fieldContext_SocketSlack_name(ctx, field)
			case "appToken":
				return ec.fieldContext_SocketSlack_appToken(ctx, field)
			case "botToken":
				return ec.fieldContext_SocketSlack_botToken(ctx, field)
			case "channels":
				return ec.fieldContext_SocketSlack_channels(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SocketSlack", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Platforms_discords(ctx context.Context, field graphql.CollectedField, obj *Platforms) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Platforms_discords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Platforms().Discords(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Discord)
	fc.Result = res
	return ec.marshalODiscord2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscordᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Platforms_discords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Platforms",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Discord_id(ctx, field)
			case "name":
				return ec.fieldContext_Discord_name(ctx, field)
			case "token":
				return ec.fieldContext_Discord_token(ctx, field)
			case "botId":
				return ec.fieldContext_Discord_botId(ctx, field)
			case "channels":
				return ec.fieldContext_Discord_channels(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Discord", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Platforms_mattermosts(ctx context.Context, field graphql.CollectedField, obj *Platforms) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Platforms_mattermosts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Platforms().Mattermosts(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Mattermost)
	fc.Result = res
	return ec.marshalOMattermost2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Platforms_mattermosts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Platforms",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Mattermost_id(ctx, field)
			case "name":
				return ec.fieldContext_Mattermost_name(ctx, field)
			case "botName":
				return ec.fieldContext_Mattermost_botName(ctx, field)
			case "url":
				return ec.fieldContext_Mattermost_url(ctx, field)
			case "token":
				return ec.fieldContext_Mattermost_token(ctx, field)
			case "team":
				return ec.fieldContext_Mattermost_team(ctx, field)
			case "channels":
				return ec.fieldContext_Mattermost_channels(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Mattermost", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Platforms_webhooks(ctx context.Context, field graphql.CollectedField, obj *Platforms) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Platforms_webhooks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Platforms().Webhooks(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Webhook)
	fc.Result = res
	return ec.marshalOWebhook2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhookᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Platforms_webhooks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Platforms",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Webhook_id(ctx, field)
			case "name":
				return ec.fieldContext_Webhook_name(ctx, field)
			case "url":
				return ec.fieldContext_Webhook_url(ctx, field)
			case "bindings":
				return ec.fieldContext_Webhook_bindings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Webhook", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Platforms_msTeams(ctx context.Context, field graphql.CollectedField, obj *Platforms) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Platforms_msTeams(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Platforms().MsTeams(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*MsTeams)
	fc.Result = res
	return ec.marshalOMsTeams2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeamsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Platforms_msTeams(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Platforms",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MsTeams_id(ctx, field)
			case "name":
				return ec.fieldContext_MsTeams_name(ctx, field)
			case "botName":
				return ec.fieldContext_MsTeams_botName(ctx, field)
			case "appId":
				return ec.fieldContext_MsTeams_appId(ctx, field)
			case "appPassword":
				return ec.fieldContext_MsTeams_appPassword(ctx, field)
			case "port":
				return ec.fieldContext_MsTeams_port(ctx, field)
			case "messagePath":
				return ec.fieldContext_MsTeams_messagePath(ctx, field)
			case "notificationsDisabled":
				return ec.fieldContext_MsTeams_notificationsDisabled(ctx, field)
			case "bindings":
				return ec.fieldContext_MsTeams_bindings(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MsTeams", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Platforms_elasticsearches(ctx context.Context, field graphql.CollectedField, obj *Platforms) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Platforms_elasticsearches(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Platforms().Elasticsearches(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Elasticsearch)
	fc.Result = res
	return ec.marshalOElasticsearch2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Platforms_elasticsearches(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Platforms",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Elasticsearch_id(ctx, field)
			case "name":
				return ec.fieldContext_Elasticsearch_name(ctx, field)
			case "username":
				return ec.fieldContext_Elasticsearch_username(ctx, field)
			case "password":
				return ec.fieldContext_Elasticsearch_password(ctx, field)
			case "server":
				return ec.fieldContext_Elasticsearch_server(ctx, field)
			case "skipTlsVerify":
				return ec.fieldContext_Elasticsearch_skipTlsVerify(ctx, field)
			case "awsSigningRegion":
				return ec.fieldContext_Elasticsearch_awsSigningRegion(ctx, field)
			case "awsSigningRoleArn":
				return ec.fieldContext_Elasticsearch_awsSigningRoleArn(ctx, field)
			case "indices":
				return ec.fieldContext_Elasticsearch_indices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Elasticsearch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plugin_id(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plugin_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plugin_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plugin_name(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plugin_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plugin_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plugin_displayName(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plugin_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plugin_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plugin_type(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plugin_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(PluginType)
	fc.Result = res
	return ec.marshalNPluginType2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plugin_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PluginType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plugin_configurationName(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plugin_configurationName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfigurationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plugin_configurationName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Plugin_configuration(ctx context.Context, field graphql.CollectedField, obj *Plugin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Plugin_configuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Configuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Plugin_configuration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Plugin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PluginPage_data(ctx context.Context, field graphql.CollectedField, obj *PluginPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PluginPage_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*Plugin)
	fc.Result = res
	return ec.marshalNPlugin2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PluginPage_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PluginPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Plugin_id(ctx, field)
			case "name":
				return ec.fieldContext_Plugin_name(ctx, field)
			case "displayName":
				return ec.fieldContext_Plugin_displayName(ctx, field)
			case "type":
				return ec.fieldContext_Plugin_type(ctx, field)
			case "configurationName":
				return ec.fieldContext_Plugin_configurationName(ctx, field)
			case "configuration":
				return ec.fieldContext_Plugin_configuration(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Plugin", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PluginPage_pageInfo(ctx context.Context, field graphql.CollectedField, obj *PluginPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PluginPage_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PluginPage_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PluginPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "limit":
				return ec.fieldContext_PageInfo_limit(ctx, field)
			case "offset":
				return ec.fieldContext_PageInfo_offset(ctx, field)
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _PluginPage_totalCount(ctx context.Context, field graphql.CollectedField, obj *PluginPage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PluginPage_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PluginPage_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PluginPage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PluginTemplate_name(ctx context.Context, field graphql.CollectedField, obj *PluginTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PluginTemplate_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PluginTemplate_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PluginTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PluginTemplate_title(ctx context.Context, field graphql.CollectedField, obj *PluginTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PluginTemplate_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PluginTemplate_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PluginTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PluginTemplate_description(ctx context.Context, field graphql.CollectedField, obj *PluginTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PluginTemplate_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PluginTemplate_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PluginTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PluginTemplate_type(ctx context.Context, field graphql.CollectedField, obj *PluginTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PluginTemplate_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(PluginType)
	fc.Result = res
	return ec.marshalNPluginType2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PluginTemplate_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PluginTemplate",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type PluginType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PluginTemplate_schema(ctx context.Context, field graphql.CollectedField, obj *PluginTemplate) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PluginTemplate_schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.PluginTemplate().Schema(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PluginTemplate_schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PluginTemplate",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PluginTemplatePage_data(ctx context.Context, field graphql.CollectedField, obj *PluginTemplatePage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PluginTemplatePage_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*PluginTemplate)
	fc.Result = res
	return ec.marshalNPluginTemplate2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginTemplateᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PluginTemplatePage_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PluginTemplatePage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_PluginTemplate_name(ctx, field)
			case "title":
				return ec.fieldContext_PluginTemplate_title(ctx, field)
			case "description":
				return ec.fieldContext_PluginTemplate_description(ctx, field)
			case "type":
				return ec.fieldContext_PluginTemplate_type(ctx, field)
			case "schema":
				return ec.fieldContext_PluginTemplate_schema(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PluginTemplate", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_auditEvents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_auditEvents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().AuditEvents(rctx, fc.Args["filter"].(*AuditEventFilter), fc.Args["offset"].(*int), fc.Args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"audit_log:list"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AuditEventPage); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.AuditEventPage`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AuditEventPage)
	fc.Result = res
	return ec.marshalNAuditEventPage2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_auditEvents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_AuditEventPage_data(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AuditEventPage_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_AuditEventPage_totalCount(ctx, field)
			case "totalPages":
				return ec.fieldContext_AuditEventPage_totalPages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuditEventPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_auditEvents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_aliases(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_aliases(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Aliases(rctx, fc.Args["offset"].(*int), fc.Args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"alias:list"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*AliasPage); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.AliasPage`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*AliasPage)
	fc.Result = res
	return ec.marshalNAliasPage2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_aliases(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_AliasPage_data(ctx, field)
			case "pageInfo":
				return ec.fieldContext_AliasPage_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_AliasPage_totalCount(ctx, field)
			case "totalPages":
				return ec.fieldContext_AliasPage_totalPages(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AliasPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_aliases_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_deployments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deployments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Deployments(rctx, fc.Args["offset"].(*int), fc.Args["limit"].(*int))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:list"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*DeploymentPage); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.DeploymentPage`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*DeploymentPage)
	fc.Result = res
	return ec.marshalNDeploymentPage2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentPage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deployments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_DeploymentPage_data(ctx, field)
			case "pageInfo":
				return ec.fieldContext_DeploymentPage_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_DeploymentPage_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeploymentPage", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deployments_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_deployment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deployment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Deployment(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:get"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}
		directive2 := func(ctx context.Context) (interface{}, error) {
			idInputFieldName, err := ec.unmarshalNString2string(ctx, "id")
			if err != nil {
				return nil, err
			}
			if ec.directives.RestrictDeploymentAccessForSameID == nil {
				return nil, errors.New("directive restrictDeploymentAccessForSameID is not implemented")
			}
			return ec.directives.RestrictDeploymentAccessForSameID(ctx, nil, directive1, idInputFieldName)
		}

		tmp, err := directive2(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Deployment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Deployment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Deployment)
	fc.Result = res
	return ec.marshalNDeployment2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeployment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deployment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deployment_id(ctx, field)
			case "name":
				return ec.fieldContext_Deployment_name(ctx, field)
			case "actions":
				return ec.fieldContext_Deployment_actions(ctx, field)
			case "plugins":
				return ec.fieldContext_Deployment_plugins(ctx, field)
			case "platforms":
				return ec.fieldContext_Deployment_platforms(ctx, field)
			case "status":
				return ec.fieldContext_Deployment_status(ctx, field)
			case "apiKey":
				return ec.fieldContext_Deployment_apiKey(ctx, field)
			case "yamlConfig":
				return ec.fieldContext_Deployment_yamlConfig(ctx, field)
			case "aliases":
				return ec.fieldContext_Deployment_aliases(ctx, field)
			case "helmCommand":
				return ec.fieldContext_Deployment_helmCommand(ctx, field)
			case "resourceVersion":
				return ec.fieldContext_Deployment_resourceVersion(ctx, field)
			case "heartbeat":
				return ec.fieldContext_Deployment_heartbeat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deployment", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deployment_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_pluginTemplates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pluginTemplates(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PluginTemplates(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"plugin_template:list"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*PluginTemplatePage); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.PluginTemplatePage`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*PluginTemplatePage)
	fc.Result = res
	return ec.marshalNPluginTemplatePage2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginTemplatePage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pluginTemplates(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "data":
				return ec.fieldContext_PluginTemplatePage_data(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PluginTemplatePage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_pluginTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_pluginTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().PluginTemplate(rctx, fc.Args["name"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"plugin_template:get"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*PluginTemplate); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.PluginTemplate`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*PluginTemplate)
	fc.Result = res
	return ec.marshalOPluginTemplate2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginTemplate(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_pluginTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_PluginTemplate_name(ctx, field)
			case "title":
				return ec.fieldContext_PluginTemplate_title(ctx, field)
			case "description":
				return ec.fieldContext_PluginTemplate_description(ctx, field)
			case "type":
				return ec.fieldContext_PluginTemplate_type(ctx, field)
			case "schema":
				return ec.fieldContext_PluginTemplate_schema(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PluginTemplate", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_pluginTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_organizations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_organizations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Organizations(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"org:list"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganizationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_organizations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Organization_displayName(ctx, field)
			case "subscription":
				return ec.fieldContext_Organization_subscription(ctx, field)
			case "ownerId":
				return ec.fieldContext_Organization_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "members":
				return ec.fieldContext_Organization_members(ctx, field)
			case "quota":
				return ec.fieldContext_Organization_quota(ctx, field)
			case "billingHistoryAvailable":
				return ec.fieldContext_Organization_billingHistoryAvailable(ctx, field)
			case "updateOperations":
				return ec.fieldContext_Organization_updateOperations(ctx, field)
			case "usage":
				return ec.fieldContext_Organization_usage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_organization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_organization(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().Organization(rctx, fc.Args["id"].(string))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"org:get"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Organization); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Organization`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_organization(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Organization_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Organization_displayName(ctx, field)
			case "subscription":
				return ec.fieldContext_Organization_subscription(ctx, field)
			case "ownerId":
				return ec.fieldContext_Organization_ownerId(ctx, field)
			case "owner":
				return ec.fieldContext_Organization_owner(ctx, field)
			case "members":
				return ec.fieldContext_Organization_members(ctx, field)
			case "quota":
				return ec.fieldContext_Organization_quota(ctx, field)
			case "billingHistoryAvailable":
				return ec.fieldContext_Organization_billingHistoryAvailable(ctx, field)
			case "updateOperations":
				return ec.fieldContext_Organization_updateOperations(ctx, field)
			case "usage":
				return ec.fieldContext_Organization_usage(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Organization", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_organization_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_subscriptionPlans(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_subscriptionPlans(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Query().SubscriptionPlans(rctx)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"org:list"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, nil, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*SubscriptionPlan); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.SubscriptionPlan`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*SubscriptionPlan)
	fc.Result = res
	return ec.marshalNSubscriptionPlan2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSubscriptionPlanᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_subscriptionPlans(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_SubscriptionPlan_name(ctx, field)
			case "displayName":
				return ec.fieldContext_SubscriptionPlan_displayName(ctx, field)
			case "isDefault":
				return ec.fieldContext_SubscriptionPlan_isDefault(ctx, field)
			case "displayUnitPrice":
				return ec.fieldContext_SubscriptionPlan_displayUnitPrice(ctx, field)
			case "trialPeriodDays":
				return ec.fieldContext_SubscriptionPlan_trialPeriodDays(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubscriptionPlan", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quota_deploymentCount(ctx context.Context, field graphql.CollectedField, obj *Quota) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quota_deploymentCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quota_deploymentCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quota",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quota_auditRetentionPeriod(ctx context.Context, field graphql.CollectedField, obj *Quota) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quota_auditRetentionPeriod(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditRetentionPeriod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quota_auditRetentionPeriod(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quota",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quota_memberCount(ctx context.Context, field graphql.CollectedField, obj *Quota) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quota_memberCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quota_memberCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quota",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Quota_nodeCount(ctx context.Context, field graphql.CollectedField, obj *Quota) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Quota_nodeCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Quota_nodeCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Quota",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SinkBindings_sources(ctx context.Context, field graphql.CollectedField, obj *SinkBindings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SinkBindings_sources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SinkBindings_sources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SinkBindings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocketSlack_id(ctx context.Context, field graphql.CollectedField, obj *SocketSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocketSlack_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocketSlack_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocketSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocketSlack_name(ctx context.Context, field graphql.CollectedField, obj *SocketSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocketSlack_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocketSlack_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocketSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocketSlack_appToken(ctx context.Context, field graphql.CollectedField, obj *SocketSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocketSlack_appToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocketSlack_appToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocketSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocketSlack_botToken(ctx context.Context, field graphql.CollectedField, obj *SocketSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocketSlack_botToken(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BotToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocketSlack_botToken(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocketSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SocketSlack_channels(ctx context.Context, field graphql.CollectedField, obj *SocketSlack) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SocketSlack_channels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Channels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*ChannelBindingsByName)
	fc.Result = res
	return ec.marshalNChannelBindingsByName2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SocketSlack_channels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SocketSlack",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ChannelBindingsByName_name(ctx, field)
			case "bindings":
				return ec.fieldContext_ChannelBindingsByName_bindings(ctx, field)
			case "notificationsDisabled":
				return ec.fieldContext_ChannelBindingsByName_notificationsDisabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChannelBindingsByName", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceEventDetails_name(ctx context.Context, field graphql.CollectedField, obj *SourceEventDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceEventDetails_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceEventDetails_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceEventDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceEventDetails_displayName(ctx context.Context, field graphql.CollectedField, obj *SourceEventDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceEventDetails_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceEventDetails_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceEventDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceEventEmittedEvent_id(ctx context.Context, field graphql.CollectedField, obj *SourceEventEmittedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceEventEmittedEvent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceEventEmittedEvent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceEventEmittedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceEventEmittedEvent_type(ctx context.Context, field graphql.CollectedField, obj *SourceEventEmittedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceEventEmittedEvent_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(AuditEventType)
	fc.Result = res
	return ec.marshalNAuditEventType2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceEventEmittedEvent_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceEventEmittedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuditEventType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceEventEmittedEvent_deploymentId(ctx context.Context, field graphql.CollectedField, obj *SourceEventEmittedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceEventEmittedEvent_deploymentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceEventEmittedEvent_deploymentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceEventEmittedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceEventEmittedEvent_deployment(ctx context.Context, field graphql.CollectedField, obj *SourceEventEmittedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceEventEmittedEvent_deployment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.SourceEventEmittedEvent().Deployment(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			scopes, err := ec.unmarshalOString2ᚕstringᚄ(ctx, []interface{}{"deployment:get"})
			if err != nil {
				return nil, err
			}
			if ec.directives.HasScopes == nil {
				return nil, errors.New("directive hasScopes is not implemented")
			}
			return ec.directives.HasScopes(ctx, obj, directive0, scopes, nil)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*Deployment); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *github.com/kubeshop/botkube-cloud/botkube-cloud-backend/pkg/graphql.Deployment`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*Deployment)
	fc.Result = res
	return ec.marshalODeployment2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeployment(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceEventEmittedEvent_deployment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceEventEmittedEvent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Deployment_id(ctx, field)
			case "name":
				return ec.fieldContext_Deployment_name(ctx, field)
			case "actions":
				return ec.fieldContext_Deployment_actions(ctx, field)
			case "plugins":
				return ec.fieldContext_Deployment_plugins(ctx, field)
			case "platforms":
				return ec.fieldContext_Deployment_platforms(ctx, field)
			case "status":
				return ec.fieldContext_Deployment_status(ctx, field)
			case "apiKey":
				return ec.fieldContext_Deployment_apiKey(ctx, field)
			case "yamlConfig":
				return ec.fieldContext_Deployment_yamlConfig(ctx, field)
			case "aliases":
				return ec.fieldContext_Deployment_aliases(ctx, field)
			case "helmCommand":
				return ec.fieldContext_Deployment_helmCommand(ctx, field)
			case "resourceVersion":
				return ec.fieldContext_Deployment_resourceVersion(ctx, field)
			case "heartbeat":
				return ec.fieldContext_Deployment_heartbeat(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Deployment", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceEventEmittedEvent_createdAt(ctx context.Context, field graphql.CollectedField, obj *SourceEventEmittedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceEventEmittedEvent_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNTimestamp2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceEventEmittedEvent_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceEventEmittedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Timestamp does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceEventEmittedEvent_event(ctx context.Context, field graphql.CollectedField, obj *SourceEventEmittedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceEventEmittedEvent_event(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNAny2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceEventEmittedEvent_event(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceEventEmittedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Any does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceEventEmittedEvent_source(ctx context.Context, field graphql.CollectedField, obj *SourceEventEmittedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceEventEmittedEvent_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SourceEventDetails)
	fc.Result = res
	return ec.marshalNSourceEventDetails2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSourceEventDetails(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceEventEmittedEvent_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceEventEmittedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_SourceEventDetails_name(ctx, field)
			case "displayName":
				return ec.fieldContext_SourceEventDetails_displayName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SourceEventDetails", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SourceEventEmittedEvent_pluginName(ctx context.Context, field graphql.CollectedField, obj *SourceEventEmittedEvent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SourceEventEmittedEvent_pluginName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PluginName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SourceEventEmittedEvent_pluginName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SourceEventEmittedEvent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionPlan_name(ctx context.Context, field graphql.CollectedField, obj *SubscriptionPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionPlan_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionPlan_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionPlan_displayName(ctx context.Context, field graphql.CollectedField, obj *SubscriptionPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionPlan_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionPlan_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionPlan_isDefault(ctx context.Context, field graphql.CollectedField, obj *SubscriptionPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionPlan_isDefault(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionPlan_isDefault(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionPlan_displayUnitPrice(ctx context.Context, field graphql.CollectedField, obj *SubscriptionPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionPlan_displayUnitPrice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayUnitPrice, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionPlan_displayUnitPrice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubscriptionPlan_trialPeriodDays(ctx context.Context, field graphql.CollectedField, obj *SubscriptionPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubscriptionPlan_trialPeriodDays(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TrialPeriodDays, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubscriptionPlan_trialPeriodDays(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubscriptionPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Usage_deploymentCount(ctx context.Context, field graphql.CollectedField, obj *Usage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Usage_deploymentCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Usage().DeploymentCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Usage_deploymentCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Usage",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Usage_memberCount(ctx context.Context, field graphql.CollectedField, obj *Usage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Usage_memberCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Usage().MemberCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Usage_memberCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Usage",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Usage_nodeCount(ctx context.Context, field graphql.CollectedField, obj *Usage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Usage_nodeCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Usage().NodeCount(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Usage_nodeCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Usage",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Webhook_id(ctx context.Context, field graphql.CollectedField, obj *Webhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Webhook_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Webhook_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Webhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Webhook_name(ctx context.Context, field graphql.CollectedField, obj *Webhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Webhook_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Webhook_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Webhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Webhook_url(ctx context.Context, field graphql.CollectedField, obj *Webhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Webhook_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Webhook_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Webhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Webhook_bindings(ctx context.Context, field graphql.CollectedField, obj *Webhook) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Webhook_bindings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bindings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*SinkBindings)
	fc.Result = res
	return ec.marshalNSinkBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Webhook_bindings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Webhook",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "sources":
				return ec.fieldContext_SinkBindings_sources(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SinkBindings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputActionCreateUpdateInput(ctx context.Context, obj interface{}) (ActionCreateUpdateInput, error) {
	var it ActionCreateUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "displayName", "enabled", "command", "bindings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			it.Enabled, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "command":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("command"))
			it.Command, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalNActionCreateUpdateInputBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionCreateUpdateInputBindings(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputActionCreateUpdateInputBindings(ctx context.Context, obj interface{}) (ActionCreateUpdateInputBindings, error) {
	var it ActionCreateUpdateInputBindings
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"sources", "executors"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "sources":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sources"))
			it.Sources, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "executors":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executors"))
			it.Executors, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputActionPatchDeploymentConfigInput(ctx context.Context, obj interface{}) (ActionPatchDeploymentConfigInput, error) {
	var it ActionPatchDeploymentConfigInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "enabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			it.Enabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAddMemberForOrganizationInput(ctx context.Context, obj interface{}) (AddMemberForOrganizationInput, error) {
	var it AddMemberForOrganizationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"orgId", "userId", "userEmail"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
			it.OrgID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmail"))
			it.UserEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAliasCreateInput(ctx context.Context, obj interface{}) (AliasCreateInput, error) {
	var it AliasCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "displayName", "command", "deploymentIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "command":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("command"))
			it.Command, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deploymentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deploymentIds"))
			it.DeploymentIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAliasUpdateInput(ctx context.Context, obj interface{}) (AliasUpdateInput, error) {
	var it AliasUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "displayName", "command", "deploymentIds"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "command":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("command"))
			it.Command, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deploymentIds":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deploymentIds"))
			it.DeploymentIds, err = ec.unmarshalNID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditEventCommandCreateInput(ctx context.Context, obj interface{}) (AuditEventCommandCreateInput, error) {
	var it AuditEventCommandCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"platformUser", "channel", "botPlatform", "command"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "platformUser":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platformUser"))
			it.PlatformUser, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "channel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channel"))
			it.Channel, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "botPlatform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botPlatform"))
			it.BotPlatform, err = ec.unmarshalOBotPlatform2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotPlatform(ctx, v)
			if err != nil {
				return it, err
			}
		case "command":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("command"))
			it.Command, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditEventCreateInput(ctx context.Context, obj interface{}) (AuditEventCreateInput, error) {
	var it AuditEventCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "createdAt", "deploymentId", "pluginName", "sourceEventEmitted", "commandExecuted"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNAuditEventType2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventType(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNTimestamp2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deploymentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deploymentId"))
			it.DeploymentID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pluginName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pluginName"))
			it.PluginName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceEventEmitted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceEventEmitted"))
			it.SourceEventEmitted, err = ec.unmarshalOAuditEventSourceCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventSourceCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "commandExecuted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("commandExecuted"))
			it.CommandExecuted, err = ec.unmarshalOAuditEventCommandCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventCommandCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditEventFilter(ctx context.Context, obj interface{}) (AuditEventFilter, error) {
	var it AuditEventFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"deploymentId", "startDate", "endDate"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "deploymentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deploymentId"))
			it.DeploymentID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
			it.StartDate, err = ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
			it.EndDate, err = ec.unmarshalOTimestamp2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditEventSourceCreateInput(ctx context.Context, obj interface{}) (AuditEventSourceCreateInput, error) {
	var it AuditEventSourceCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"event", "source"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "event":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
			it.Event, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalOAuditEventSourceDetailsInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventSourceDetailsInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAuditEventSourceDetailsInput(ctx context.Context, obj interface{}) (AuditEventSourceDetailsInput, error) {
	var it AuditEventSourceDetailsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "displayName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBotBindingsCreateInput(ctx context.Context, obj interface{}) (BotBindingsCreateInput, error) {
	var it BotBindingsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"sources", "executors"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "sources":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sources"))
			it.Sources, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "executors":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executors"))
			it.Executors, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBotBindingsUpdateInput(ctx context.Context, obj interface{}) (BotBindingsUpdateInput, error) {
	var it BotBindingsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"sources", "executors"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "sources":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sources"))
			it.Sources, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "executors":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("executors"))
			it.Executors, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChannelBindingsByIDCreateInput(ctx context.Context, obj interface{}) (ChannelBindingsByIDCreateInput, error) {
	var it ChannelBindingsByIDCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "bindings", "notificationsDisabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalNBotBindingsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindingsCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "notificationsDisabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationsDisabled"))
			it.NotificationsDisabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChannelBindingsByIDUpdateInput(ctx context.Context, obj interface{}) (ChannelBindingsByIDUpdateInput, error) {
	var it ChannelBindingsByIDUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "bindings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalNBotBindingsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindingsUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChannelBindingsByNameCreateInput(ctx context.Context, obj interface{}) (ChannelBindingsByNameCreateInput, error) {
	var it ChannelBindingsByNameCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "bindings", "notificationsDisabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalNBotBindingsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindingsCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "notificationsDisabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationsDisabled"))
			it.NotificationsDisabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChannelBindingsByNameUpdateInput(ctx context.Context, obj interface{}) (ChannelBindingsByNameUpdateInput, error) {
	var it ChannelBindingsByNameUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "bindings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalNBotBindingsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindingsUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeploymentCreateInput(ctx context.Context, obj interface{}) (DeploymentCreateInput, error) {
	var it DeploymentCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "plugins", "platforms", "actions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "plugins":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plugins"))
			it.Plugins, err = ec.unmarshalOPluginsCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginsCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "platforms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platforms"))
			it.Platforms, err = ec.unmarshalNPlatformsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPlatformsCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "actions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actions"))
			it.Actions, err = ec.unmarshalOActionCreateUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionCreateUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeploymentFailureInput(ctx context.Context, obj interface{}) (DeploymentFailureInput, error) {
	var it DeploymentFailureInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"resourceVersion", "message"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "resourceVersion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourceVersion"))
			it.ResourceVersion, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeploymentHeartbeatInput(ctx context.Context, obj interface{}) (DeploymentHeartbeatInput, error) {
	var it DeploymentHeartbeatInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"nodeCount"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "nodeCount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodeCount"))
			it.NodeCount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeploymentStatusInput(ctx context.Context, obj interface{}) (DeploymentStatusInput, error) {
	var it DeploymentStatusInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"message", "phase"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phase":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phase"))
			it.Phase, err = ec.unmarshalODeploymentStatusPhase2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentStatusPhase(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeploymentUpdateInput(ctx context.Context, obj interface{}) (DeploymentUpdateInput, error) {
	var it DeploymentUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "platforms", "plugins", "actions", "resourceVersion"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "platforms":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platforms"))
			it.Platforms, err = ec.unmarshalNPlatformsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPlatformsUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "plugins":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("plugins"))
			it.Plugins, err = ec.unmarshalNPluginsUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginsUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "actions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("actions"))
			it.Actions, err = ec.unmarshalNActionCreateUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionCreateUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceVersion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourceVersion"))
			it.ResourceVersion, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDiscordCreateInput(ctx context.Context, obj interface{}) (DiscordCreateInput, error) {
	var it DiscordCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "token", "botId", "channels"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "botId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botId"))
			it.BotID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "channels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channels"))
			it.Channels, err = ec.unmarshalNChannelBindingsByIDCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByIDCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDiscordUpdateInput(ctx context.Context, obj interface{}) (DiscordUpdateInput, error) {
	var it DiscordUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "token", "botId", "channels"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "botId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botId"))
			it.BotID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "channels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channels"))
			it.Channels, err = ec.unmarshalNChannelBindingsByIDUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByIDUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElasticsearchCreateInput(ctx context.Context, obj interface{}) (ElasticsearchCreateInput, error) {
	var it ElasticsearchCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "username", "password", "server", "skipTlsVerify", "awsSigningRegion", "awsSigningRoleArn", "indices"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "server":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server"))
			it.Server, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "skipTlsVerify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skipTlsVerify"))
			it.SkipTLSVerify, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "awsSigningRegion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("awsSigningRegion"))
			it.AwsSigningRegion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "awsSigningRoleArn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("awsSigningRoleArn"))
			it.AwsSigningRoleArn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "indices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("indices"))
			it.Indices, err = ec.unmarshalNElasticsearchIndexCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndexCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElasticsearchIndexCreateInput(ctx context.Context, obj interface{}) (ElasticsearchIndexCreateInput, error) {
	var it ElasticsearchIndexCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "type", "shards", "replicas", "bindings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "shards":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shards"))
			it.Shards, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "replicas":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replicas"))
			it.Replicas, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalOSinkBindingsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindingsCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElasticsearchIndexUpdateInput(ctx context.Context, obj interface{}) (ElasticsearchIndexUpdateInput, error) {
	var it ElasticsearchIndexUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "type", "shards", "replicas", "bindings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "shards":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("shards"))
			it.Shards, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "replicas":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replicas"))
			it.Replicas, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalOSinkBindingsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindingsUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElasticsearchUpdateInput(ctx context.Context, obj interface{}) (ElasticsearchUpdateInput, error) {
	var it ElasticsearchUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "username", "password", "server", "skipTlsVerify", "awsSigningRegion", "awsSigningRoleArn", "indices"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "username":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("username"))
			it.Username, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "server":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("server"))
			it.Server, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "skipTlsVerify":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skipTlsVerify"))
			it.SkipTLSVerify, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "awsSigningRegion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("awsSigningRegion"))
			it.AwsSigningRegion, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "awsSigningRoleArn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("awsSigningRoleArn"))
			it.AwsSigningRoleArn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "indices":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("indices"))
			it.Indices, err = ec.unmarshalNElasticsearchIndexUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndexUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMattermostCreateInput(ctx context.Context, obj interface{}) (MattermostCreateInput, error) {
	var it MattermostCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "botName", "url", "token", "team", "channels"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "botName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botName"))
			it.BotName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "team":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("team"))
			it.Team, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "channels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channels"))
			it.Channels, err = ec.unmarshalNChannelBindingsByNameCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMattermostUpdateInput(ctx context.Context, obj interface{}) (MattermostUpdateInput, error) {
	var it MattermostUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "botName", "url", "token", "team", "channels"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "botName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botName"))
			it.BotName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "team":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("team"))
			it.Team, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "channels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channels"))
			it.Channels, err = ec.unmarshalNChannelBindingsByNameUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMsTeamsCreateInput(ctx context.Context, obj interface{}) (MsTeamsCreateInput, error) {
	var it MsTeamsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "botName", "appId", "appPassword", "port", "messagePath", "notificationsDisabled", "bindings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "botName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botName"))
			it.BotName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "appPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appPassword"))
			it.AppPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "port":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			it.Port, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "messagePath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messagePath"))
			it.MessagePath, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "notificationsDisabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notificationsDisabled"))
			it.NotificationsDisabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalNBotBindingsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindingsCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMsTeamsUpdateInput(ctx context.Context, obj interface{}) (MsTeamsUpdateInput, error) {
	var it MsTeamsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "botName", "appId", "appPassword", "port", "messagePath", "bindings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "botName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botName"))
			it.BotName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "appPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appPassword"))
			it.AppPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "port":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			it.Port, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "messagePath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messagePath"))
			it.MessagePath, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalNBotBindingsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindingsUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotificationPatchDeploymentConfigInput(ctx context.Context, obj interface{}) (NotificationPatchDeploymentConfigInput, error) {
	var it NotificationPatchDeploymentConfigInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"communicationGroupName", "platform", "channelAlias", "disabled"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "communicationGroupName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communicationGroupName"))
			it.CommunicationGroupName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalNBotPlatform2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotPlatform(ctx, v)
			if err != nil {
				return it, err
			}
		case "channelAlias":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelAlias"))
			it.ChannelAlias, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "disabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
			it.Disabled, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationCreateInput(ctx context.Context, obj interface{}) (OrganizationCreateInput, error) {
	var it OrganizationCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"displayName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOrganizationUpdateInput(ctx context.Context, obj interface{}) (OrganizationUpdateInput, error) {
	var it OrganizationUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"displayName"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPatchDeploymentConfigInput(ctx context.Context, obj interface{}) (PatchDeploymentConfigInput, error) {
	var it PatchDeploymentConfigInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"resourceVersion", "notification", "sourceBinding", "action"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "resourceVersion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourceVersion"))
			it.ResourceVersion, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "notification":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification"))
			it.Notification, err = ec.unmarshalONotificationPatchDeploymentConfigInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐNotificationPatchDeploymentConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceBinding":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceBinding"))
			it.SourceBinding, err = ec.unmarshalOSourceBindingPatchDeploymentConfigInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSourceBindingPatchDeploymentConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalOActionPatchDeploymentConfigInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionPatchDeploymentConfigInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlatformsCreateInput(ctx context.Context, obj interface{}) (PlatformsCreateInput, error) {
	var it PlatformsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"discords", "socketSlacks", "mattermosts", "webhooks", "msTeams", "elasticsearches"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "discords":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discords"))
			it.Discords, err = ec.unmarshalODiscordCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscordCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "socketSlacks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socketSlacks"))
			it.SocketSlacks, err = ec.unmarshalOSocketSlackCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlackCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "mattermosts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mattermosts"))
			it.Mattermosts, err = ec.unmarshalOMattermostCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermostCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "webhooks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webhooks"))
			it.Webhooks, err = ec.unmarshalOWebhookCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhookCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "msTeams":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msTeams"))
			it.MsTeams, err = ec.unmarshalOMsTeamsCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeamsCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "elasticsearches":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elasticsearches"))
			it.Elasticsearches, err = ec.unmarshalOElasticsearchCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPlatformsUpdateInput(ctx context.Context, obj interface{}) (PlatformsUpdateInput, error) {
	var it PlatformsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"socketSlacks", "discords", "mattermosts", "webhooks", "msTeams", "elasticsearches"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "socketSlacks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("socketSlacks"))
			it.SocketSlacks, err = ec.unmarshalOSocketSlackUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlackUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "discords":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discords"))
			it.Discords, err = ec.unmarshalODiscordUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscordUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "mattermosts":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mattermosts"))
			it.Mattermosts, err = ec.unmarshalOMattermostUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermostUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "webhooks":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webhooks"))
			it.Webhooks, err = ec.unmarshalOWebhookUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhookUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "msTeams":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msTeams"))
			it.MsTeams, err = ec.unmarshalOMsTeamsUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeamsUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "elasticsearches":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("elasticsearches"))
			it.Elasticsearches, err = ec.unmarshalOElasticsearchUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPluginConfigurationGroupInput(ctx context.Context, obj interface{}) (PluginConfigurationGroupInput, error) {
	var it PluginConfigurationGroupInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "displayName", "type", "configurations"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNPluginType2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginType(ctx, v)
			if err != nil {
				return it, err
			}
		case "configurations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurations"))
			it.Configurations, err = ec.unmarshalNPluginConfigurationInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPluginConfigurationGroupUpdateInput(ctx context.Context, obj interface{}) (PluginConfigurationGroupUpdateInput, error) {
	var it PluginConfigurationGroupUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "displayName", "type", "configurations"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNPluginType2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginType(ctx, v)
			if err != nil {
				return it, err
			}
		case "configurations":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configurations"))
			it.Configurations, err = ec.unmarshalNPluginConfigurationInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPluginConfigurationInput(ctx context.Context, obj interface{}) (PluginConfigurationInput, error) {
	var it PluginConfigurationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "configuration"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "configuration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configuration"))
			it.Configuration, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPluginsCreateInput(ctx context.Context, obj interface{}) (PluginsCreateInput, error) {
	var it PluginsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"groups"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "groups":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groups"))
			it.Groups, err = ec.unmarshalNPluginConfigurationGroupInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationGroupInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPluginsUpdateInput(ctx context.Context, obj interface{}) (PluginsUpdateInput, error) {
	var it PluginsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"groups"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "groups":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("groups"))
			it.Groups, err = ec.unmarshalNPluginConfigurationGroupUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationGroupUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRemoveMemberFromOrganizationInput(ctx context.Context, obj interface{}) (RemoveMemberFromOrganizationInput, error) {
	var it RemoveMemberFromOrganizationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"orgId", "userId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "orgId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
			it.OrgID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSinkBindingsCreateInput(ctx context.Context, obj interface{}) (SinkBindingsCreateInput, error) {
	var it SinkBindingsCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"sources"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "sources":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sources"))
			it.Sources, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSinkBindingsUpdateInput(ctx context.Context, obj interface{}) (SinkBindingsUpdateInput, error) {
	var it SinkBindingsUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"sources"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "sources":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sources"))
			it.Sources, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSocketSlackCreateInput(ctx context.Context, obj interface{}) (SocketSlackCreateInput, error) {
	var it SocketSlackCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "appToken", "botToken", "channels"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "appToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appToken"))
			it.AppToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "botToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botToken"))
			it.BotToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "channels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channels"))
			it.Channels, err = ec.unmarshalNChannelBindingsByNameCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameCreateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSocketSlackUpdateInput(ctx context.Context, obj interface{}) (SocketSlackUpdateInput, error) {
	var it SocketSlackUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "appToken", "botToken", "channels"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "appToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appToken"))
			it.AppToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "botToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("botToken"))
			it.BotToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "channels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channels"))
			it.Channels, err = ec.unmarshalNChannelBindingsByNameUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameUpdateInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSourceBindingPatchDeploymentConfigInput(ctx context.Context, obj interface{}) (SourceBindingPatchDeploymentConfigInput, error) {
	var it SourceBindingPatchDeploymentConfigInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"communicationGroupName", "platform", "channelAlias", "sourceBindings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "communicationGroupName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("communicationGroupName"))
			it.CommunicationGroupName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "platform":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			it.Platform, err = ec.unmarshalNBotPlatform2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotPlatform(ctx, v)
			if err != nil {
				return it, err
			}
		case "channelAlias":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("channelAlias"))
			it.ChannelAlias, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceBindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceBindings"))
			it.SourceBindings, err = ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWebhookCreateInput(ctx context.Context, obj interface{}) (WebhookCreateInput, error) {
	var it WebhookCreateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "url", "bindings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalNSinkBindingsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindingsCreateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWebhookUpdateInput(ctx context.Context, obj interface{}) (WebhookUpdateInput, error) {
	var it WebhookUpdateInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "name", "url", "bindings"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "bindings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bindings"))
			it.Bindings, err = ec.unmarshalNSinkBindingsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindingsUpdateInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _AuditEvent(ctx context.Context, sel ast.SelectionSet, obj AuditEvent) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case CommandExecutedEvent:
		return ec._CommandExecutedEvent(ctx, sel, &obj)
	case *CommandExecutedEvent:
		if obj == nil {
			return graphql.Null
		}
		return ec._CommandExecutedEvent(ctx, sel, obj)
	case SourceEventEmittedEvent:
		return ec._SourceEventEmittedEvent(ctx, sel, &obj)
	case *SourceEventEmittedEvent:
		if obj == nil {
			return graphql.Null
		}
		return ec._SourceEventEmittedEvent(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Pageable(ctx context.Context, sel ast.SelectionSet, obj Pageable) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case AuditEventPage:
		return ec._AuditEventPage(ctx, sel, &obj)
	case *AuditEventPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._AuditEventPage(ctx, sel, obj)
	case AliasPage:
		return ec._AliasPage(ctx, sel, &obj)
	case *AliasPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._AliasPage(ctx, sel, obj)
	case DeploymentPage:
		return ec._DeploymentPage(ctx, sel, &obj)
	case *DeploymentPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._DeploymentPage(ctx, sel, obj)
	case PluginPage:
		return ec._PluginPage(ctx, sel, &obj)
	case *PluginPage:
		if obj == nil {
			return graphql.Null
		}
		return ec._PluginPage(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var actionImplementors = []string{"Action"}

func (ec *executionContext) _Action(ctx context.Context, sel ast.SelectionSet, obj *Action) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Action")
		case "id":

			out.Values[i] = ec._Action_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Action_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._Action_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enabled":

			out.Values[i] = ec._Action_enabled(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "command":

			out.Values[i] = ec._Action_command(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bindings":

			out.Values[i] = ec._Action_bindings(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var actionBindingsImplementors = []string{"ActionBindings"}

func (ec *executionContext) _ActionBindings(ctx context.Context, sel ast.SelectionSet, obj *ActionBindings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionBindingsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ActionBindings")
		case "sources":

			out.Values[i] = ec._ActionBindings_sources(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "executors":

			out.Values[i] = ec._ActionBindings_executors(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var aliasImplementors = []string{"Alias"}

func (ec *executionContext) _Alias(ctx context.Context, sel ast.SelectionSet, obj *Alias) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aliasImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Alias")
		case "id":

			out.Values[i] = ec._Alias_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._Alias_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "displayName":

			out.Values[i] = ec._Alias_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "command":

			out.Values[i] = ec._Alias_command(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deployments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Alias_deployments(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var aliasPageImplementors = []string{"AliasPage", "Pageable"}

func (ec *executionContext) _AliasPage(ctx context.Context, sel ast.SelectionSet, obj *AliasPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, aliasPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AliasPage")
		case "data":

			out.Values[i] = ec._AliasPage_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._AliasPage_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._AliasPage_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalPages":

			out.Values[i] = ec._AliasPage_totalPages(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var apiKeyImplementors = []string{"ApiKey"}

func (ec *executionContext) _ApiKey(ctx context.Context, sel ast.SelectionSet, obj *APIKey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiKeyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiKey")
		case "name":

			out.Values[i] = ec._ApiKey_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._ApiKey_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var auditEventPageImplementors = []string{"AuditEventPage", "Pageable"}

func (ec *executionContext) _AuditEventPage(ctx context.Context, sel ast.SelectionSet, obj *AuditEventPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, auditEventPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuditEventPage")
		case "data":

			out.Values[i] = ec._AuditEventPage_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._AuditEventPage_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._AuditEventPage_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalPages":

			out.Values[i] = ec._AuditEventPage_totalPages(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var botBindingsImplementors = []string{"BotBindings"}

func (ec *executionContext) _BotBindings(ctx context.Context, sel ast.SelectionSet, obj *BotBindings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, botBindingsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BotBindings")
		case "sources":

			out.Values[i] = ec._BotBindings_sources(ctx, field, obj)

		case "executors":

			out.Values[i] = ec._BotBindings_executors(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var channelBindingsByIDImplementors = []string{"ChannelBindingsByID"}

func (ec *executionContext) _ChannelBindingsByID(ctx context.Context, sel ast.SelectionSet, obj *ChannelBindingsByID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelBindingsByIDImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelBindingsByID")
		case "id":

			out.Values[i] = ec._ChannelBindingsByID_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bindings":

			out.Values[i] = ec._ChannelBindingsByID_bindings(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notificationsDisabled":

			out.Values[i] = ec._ChannelBindingsByID_notificationsDisabled(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var channelBindingsByNameImplementors = []string{"ChannelBindingsByName"}

func (ec *executionContext) _ChannelBindingsByName(ctx context.Context, sel ast.SelectionSet, obj *ChannelBindingsByName) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, channelBindingsByNameImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChannelBindingsByName")
		case "name":

			out.Values[i] = ec._ChannelBindingsByName_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bindings":

			out.Values[i] = ec._ChannelBindingsByName_bindings(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notificationsDisabled":

			out.Values[i] = ec._ChannelBindingsByName_notificationsDisabled(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commandExecutedEventImplementors = []string{"CommandExecutedEvent", "AuditEvent"}

func (ec *executionContext) _CommandExecutedEvent(ctx context.Context, sel ast.SelectionSet, obj *CommandExecutedEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commandExecutedEventImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommandExecutedEvent")
		case "id":

			out.Values[i] = ec._CommandExecutedEvent_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":

			out.Values[i] = ec._CommandExecutedEvent_type(ctx, field, obj)

		case "platformUser":

			out.Values[i] = ec._CommandExecutedEvent_platformUser(ctx, field, obj)

		case "deploymentId":

			out.Values[i] = ec._CommandExecutedEvent_deploymentId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deployment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CommandExecutedEvent_deployment(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "createdAt":

			out.Values[i] = ec._CommandExecutedEvent_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "command":

			out.Values[i] = ec._CommandExecutedEvent_command(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "botPlatform":

			out.Values[i] = ec._CommandExecutedEvent_botPlatform(ctx, field, obj)

		case "channel":

			out.Values[i] = ec._CommandExecutedEvent_channel(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "pluginName":

			out.Values[i] = ec._CommandExecutedEvent_pluginName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deploymentImplementors = []string{"Deployment"}

func (ec *executionContext) _Deployment(ctx context.Context, sel ast.SelectionSet, obj *Deployment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deploymentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Deployment")
		case "id":

			out.Values[i] = ec._Deployment_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":

			out.Values[i] = ec._Deployment_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "actions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deployment_actions(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "plugins":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deployment_plugins(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "platforms":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deployment_platforms(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "status":

			out.Values[i] = ec._Deployment_status(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "apiKey":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deployment_apiKey(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "yamlConfig":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deployment_yamlConfig(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "aliases":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deployment_aliases(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "helmCommand":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Deployment_helmCommand(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "resourceVersion":

			out.Values[i] = ec._Deployment_resourceVersion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "heartbeat":

			out.Values[i] = ec._Deployment_heartbeat(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deploymentConfigImplementors = []string{"DeploymentConfig"}

func (ec *executionContext) _DeploymentConfig(ctx context.Context, sel ast.SelectionSet, obj *DeploymentConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deploymentConfigImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentConfig")
		case "resourceVersion":

			out.Values[i] = ec._DeploymentConfig_resourceVersion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._DeploymentConfig_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deploymentInfoImplementors = []string{"DeploymentInfo"}

func (ec *executionContext) _DeploymentInfo(ctx context.Context, sel ast.SelectionSet, obj *DeploymentInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deploymentInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentInfo")
		case "id":

			out.Values[i] = ec._DeploymentInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._DeploymentInfo_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deploymentPageImplementors = []string{"DeploymentPage", "Pageable"}

func (ec *executionContext) _DeploymentPage(ctx context.Context, sel ast.SelectionSet, obj *DeploymentPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deploymentPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentPage")
		case "data":

			out.Values[i] = ec._DeploymentPage_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._DeploymentPage_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._DeploymentPage_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deploymentStatusImplementors = []string{"DeploymentStatus"}

func (ec *executionContext) _DeploymentStatus(ctx context.Context, sel ast.SelectionSet, obj *DeploymentStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deploymentStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentStatus")
		case "phase":

			out.Values[i] = ec._DeploymentStatus_phase(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "message":

			out.Values[i] = ec._DeploymentStatus_message(ctx, field, obj)

		case "botkubeVersion":

			out.Values[i] = ec._DeploymentStatus_botkubeVersion(ctx, field, obj)

		case "upgrade":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._DeploymentStatus_upgrade(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "lastTransitionTime":

			out.Values[i] = ec._DeploymentStatus_lastTransitionTime(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deploymentUpgradeStatusImplementors = []string{"DeploymentUpgradeStatus"}

func (ec *executionContext) _DeploymentUpgradeStatus(ctx context.Context, sel ast.SelectionSet, obj *DeploymentUpgradeStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deploymentUpgradeStatusImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentUpgradeStatus")
		case "needsUpgrade":

			out.Values[i] = ec._DeploymentUpgradeStatus_needsUpgrade(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "targetBotkubeVersion":

			out.Values[i] = ec._DeploymentUpgradeStatus_targetBotkubeVersion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var discordImplementors = []string{"Discord"}

func (ec *executionContext) _Discord(ctx context.Context, sel ast.SelectionSet, obj *Discord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, discordImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Discord")
		case "id":

			out.Values[i] = ec._Discord_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Discord_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token":

			out.Values[i] = ec._Discord_token(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "botId":

			out.Values[i] = ec._Discord_botId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "channels":

			out.Values[i] = ec._Discord_channels(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var elasticsearchImplementors = []string{"Elasticsearch"}

func (ec *executionContext) _Elasticsearch(ctx context.Context, sel ast.SelectionSet, obj *Elasticsearch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, elasticsearchImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Elasticsearch")
		case "id":

			out.Values[i] = ec._Elasticsearch_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Elasticsearch_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "username":

			out.Values[i] = ec._Elasticsearch_username(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "password":

			out.Values[i] = ec._Elasticsearch_password(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "server":

			out.Values[i] = ec._Elasticsearch_server(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "skipTlsVerify":

			out.Values[i] = ec._Elasticsearch_skipTlsVerify(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "awsSigningRegion":

			out.Values[i] = ec._Elasticsearch_awsSigningRegion(ctx, field, obj)

		case "awsSigningRoleArn":

			out.Values[i] = ec._Elasticsearch_awsSigningRoleArn(ctx, field, obj)

		case "indices":

			out.Values[i] = ec._Elasticsearch_indices(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var elasticsearchIndexImplementors = []string{"ElasticsearchIndex"}

func (ec *executionContext) _ElasticsearchIndex(ctx context.Context, sel ast.SelectionSet, obj *ElasticsearchIndex) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, elasticsearchIndexImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElasticsearchIndex")
		case "id":

			out.Values[i] = ec._ElasticsearchIndex_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._ElasticsearchIndex_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._ElasticsearchIndex_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "shards":

			out.Values[i] = ec._ElasticsearchIndex_shards(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replicas":

			out.Values[i] = ec._ElasticsearchIndex_replicas(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bindings":

			out.Values[i] = ec._ElasticsearchIndex_bindings(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var heartbeatImplementors = []string{"Heartbeat"}

func (ec *executionContext) _Heartbeat(ctx context.Context, sel ast.SelectionSet, obj *Heartbeat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, heartbeatImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Heartbeat")
		case "nodeCount":

			out.Values[i] = ec._Heartbeat_nodeCount(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var invoiceImplementors = []string{"Invoice"}

func (ec *executionContext) _Invoice(ctx context.Context, sel ast.SelectionSet, obj *Invoice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoiceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Invoice")
		case "isOnTrial":

			out.Values[i] = ec._Invoice_isOnTrial(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upcomingAmount":

			out.Values[i] = ec._Invoice_upcomingAmount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currency":

			out.Values[i] = ec._Invoice_currency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endOfBillingCycleDate":

			out.Values[i] = ec._Invoice_endOfBillingCycleDate(ctx, field, obj)

		case "endOfTrialDate":

			out.Values[i] = ec._Invoice_endOfTrialDate(ctx, field, obj)

		case "items":

			out.Values[i] = ec._Invoice_items(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var invoiceItemImplementors = []string{"InvoiceItem"}

func (ec *executionContext) _InvoiceItem(ctx context.Context, sel ast.SelectionSet, obj *InvoiceItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoiceItemImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InvoiceItem")
		case "amount":

			out.Values[i] = ec._InvoiceItem_amount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priceUnitAmount":

			out.Values[i] = ec._InvoiceItem_priceUnitAmount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currency":

			out.Values[i] = ec._InvoiceItem_currency(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._InvoiceItem_description(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mattermostImplementors = []string{"Mattermost"}

func (ec *executionContext) _Mattermost(ctx context.Context, sel ast.SelectionSet, obj *Mattermost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mattermostImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mattermost")
		case "id":

			out.Values[i] = ec._Mattermost_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Mattermost_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "botName":

			out.Values[i] = ec._Mattermost_botName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":

			out.Values[i] = ec._Mattermost_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "token":

			out.Values[i] = ec._Mattermost_token(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "team":

			out.Values[i] = ec._Mattermost_team(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "channels":

			out.Values[i] = ec._Mattermost_channels(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var msTeamsImplementors = []string{"MsTeams"}

func (ec *executionContext) _MsTeams(ctx context.Context, sel ast.SelectionSet, obj *MsTeams) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, msTeamsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MsTeams")
		case "id":

			out.Values[i] = ec._MsTeams_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._MsTeams_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "botName":

			out.Values[i] = ec._MsTeams_botName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "appId":

			out.Values[i] = ec._MsTeams_appId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "appPassword":

			out.Values[i] = ec._MsTeams_appPassword(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "port":

			out.Values[i] = ec._MsTeams_port(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "messagePath":

			out.Values[i] = ec._MsTeams_messagePath(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notificationsDisabled":

			out.Values[i] = ec._MsTeams_notificationsDisabled(ctx, field, obj)

		case "bindings":

			out.Values[i] = ec._MsTeams_bindings(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAuditEvent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAuditEvent(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAlias":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createAlias(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAlias":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateAlias(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAlias":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAlias(ctx, field)
			})

		case "createDeployment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createDeployment(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDeployment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateDeployment(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDeployment":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteDeployment(ctx, field)
			})

		case "patchDeploymentConfig":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_patchDeploymentConfig(ctx, field)
			})

		case "regenerateDeploymentApiKey":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_regenerateDeploymentApiKey(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reportDeploymentStartup":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reportDeploymentStartup(ctx, field)
			})

		case "reportDeploymentShutdown":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reportDeploymentShutdown(ctx, field)
			})

		case "reportDeploymentFailure":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reportDeploymentFailure(ctx, field)
			})

		case "reportDeploymentHeartbeat":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_reportDeploymentHeartbeat(ctx, field)
			})

		case "createOrganization":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createOrganization(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganization":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateOrganization(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addMemberForOrganization":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addMemberForOrganization(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeMemberFromOrganization":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeMemberFromOrganization(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "generateCheckoutURL":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_generateCheckoutURL(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "generateBillingPortalURL":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_generateBillingPortalURL(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resendEmailVerification":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_resendEmailVerification(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationImplementors = []string{"Organization"}

func (ec *executionContext) _Organization(ctx context.Context, sel ast.SelectionSet, obj *Organization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organization")
		case "id":

			out.Values[i] = ec._Organization_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "displayName":

			out.Values[i] = ec._Organization_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "subscription":

			out.Values[i] = ec._Organization_subscription(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "ownerId":

			out.Values[i] = ec._Organization_ownerId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "owner":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_owner(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "members":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_members(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "quota":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_quota(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "billingHistoryAvailable":

			out.Values[i] = ec._Organization_billingHistoryAvailable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "updateOperations":

			out.Values[i] = ec._Organization_updateOperations(ctx, field, obj)

		case "usage":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Organization_usage(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationSubscriptionImplementors = []string{"OrganizationSubscription"}

func (ec *executionContext) _OrganizationSubscription(ctx context.Context, sel ast.SelectionSet, obj *OrganizationSubscription) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationSubscriptionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationSubscription")
		case "planName":

			out.Values[i] = ec._OrganizationSubscription_planName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "customerId":

			out.Values[i] = ec._OrganizationSubscription_customerId(ctx, field, obj)

		case "subscriptionId":

			out.Values[i] = ec._OrganizationSubscription_subscriptionId(ctx, field, obj)

		case "planDisplayName":

			out.Values[i] = ec._OrganizationSubscription_planDisplayName(ctx, field, obj)

		case "isDefaultPlan":

			out.Values[i] = ec._OrganizationSubscription_isDefaultPlan(ctx, field, obj)

		case "trialConsumed":

			out.Values[i] = ec._OrganizationSubscription_trialConsumed(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "invoice":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OrganizationSubscription_invoice(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationUpdateOperationsImplementors = []string{"OrganizationUpdateOperations"}

func (ec *executionContext) _OrganizationUpdateOperations(ctx context.Context, sel ast.SelectionSet, obj *OrganizationUpdateOperations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationUpdateOperationsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationUpdateOperations")
		case "blocked":

			out.Values[i] = ec._OrganizationUpdateOperations_blocked(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reasons":

			out.Values[i] = ec._OrganizationUpdateOperations_reasons(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "limit":

			out.Values[i] = ec._PageInfo_limit(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "offset":

			out.Values[i] = ec._PageInfo_offset(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasNextPage":

			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var platformsImplementors = []string{"Platforms"}

func (ec *executionContext) _Platforms(ctx context.Context, sel ast.SelectionSet, obj *Platforms) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, platformsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Platforms")
		case "socketSlacks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Platforms_socketSlacks(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "discords":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Platforms_discords(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "mattermosts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Platforms_mattermosts(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "webhooks":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Platforms_webhooks(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "msTeams":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Platforms_msTeams(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "elasticsearches":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Platforms_elasticsearches(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pluginImplementors = []string{"Plugin"}

func (ec *executionContext) _Plugin(ctx context.Context, sel ast.SelectionSet, obj *Plugin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pluginImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Plugin")
		case "id":

			out.Values[i] = ec._Plugin_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Plugin_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._Plugin_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._Plugin_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configurationName":

			out.Values[i] = ec._Plugin_configurationName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configuration":

			out.Values[i] = ec._Plugin_configuration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pluginPageImplementors = []string{"PluginPage", "Pageable"}

func (ec *executionContext) _PluginPage(ctx context.Context, sel ast.SelectionSet, obj *PluginPage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pluginPageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PluginPage")
		case "data":

			out.Values[i] = ec._PluginPage_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pageInfo":

			out.Values[i] = ec._PluginPage_pageInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":

			out.Values[i] = ec._PluginPage_totalCount(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pluginTemplateImplementors = []string{"PluginTemplate"}

func (ec *executionContext) _PluginTemplate(ctx context.Context, sel ast.SelectionSet, obj *PluginTemplate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pluginTemplateImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PluginTemplate")
		case "name":

			out.Values[i] = ec._PluginTemplate_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "title":

			out.Values[i] = ec._PluginTemplate_title(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":

			out.Values[i] = ec._PluginTemplate_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":

			out.Values[i] = ec._PluginTemplate_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "schema":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PluginTemplate_schema(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pluginTemplatePageImplementors = []string{"PluginTemplatePage"}

func (ec *executionContext) _PluginTemplatePage(ctx context.Context, sel ast.SelectionSet, obj *PluginTemplatePage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pluginTemplatePageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PluginTemplatePage")
		case "data":

			out.Values[i] = ec._PluginTemplatePage_data(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "auditEvents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_auditEvents(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "aliases":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_aliases(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "deployments":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deployments(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "deployment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deployment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "pluginTemplates":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pluginTemplates(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "pluginTemplate":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_pluginTemplate(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "organizations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizations(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "organization":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organization(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "subscriptionPlans":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_subscriptionPlans(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var quotaImplementors = []string{"Quota"}

func (ec *executionContext) _Quota(ctx context.Context, sel ast.SelectionSet, obj *Quota) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, quotaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Quota")
		case "deploymentCount":

			out.Values[i] = ec._Quota_deploymentCount(ctx, field, obj)

		case "auditRetentionPeriod":

			out.Values[i] = ec._Quota_auditRetentionPeriod(ctx, field, obj)

		case "memberCount":

			out.Values[i] = ec._Quota_memberCount(ctx, field, obj)

		case "nodeCount":

			out.Values[i] = ec._Quota_nodeCount(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sinkBindingsImplementors = []string{"SinkBindings"}

func (ec *executionContext) _SinkBindings(ctx context.Context, sel ast.SelectionSet, obj *SinkBindings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sinkBindingsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SinkBindings")
		case "sources":

			out.Values[i] = ec._SinkBindings_sources(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var socketSlackImplementors = []string{"SocketSlack"}

func (ec *executionContext) _SocketSlack(ctx context.Context, sel ast.SelectionSet, obj *SocketSlack) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, socketSlackImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SocketSlack")
		case "id":

			out.Values[i] = ec._SocketSlack_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._SocketSlack_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "appToken":

			out.Values[i] = ec._SocketSlack_appToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "botToken":

			out.Values[i] = ec._SocketSlack_botToken(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "channels":

			out.Values[i] = ec._SocketSlack_channels(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sourceEventDetailsImplementors = []string{"SourceEventDetails"}

func (ec *executionContext) _SourceEventDetails(ctx context.Context, sel ast.SelectionSet, obj *SourceEventDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sourceEventDetailsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SourceEventDetails")
		case "name":

			out.Values[i] = ec._SourceEventDetails_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._SourceEventDetails_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sourceEventEmittedEventImplementors = []string{"SourceEventEmittedEvent", "AuditEvent"}

func (ec *executionContext) _SourceEventEmittedEvent(ctx context.Context, sel ast.SelectionSet, obj *SourceEventEmittedEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sourceEventEmittedEventImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SourceEventEmittedEvent")
		case "id":

			out.Values[i] = ec._SourceEventEmittedEvent_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "type":

			out.Values[i] = ec._SourceEventEmittedEvent_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deploymentId":

			out.Values[i] = ec._SourceEventEmittedEvent_deploymentId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deployment":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SourceEventEmittedEvent_deployment(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "createdAt":

			out.Values[i] = ec._SourceEventEmittedEvent_createdAt(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "event":

			out.Values[i] = ec._SourceEventEmittedEvent_event(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "source":

			out.Values[i] = ec._SourceEventEmittedEvent_source(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "pluginName":

			out.Values[i] = ec._SourceEventEmittedEvent_pluginName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionPlanImplementors = []string{"SubscriptionPlan"}

func (ec *executionContext) _SubscriptionPlan(ctx context.Context, sel ast.SelectionSet, obj *SubscriptionPlan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionPlanImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubscriptionPlan")
		case "name":

			out.Values[i] = ec._SubscriptionPlan_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._SubscriptionPlan_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDefault":

			out.Values[i] = ec._SubscriptionPlan_isDefault(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayUnitPrice":

			out.Values[i] = ec._SubscriptionPlan_displayUnitPrice(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "trialPeriodDays":

			out.Values[i] = ec._SubscriptionPlan_trialPeriodDays(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var usageImplementors = []string{"Usage"}

func (ec *executionContext) _Usage(ctx context.Context, sel ast.SelectionSet, obj *Usage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, usageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Usage")
		case "deploymentCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Usage_deploymentCount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "memberCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Usage_memberCount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		case "nodeCount":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Usage_nodeCount(ctx, field, obj)
				return res
			}

			out.Concurrently(i, func(innerCtx context.Context) graphql.Marshaler {
				return innerFunc(innerCtx)

			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":

			out.Values[i] = ec._User_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":

			out.Values[i] = ec._User_email(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var webhookImplementors = []string{"Webhook"}

func (ec *executionContext) _Webhook(ctx context.Context, sel ast.SelectionSet, obj *Webhook) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, webhookImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Webhook")
		case "id":

			out.Values[i] = ec._Webhook_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Webhook_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":

			out.Values[i] = ec._Webhook_url(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bindings":

			out.Values[i] = ec._Webhook_bindings(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAction2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionᚄ(ctx context.Context, sel ast.SelectionSet, v []*Action) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAction2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAction2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAction(ctx context.Context, sel ast.SelectionSet, v *Action) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Action(ctx, sel, v)
}

func (ec *executionContext) marshalNActionBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionBindings(ctx context.Context, sel ast.SelectionSet, v *ActionBindings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ActionBindings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNActionCreateUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionCreateUpdateInputᚄ(ctx context.Context, v interface{}) ([]*ActionCreateUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ActionCreateUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNActionCreateUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionCreateUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNActionCreateUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionCreateUpdateInput(ctx context.Context, v interface{}) (*ActionCreateUpdateInput, error) {
	res, err := ec.unmarshalInputActionCreateUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNActionCreateUpdateInputBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionCreateUpdateInputBindings(ctx context.Context, v interface{}) (*ActionCreateUpdateInputBindings, error) {
	res, err := ec.unmarshalInputActionCreateUpdateInputBindings(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAddMemberForOrganizationInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAddMemberForOrganizationInput(ctx context.Context, v interface{}) (AddMemberForOrganizationInput, error) {
	res, err := ec.unmarshalInputAddMemberForOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAlias2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAlias(ctx context.Context, sel ast.SelectionSet, v Alias) graphql.Marshaler {
	return ec._Alias(ctx, sel, &v)
}

func (ec *executionContext) marshalNAlias2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasᚄ(ctx context.Context, sel ast.SelectionSet, v []*Alias) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlias2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAlias(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAlias2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAlias(ctx context.Context, sel ast.SelectionSet, v *Alias) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Alias(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAliasCreateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasCreateInput(ctx context.Context, v interface{}) (AliasCreateInput, error) {
	res, err := ec.unmarshalInputAliasCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAliasPage2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasPage(ctx context.Context, sel ast.SelectionSet, v AliasPage) graphql.Marshaler {
	return ec._AliasPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNAliasPage2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasPage(ctx context.Context, sel ast.SelectionSet, v *AliasPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AliasPage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAliasUpdateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasUpdateInput(ctx context.Context, v interface{}) (AliasUpdateInput, error) {
	res, err := ec.unmarshalInputAliasUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNApiKey2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAPIKey(ctx context.Context, sel ast.SelectionSet, v APIKey) graphql.Marshaler {
	return ec._ApiKey(ctx, sel, &v)
}

func (ec *executionContext) marshalNApiKey2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAPIKey(ctx context.Context, sel ast.SelectionSet, v *APIKey) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ApiKey(ctx, sel, v)
}

func (ec *executionContext) marshalNAuditEvent2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEvent(ctx context.Context, sel ast.SelectionSet, v AuditEvent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditEvent(ctx, sel, v)
}

func (ec *executionContext) marshalNAuditEvent2ᚕgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventᚄ(ctx context.Context, sel ast.SelectionSet, v []AuditEvent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuditEvent2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNAuditEventCreateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventCreateInput(ctx context.Context, v interface{}) (AuditEventCreateInput, error) {
	res, err := ec.unmarshalInputAuditEventCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuditEventPage2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventPage(ctx context.Context, sel ast.SelectionSet, v AuditEventPage) graphql.Marshaler {
	return ec._AuditEventPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuditEventPage2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventPage(ctx context.Context, sel ast.SelectionSet, v *AuditEventPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuditEventPage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuditEventType2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventType(ctx context.Context, v interface{}) (AuditEventType, error) {
	var res AuditEventType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuditEventType2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventType(ctx context.Context, sel ast.SelectionSet, v AuditEventType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNBotBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindings(ctx context.Context, sel ast.SelectionSet, v *BotBindings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._BotBindings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBotBindingsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindingsCreateInput(ctx context.Context, v interface{}) (*BotBindingsCreateInput, error) {
	res, err := ec.unmarshalInputBotBindingsCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBotBindingsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotBindingsUpdateInput(ctx context.Context, v interface{}) (*BotBindingsUpdateInput, error) {
	res, err := ec.unmarshalInputBotBindingsUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBotPlatform2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotPlatform(ctx context.Context, v interface{}) (BotPlatform, error) {
	var res BotPlatform
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBotPlatform2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotPlatform(ctx context.Context, sel ast.SelectionSet, v BotPlatform) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNChannelBindingsByID2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByIDᚄ(ctx context.Context, sel ast.SelectionSet, v []*ChannelBindingsByID) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChannelBindingsByID2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByID(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChannelBindingsByID2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByID(ctx context.Context, sel ast.SelectionSet, v *ChannelBindingsByID) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChannelBindingsByID(ctx, sel, v)
}

func (ec *executionContext) unmarshalNChannelBindingsByIDCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByIDCreateInputᚄ(ctx context.Context, v interface{}) ([]*ChannelBindingsByIDCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ChannelBindingsByIDCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChannelBindingsByIDCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByIDCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNChannelBindingsByIDCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByIDCreateInput(ctx context.Context, v interface{}) (*ChannelBindingsByIDCreateInput, error) {
	res, err := ec.unmarshalInputChannelBindingsByIDCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNChannelBindingsByIDUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByIDUpdateInputᚄ(ctx context.Context, v interface{}) ([]*ChannelBindingsByIDUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ChannelBindingsByIDUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChannelBindingsByIDUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByIDUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNChannelBindingsByIDUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByIDUpdateInput(ctx context.Context, v interface{}) (*ChannelBindingsByIDUpdateInput, error) {
	res, err := ec.unmarshalInputChannelBindingsByIDUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNChannelBindingsByName2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameᚄ(ctx context.Context, sel ast.SelectionSet, v []*ChannelBindingsByName) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChannelBindingsByName2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByName(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNChannelBindingsByName2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByName(ctx context.Context, sel ast.SelectionSet, v *ChannelBindingsByName) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ChannelBindingsByName(ctx, sel, v)
}

func (ec *executionContext) unmarshalNChannelBindingsByNameCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameCreateInputᚄ(ctx context.Context, v interface{}) ([]*ChannelBindingsByNameCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ChannelBindingsByNameCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChannelBindingsByNameCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNChannelBindingsByNameCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameCreateInput(ctx context.Context, v interface{}) (*ChannelBindingsByNameCreateInput, error) {
	res, err := ec.unmarshalInputChannelBindingsByNameCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNChannelBindingsByNameUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameUpdateInputᚄ(ctx context.Context, v interface{}) ([]*ChannelBindingsByNameUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ChannelBindingsByNameUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNChannelBindingsByNameUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNChannelBindingsByNameUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐChannelBindingsByNameUpdateInput(ctx context.Context, v interface{}) (*ChannelBindingsByNameUpdateInput, error) {
	res, err := ec.unmarshalInputChannelBindingsByNameUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeployment2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeployment(ctx context.Context, sel ast.SelectionSet, v Deployment) graphql.Marshaler {
	return ec._Deployment(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeployment2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentᚄ(ctx context.Context, sel ast.SelectionSet, v []*Deployment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeployment2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeployment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeployment2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeployment(ctx context.Context, sel ast.SelectionSet, v *Deployment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Deployment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeploymentCreateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentCreateInput(ctx context.Context, v interface{}) (DeploymentCreateInput, error) {
	res, err := ec.unmarshalInputDeploymentCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeploymentFailureInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentFailureInput(ctx context.Context, v interface{}) (DeploymentFailureInput, error) {
	res, err := ec.unmarshalInputDeploymentFailureInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeploymentHeartbeatInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentHeartbeatInput(ctx context.Context, v interface{}) (DeploymentHeartbeatInput, error) {
	res, err := ec.unmarshalInputDeploymentHeartbeatInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeploymentInfo2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*DeploymentInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeploymentInfo2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDeploymentInfo2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentInfo(ctx context.Context, sel ast.SelectionSet, v *DeploymentInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeploymentInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNDeploymentPage2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentPage(ctx context.Context, sel ast.SelectionSet, v DeploymentPage) graphql.Marshaler {
	return ec._DeploymentPage(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeploymentPage2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentPage(ctx context.Context, sel ast.SelectionSet, v *DeploymentPage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeploymentPage(ctx, sel, v)
}

func (ec *executionContext) marshalNDeploymentStatus2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentStatus(ctx context.Context, sel ast.SelectionSet, v *DeploymentStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeploymentStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeploymentStatusPhase2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentStatusPhase(ctx context.Context, v interface{}) (DeploymentStatusPhase, error) {
	var res DeploymentStatusPhase
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeploymentStatusPhase2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentStatusPhase(ctx context.Context, sel ast.SelectionSet, v DeploymentStatusPhase) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNDeploymentUpdateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentUpdateInput(ctx context.Context, v interface{}) (DeploymentUpdateInput, error) {
	res, err := ec.unmarshalInputDeploymentUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDiscord2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscord(ctx context.Context, sel ast.SelectionSet, v *Discord) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Discord(ctx, sel, v)
}

func (ec *executionContext) marshalNElasticsearch2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearch(ctx context.Context, sel ast.SelectionSet, v *Elasticsearch) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Elasticsearch(ctx, sel, v)
}

func (ec *executionContext) marshalNElasticsearchIndex2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndexᚄ(ctx context.Context, sel ast.SelectionSet, v []*ElasticsearchIndex) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNElasticsearchIndex2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndex(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNElasticsearchIndex2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndex(ctx context.Context, sel ast.SelectionSet, v *ElasticsearchIndex) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ElasticsearchIndex(ctx, sel, v)
}

func (ec *executionContext) unmarshalNElasticsearchIndexCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndexCreateInputᚄ(ctx context.Context, v interface{}) ([]*ElasticsearchIndexCreateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ElasticsearchIndexCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNElasticsearchIndexCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndexCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNElasticsearchIndexCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndexCreateInput(ctx context.Context, v interface{}) (*ElasticsearchIndexCreateInput, error) {
	res, err := ec.unmarshalInputElasticsearchIndexCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNElasticsearchIndexUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndexUpdateInputᚄ(ctx context.Context, v interface{}) ([]*ElasticsearchIndexUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ElasticsearchIndexUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNElasticsearchIndexUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndexUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNElasticsearchIndexUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchIndexUpdateInput(ctx context.Context, v interface{}) (*ElasticsearchIndexUpdateInput, error) {
	res, err := ec.unmarshalInputElasticsearchIndexUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNInvoiceItem2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐInvoiceItemᚄ(ctx context.Context, sel ast.SelectionSet, v []*InvoiceItem) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInvoiceItem2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐInvoiceItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNInvoiceItem2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐInvoiceItem(ctx context.Context, sel ast.SelectionSet, v *InvoiceItem) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._InvoiceItem(ctx, sel, v)
}

func (ec *executionContext) marshalNMattermost2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermost(ctx context.Context, sel ast.SelectionSet, v *Mattermost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Mattermost(ctx, sel, v)
}

func (ec *executionContext) marshalNMsTeams2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeams(ctx context.Context, sel ast.SelectionSet, v *MsTeams) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MsTeams(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganization2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganization(ctx context.Context, sel ast.SelectionSet, v Organization) graphql.Marshaler {
	return ec._Organization(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganization2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganization(ctx context.Context, sel ast.SelectionSet, v *Organization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Organization(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationCreateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganizationCreateInput(ctx context.Context, v interface{}) (OrganizationCreateInput, error) {
	res, err := ec.unmarshalInputOrganizationCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganizationSubscription2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganizationSubscription(ctx context.Context, sel ast.SelectionSet, v *OrganizationSubscription) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OrganizationSubscription(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOrganizationUpdateInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganizationUpdateInput(ctx context.Context, v interface{}) (OrganizationUpdateInput, error) {
	res, err := ec.unmarshalInputOrganizationUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPageInfo2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v *PageInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PageInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPatchDeploymentConfigInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPatchDeploymentConfigInput(ctx context.Context, v interface{}) (PatchDeploymentConfigInput, error) {
	res, err := ec.unmarshalInputPatchDeploymentConfigInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlatforms2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPlatforms(ctx context.Context, sel ast.SelectionSet, v Platforms) graphql.Marshaler {
	return ec._Platforms(ctx, sel, &v)
}

func (ec *executionContext) marshalNPlatforms2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPlatforms(ctx context.Context, sel ast.SelectionSet, v *Platforms) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Platforms(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPlatformsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPlatformsCreateInput(ctx context.Context, v interface{}) (*PlatformsCreateInput, error) {
	res, err := ec.unmarshalInputPlatformsCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPlatformsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPlatformsUpdateInput(ctx context.Context, v interface{}) (*PlatformsUpdateInput, error) {
	res, err := ec.unmarshalInputPlatformsUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPlugin2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginᚄ(ctx context.Context, sel ast.SelectionSet, v []*Plugin) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPlugin2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPlugin(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPlugin2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPlugin(ctx context.Context, sel ast.SelectionSet, v *Plugin) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Plugin(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPluginConfigurationGroupInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationGroupInputᚄ(ctx context.Context, v interface{}) ([]*PluginConfigurationGroupInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*PluginConfigurationGroupInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPluginConfigurationGroupInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationGroupInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPluginConfigurationGroupInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationGroupInput(ctx context.Context, v interface{}) (*PluginConfigurationGroupInput, error) {
	res, err := ec.unmarshalInputPluginConfigurationGroupInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPluginConfigurationGroupUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationGroupUpdateInputᚄ(ctx context.Context, v interface{}) ([]*PluginConfigurationGroupUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*PluginConfigurationGroupUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPluginConfigurationGroupUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationGroupUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPluginConfigurationGroupUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationGroupUpdateInput(ctx context.Context, v interface{}) (*PluginConfigurationGroupUpdateInput, error) {
	res, err := ec.unmarshalInputPluginConfigurationGroupUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPluginConfigurationInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationInputᚄ(ctx context.Context, v interface{}) ([]*PluginConfigurationInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*PluginConfigurationInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPluginConfigurationInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPluginConfigurationInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginConfigurationInput(ctx context.Context, v interface{}) (*PluginConfigurationInput, error) {
	res, err := ec.unmarshalInputPluginConfigurationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPluginTemplate2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginTemplateᚄ(ctx context.Context, sel ast.SelectionSet, v []*PluginTemplate) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPluginTemplate2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginTemplate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPluginTemplate2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginTemplate(ctx context.Context, sel ast.SelectionSet, v *PluginTemplate) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PluginTemplate(ctx, sel, v)
}

func (ec *executionContext) marshalNPluginTemplatePage2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginTemplatePage(ctx context.Context, sel ast.SelectionSet, v PluginTemplatePage) graphql.Marshaler {
	return ec._PluginTemplatePage(ctx, sel, &v)
}

func (ec *executionContext) marshalNPluginTemplatePage2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginTemplatePage(ctx context.Context, sel ast.SelectionSet, v *PluginTemplatePage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._PluginTemplatePage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPluginType2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginType(ctx context.Context, v interface{}) (PluginType, error) {
	var res PluginType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPluginType2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginType(ctx context.Context, sel ast.SelectionSet, v PluginType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPluginsUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginsUpdateInputᚄ(ctx context.Context, v interface{}) ([]*PluginsUpdateInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*PluginsUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPluginsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginsUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNPluginsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginsUpdateInput(ctx context.Context, v interface{}) (*PluginsUpdateInput, error) {
	res, err := ec.unmarshalInputPluginsUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRemoveMemberFromOrganizationInput2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐRemoveMemberFromOrganizationInput(ctx context.Context, v interface{}) (RemoveMemberFromOrganizationInput, error) {
	res, err := ec.unmarshalInputRemoveMemberFromOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSinkBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindings(ctx context.Context, sel ast.SelectionSet, v *SinkBindings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SinkBindings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSinkBindingsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindingsCreateInput(ctx context.Context, v interface{}) (*SinkBindingsCreateInput, error) {
	res, err := ec.unmarshalInputSinkBindingsCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNSinkBindingsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindingsUpdateInput(ctx context.Context, v interface{}) (*SinkBindingsUpdateInput, error) {
	res, err := ec.unmarshalInputSinkBindingsUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSocketSlack2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlack(ctx context.Context, sel ast.SelectionSet, v *SocketSlack) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SocketSlack(ctx, sel, v)
}

func (ec *executionContext) marshalNSourceEventDetails2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSourceEventDetails(ctx context.Context, sel ast.SelectionSet, v *SourceEventDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SourceEventDetails(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSubscriptionPlan2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSubscriptionPlanᚄ(ctx context.Context, sel ast.SelectionSet, v []*SubscriptionPlan) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubscriptionPlan2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSubscriptionPlan(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSubscriptionPlan2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSubscriptionPlan(ctx context.Context, sel ast.SelectionSet, v *SubscriptionPlan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubscriptionPlan(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTimestamp2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTimestamp2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2githubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐUser(ctx context.Context, sel ast.SelectionSet, v User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐUser(ctx context.Context, sel ast.SelectionSet, v *User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNWebhook2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhook(ctx context.Context, sel ast.SelectionSet, v *Webhook) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Webhook(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOActionCreateUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionCreateUpdateInputᚄ(ctx context.Context, v interface{}) ([]*ActionCreateUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ActionCreateUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNActionCreateUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionCreateUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOActionPatchDeploymentConfigInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐActionPatchDeploymentConfigInput(ctx context.Context, v interface{}) (*ActionPatchDeploymentConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputActionPatchDeploymentConfigInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAlias2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAliasᚄ(ctx context.Context, sel ast.SelectionSet, v []*Alias) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlias2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAlias(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOAny2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAny2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	return res
}

func (ec *executionContext) marshalOApiKey2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAPIKey(ctx context.Context, sel ast.SelectionSet, v *APIKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiKey(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAuditEventCommandCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventCommandCreateInput(ctx context.Context, v interface{}) (*AuditEventCommandCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuditEventCommandCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAuditEventFilter2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventFilter(ctx context.Context, v interface{}) (*AuditEventFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuditEventFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAuditEventSourceCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventSourceCreateInput(ctx context.Context, v interface{}) (*AuditEventSourceCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuditEventSourceCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAuditEventSourceDetailsInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventSourceDetailsInput(ctx context.Context, v interface{}) (*AuditEventSourceDetailsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAuditEventSourceDetailsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAuditEventType2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventType(ctx context.Context, v interface{}) (*AuditEventType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(AuditEventType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAuditEventType2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐAuditEventType(ctx context.Context, sel ast.SelectionSet, v *AuditEventType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOBotPlatform2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotPlatform(ctx context.Context, v interface{}) (*BotPlatform, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(BotPlatform)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBotPlatform2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐBotPlatform(ctx context.Context, sel ast.SelectionSet, v *BotPlatform) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODeployment2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeployment(ctx context.Context, sel ast.SelectionSet, v *Deployment) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Deployment(ctx, sel, v)
}

func (ec *executionContext) unmarshalODeploymentStatusPhase2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentStatusPhase(ctx context.Context, v interface{}) (*DeploymentStatusPhase, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(DeploymentStatusPhase)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeploymentStatusPhase2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentStatusPhase(ctx context.Context, sel ast.SelectionSet, v *DeploymentStatusPhase) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODeploymentUpgradeStatus2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDeploymentUpgradeStatus(ctx context.Context, sel ast.SelectionSet, v *DeploymentUpgradeStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeploymentUpgradeStatus(ctx, sel, v)
}

func (ec *executionContext) marshalODiscord2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscordᚄ(ctx context.Context, sel ast.SelectionSet, v []*Discord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDiscord2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODiscordCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscordCreateInput(ctx context.Context, v interface{}) ([]*DiscordCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*DiscordCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODiscordCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscordCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODiscordCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscordCreateInput(ctx context.Context, v interface{}) (*DiscordCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDiscordCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODiscordUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscordUpdateInput(ctx context.Context, v interface{}) ([]*DiscordUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*DiscordUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODiscordUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscordUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODiscordUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐDiscordUpdateInput(ctx context.Context, v interface{}) (*DiscordUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDiscordUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOElasticsearch2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchᚄ(ctx context.Context, sel ast.SelectionSet, v []*Elasticsearch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNElasticsearch2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOElasticsearchCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchCreateInput(ctx context.Context, v interface{}) ([]*ElasticsearchCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ElasticsearchCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOElasticsearchCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOElasticsearchCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchCreateInput(ctx context.Context, v interface{}) (*ElasticsearchCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputElasticsearchCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOElasticsearchUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchUpdateInput(ctx context.Context, v interface{}) ([]*ElasticsearchUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*ElasticsearchUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOElasticsearchUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOElasticsearchUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐElasticsearchUpdateInput(ctx context.Context, v interface{}) (*ElasticsearchUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputElasticsearchUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHeartbeat2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐHeartbeat(ctx context.Context, sel ast.SelectionSet, v *Heartbeat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Heartbeat(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOInvoice2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐInvoice(ctx context.Context, sel ast.SelectionSet, v *Invoice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Invoice(ctx, sel, v)
}

func (ec *executionContext) marshalOMattermost2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermostᚄ(ctx context.Context, sel ast.SelectionSet, v []*Mattermost) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMattermost2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOMattermostCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermostCreateInput(ctx context.Context, v interface{}) ([]*MattermostCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*MattermostCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMattermostCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermostCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMattermostCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermostCreateInput(ctx context.Context, v interface{}) (*MattermostCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMattermostCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMattermostUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermostUpdateInput(ctx context.Context, v interface{}) ([]*MattermostUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*MattermostUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMattermostUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermostUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMattermostUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMattermostUpdateInput(ctx context.Context, v interface{}) (*MattermostUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMattermostUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMsTeams2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeamsᚄ(ctx context.Context, sel ast.SelectionSet, v []*MsTeams) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMsTeams2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeams(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOMsTeamsCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeamsCreateInput(ctx context.Context, v interface{}) ([]*MsTeamsCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*MsTeamsCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMsTeamsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeamsCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMsTeamsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeamsCreateInput(ctx context.Context, v interface{}) (*MsTeamsCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMsTeamsCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOMsTeamsUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeamsUpdateInput(ctx context.Context, v interface{}) ([]*MsTeamsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*MsTeamsUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMsTeamsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeamsUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOMsTeamsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐMsTeamsUpdateInput(ctx context.Context, v interface{}) (*MsTeamsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMsTeamsUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalONotificationPatchDeploymentConfigInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐNotificationPatchDeploymentConfigInput(ctx context.Context, v interface{}) (*NotificationPatchDeploymentConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNotificationPatchDeploymentConfigInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrganization2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganizationᚄ(ctx context.Context, sel ast.SelectionSet, v []*Organization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganization2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOOrganizationUpdateOperations2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐOrganizationUpdateOperations(ctx context.Context, sel ast.SelectionSet, v *OrganizationUpdateOperations) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationUpdateOperations(ctx, sel, v)
}

func (ec *executionContext) marshalOPluginTemplate2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginTemplate(ctx context.Context, sel ast.SelectionSet, v *PluginTemplate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PluginTemplate(ctx, sel, v)
}

func (ec *executionContext) unmarshalOPluginsCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginsCreateInput(ctx context.Context, v interface{}) ([]*PluginsCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*PluginsCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOPluginsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginsCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPluginsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐPluginsCreateInput(ctx context.Context, v interface{}) (*PluginsCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPluginsCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOQuota2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐQuota(ctx context.Context, sel ast.SelectionSet, v *Quota) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Quota(ctx, sel, v)
}

func (ec *executionContext) marshalOSinkBindings2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindings(ctx context.Context, sel ast.SelectionSet, v *SinkBindings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SinkBindings(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSinkBindingsCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindingsCreateInput(ctx context.Context, v interface{}) (*SinkBindingsCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSinkBindingsCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSinkBindingsUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSinkBindingsUpdateInput(ctx context.Context, v interface{}) (*SinkBindingsUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSinkBindingsUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSocketSlack2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlackᚄ(ctx context.Context, sel ast.SelectionSet, v []*SocketSlack) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSocketSlack2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlack(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOSocketSlackCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlackCreateInput(ctx context.Context, v interface{}) ([]*SocketSlackCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*SocketSlackCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSocketSlackCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlackCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSocketSlackCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlackCreateInput(ctx context.Context, v interface{}) (*SocketSlackCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSocketSlackCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSocketSlackUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlackUpdateInput(ctx context.Context, v interface{}) ([]*SocketSlackUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*SocketSlackUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSocketSlackUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlackUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSocketSlackUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSocketSlackUpdateInput(ctx context.Context, v interface{}) (*SocketSlackUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSocketSlackUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSourceBindingPatchDeploymentConfigInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐSourceBindingPatchDeploymentConfigInput(ctx context.Context, v interface{}) (*SourceBindingPatchDeploymentConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSourceBindingPatchDeploymentConfigInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTimestamp2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTimestamp2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOUsage2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐUsage(ctx context.Context, sel ast.SelectionSet, v *Usage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Usage(ctx, sel, v)
}

func (ec *executionContext) marshalOWebhook2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhookᚄ(ctx context.Context, sel ast.SelectionSet, v []*Webhook) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWebhook2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhook(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOWebhookCreateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhookCreateInput(ctx context.Context, v interface{}) ([]*WebhookCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*WebhookCreateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOWebhookCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhookCreateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWebhookCreateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhookCreateInput(ctx context.Context, v interface{}) (*WebhookCreateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWebhookCreateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOWebhookUpdateInput2ᚕᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhookUpdateInput(ctx context.Context, v interface{}) ([]*WebhookUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*WebhookUpdateInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOWebhookUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhookUpdateInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOWebhookUpdateInput2ᚖgithubᚗcomᚋkubeshopᚋbotkubeᚑcloudᚋbotkubeᚑcloudᚑbackendᚋpkgᚋgraphqlᚐWebhookUpdateInput(ctx context.Context, v interface{}) (*WebhookUpdateInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWebhookUpdateInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
