// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: cloud_teams.proto

package cloudteams

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudTeams_StreamActivity_FullMethodName = "/cloudteams.CloudTeams/StreamActivity"
)

// CloudTeamsClient is the client API for CloudTeams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudTeamsClient interface {
	StreamActivity(ctx context.Context, opts ...grpc.CallOption) (CloudTeams_StreamActivityClient, error)
}

type cloudTeamsClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudTeamsClient(cc grpc.ClientConnInterface) CloudTeamsClient {
	return &cloudTeamsClient{cc}
}

func (c *cloudTeamsClient) StreamActivity(ctx context.Context, opts ...grpc.CallOption) (CloudTeams_StreamActivityClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudTeams_ServiceDesc.Streams[0], CloudTeams_StreamActivity_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudTeamsStreamActivityClient{stream}
	return x, nil
}

type CloudTeams_StreamActivityClient interface {
	Send(*AgentActivity) error
	Recv() (*CloudActivity, error)
	grpc.ClientStream
}

type cloudTeamsStreamActivityClient struct {
	grpc.ClientStream
}

func (x *cloudTeamsStreamActivityClient) Send(m *AgentActivity) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudTeamsStreamActivityClient) Recv() (*CloudActivity, error) {
	m := new(CloudActivity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudTeamsServer is the server API for CloudTeams service.
// All implementations must embed UnimplementedCloudTeamsServer
// for forward compatibility
type CloudTeamsServer interface {
	StreamActivity(CloudTeams_StreamActivityServer) error
	mustEmbedUnimplementedCloudTeamsServer()
}

// UnimplementedCloudTeamsServer must be embedded to have forward compatible implementations.
type UnimplementedCloudTeamsServer struct {
}

func (UnimplementedCloudTeamsServer) StreamActivity(CloudTeams_StreamActivityServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamActivity not implemented")
}
func (UnimplementedCloudTeamsServer) mustEmbedUnimplementedCloudTeamsServer() {}

// UnsafeCloudTeamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudTeamsServer will
// result in compilation errors.
type UnsafeCloudTeamsServer interface {
	mustEmbedUnimplementedCloudTeamsServer()
}

func RegisterCloudTeamsServer(s grpc.ServiceRegistrar, srv CloudTeamsServer) {
	s.RegisterService(&CloudTeams_ServiceDesc, srv)
}

func _CloudTeams_StreamActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudTeamsServer).StreamActivity(&cloudTeamsStreamActivityServer{stream})
}

type CloudTeams_StreamActivityServer interface {
	Send(*CloudActivity) error
	Recv() (*AgentActivity, error)
	grpc.ServerStream
}

type cloudTeamsStreamActivityServer struct {
	grpc.ServerStream
}

func (x *cloudTeamsStreamActivityServer) Send(m *CloudActivity) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudTeamsStreamActivityServer) Recv() (*AgentActivity, error) {
	m := new(AgentActivity)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudTeams_ServiceDesc is the grpc.ServiceDesc for CloudTeams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudTeams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudteams.CloudTeams",
	HandlerType: (*CloudTeamsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamActivity",
			Handler:       _CloudTeams_StreamActivity_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cloud_teams.proto",
}
