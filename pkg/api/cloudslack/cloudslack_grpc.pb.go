// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.0
// source: cloudslack.proto

package cloudslack

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudSlack_Connect_FullMethodName = "/cloudslack.CloudSlack/Connect"
)

// CloudSlackClient is the client API for CloudSlack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudSlackClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (CloudSlack_ConnectClient, error)
}

type cloudSlackClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudSlackClient(cc grpc.ClientConnInterface) CloudSlackClient {
	return &cloudSlackClient{cc}
}

func (c *cloudSlackClient) Connect(ctx context.Context, opts ...grpc.CallOption) (CloudSlack_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudSlack_ServiceDesc.Streams[0], CloudSlack_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudSlackConnectClient{stream}
	return x, nil
}

type CloudSlack_ConnectClient interface {
	Send(*ConnectRequest) error
	Recv() (*ConnectResponse, error)
	grpc.ClientStream
}

type cloudSlackConnectClient struct {
	grpc.ClientStream
}

func (x *cloudSlackConnectClient) Send(m *ConnectRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudSlackConnectClient) Recv() (*ConnectResponse, error) {
	m := new(ConnectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudSlackServer is the server API for CloudSlack service.
// All implementations must embed UnimplementedCloudSlackServer
// for forward compatibility
type CloudSlackServer interface {
	Connect(CloudSlack_ConnectServer) error
	mustEmbedUnimplementedCloudSlackServer()
}

// UnimplementedCloudSlackServer must be embedded to have forward compatible implementations.
type UnimplementedCloudSlackServer struct {
}

func (UnimplementedCloudSlackServer) Connect(CloudSlack_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedCloudSlackServer) mustEmbedUnimplementedCloudSlackServer() {}

// UnsafeCloudSlackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudSlackServer will
// result in compilation errors.
type UnsafeCloudSlackServer interface {
	mustEmbedUnimplementedCloudSlackServer()
}

func RegisterCloudSlackServer(s grpc.ServiceRegistrar, srv CloudSlackServer) {
	s.RegisterService(&CloudSlack_ServiceDesc, srv)
}

func _CloudSlack_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudSlackServer).Connect(&cloudSlackConnectServer{stream})
}

type CloudSlack_ConnectServer interface {
	Send(*ConnectResponse) error
	Recv() (*ConnectRequest, error)
	grpc.ServerStream
}

type cloudSlackConnectServer struct {
	grpc.ServerStream
}

func (x *cloudSlackConnectServer) Send(m *ConnectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudSlackConnectServer) Recv() (*ConnectRequest, error) {
	m := new(ConnectRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudSlack_ServiceDesc is the grpc.ServiceDesc for CloudSlack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudSlack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudslack.CloudSlack",
	HandlerType: (*CloudSlackServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _CloudSlack_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cloudslack.proto",
}
