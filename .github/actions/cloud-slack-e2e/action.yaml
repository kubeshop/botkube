name: Runs e2e Cloud Slack tests
description: Runs e2e Cloud Slack tests

inputs:
  access_token:
    description: GitHub personal access token used for cloning private repositories
    required: true

  slack_workspace_name:
    description: 'Slack Workspace Name'
    required: true
  slack_email:
    description: 'Slack Email'
    required: true
  slack_password:
    description: 'Slack Password'
    required: true
  slack_tester_bot_token:
    description: 'Slack Tester Bot Token'
    required: true
  slack_bot_display_name:
    description: 'Slack Bot Display Name'
    required: true
  slack_tester_bot_name:
    description: 'Slack Tester Bot Name'
    required: true
  
  botkube_cloud_api_base_url:
    description: 'BotKube Cloud API Base URL'
    required: true
  botkube_cloud_email:
    description: 'BotKube Cloud Email'
    required: true
  botkube_cloud_password:
    description: 'BotKube Cloud Password'
    required: true
  botkube_cloud_team_organization_id:
    description: 'BotKube Cloud Team Organization ID'
    required: true

  slack_alerts_webhook:
    description: 'Slack Alerts Webhook'
    required: true

  e2e_type:
    description: "Type of e2e test"
    required: true

runs:
  using: "composite"
  steps:
    - name: Download k3d
      shell: bash
      run: "wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=${K3D_VERSION} bash"

    - name: Create k3d cluster
      id: k3d
      shell: bash
      run: "k3d cluster create cloud-slack-e2e-cluster --wait --timeout=5m"

    - name: Download Botkube CLI
      shell: bash
      run: |
        curl -Lo botkube https://github.com/kubeshop/botkube/releases/download/v1.12.0/botkube-linux-amd64
        chmod +x botkube

    - name: Add Botkube CLI to env
      shell: bash
      run: |
        echo BOTKUBE_CLI_BINARY_PATH="$PWD/botkube" >> $GITHUB_ENV

    - name: Setup Go modules
      id: modules
      uses: ./.github/actions/setup-go-mod-private
      with:
        access_token: ${{ inputs.access_token }}
        username: ${{ env.GIT_USER }}

    - name: Run e2e tests
      id: tests
      shell: bash
      env:
        SLACK_WORKSPACE_NAME: ${{ inputs.slack_workspace_name }}
        SLACK_EMAIL: ${{ inputs.slack_email }}
        SLACK_PASSWORD: ${{ inputs.slack_password }}
        SLACK_TESTER_TESTER_BOT_TOKEN: ${{ inputs.slack_tester_bot_token }}
        SLACK_BOT_DISPLAY_NAME: ${{ inputs.slack_bot_display_name }}
        SLACK_TESTER_BOT_NAME: ${{ inputs.slack_tester_bot_name }}
        SLACK_TESTER_MESSAGE_WAIT_TIMEOUT: 90s
        
        
        BOTKUBE_CLOUD_API_BASE_URL: ${{ inputs.botkube_cloud_api_base_url }}
        BOTKUBE_CLOUD_EMAIL: ${{ inputs.botkube_cloud_email }}
        BOTKUBE_CLOUD_PASSWORD: ${{ inputs.botkube_cloud_password }}
        BOTKUBE_CLOUD_TEAM_ORGANIZATION_ID: ${{ inputs.botkube_cloud_team_organization_id }}
        SCREENSHOTS_DIR: ${{ runner.temp }}/screenshots
        DEBUG_MODE: "true"
      run: |
        KUBECONFIG=$(k3d kubeconfig write cloud-slack-e2e-cluster) make test-cloud-slack-dev-e2e
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      if: ${{ always() }}
      with:
        name: screenshots_dump_${{github.sha}}
        path: ${{ runner.temp }}/screenshots
        retention-days: 5

    - name: Dump cluster state
      if: ${{ failure() }}
      uses: ./.github/actions/dump-cluster
      with:
        name: cloud-slack-e2e

    - name: Detect failed jobs
      if: ${{ failure() }}
      id: footer
      shell: bash
      run: |
        FOOTER=''
        if [[ ${{ steps.k3d.outcome }}     == failure ]]; then FOOTER='Failed to setup k3d cluster'; fi
        if [[ ${{ steps.modules.outcome }} == failure ]]; then FOOTER='Failed to setup Go modules'; fi
        if [[ ${{ steps.tests.outcome }}   == failure ]]; then FOOTER='Failed to run e2e tests'; fi

        echo "footer=${FOOTER}" >> $GITHUB_OUTPUT

    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      if: ${{ failure() }}
      env:
        SLACK_CHANNEL: 'botkube-cloud-ci-alerts'
        SLACK_USERNAME: Botkube Cloud CI
        SLACK_COLOR: 'red'
        SLACK_TITLE: 'Message'
        SLACK_MESSAGE: "Cloud Slack ${{ inputs.e2e_type }} E2E tests failed :scream:"
        SLACK_ICON_EMOJI: ':this-is-fine-fire:'
        SLACK_FOOTER: ${{ steps.footer.outputs.footer }}
        SLACK_WEBHOOK: ${{ inputs.slack_alerts_webhook }}
