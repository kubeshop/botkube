name: Release
on:
  push:
    tags:
      - '*'

env:
  git-user: github-actions[bot]
  git-email: 41898282+github-actions[bot]@users.noreply.github.com

jobs:
  release:
    runs-on: ubuntu-22.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Fetch all tags
        run: git fetch --force --tags

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Prepare GoReleaser Env
        run: |
          echo "IMAGE_REPOSITORY=$GITHUB_REPOSITORY_OWNER/botkube" >> $GITHUB_ENV

      - name: Extract Previous Version
        id: prev-version
        run: |
          BASE_TAG=$(echo "${{ github.ref_name }}" | awk -F- '{print $1}')
          git fetch origin "refs/notes/*:refs/notes/*"
          BASE_VERSION=$(echo "${BASE_TAG}" | cut -c2- |  awk 'BEGIN{FS=OFS="."}NF--')
          PREV_VERSION=$(echo $(git log --pretty=format:"%N" --show-notes="release-${BASE_VERSION}") | awk -F',' '{ print $1 }' | awk NF | awk '{ print $2 }') 
          echo ::set-output name=previous-version::$PREV_VERSION

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          IMAGE_TAG: ${{ github.ref_name }}
          ANALYTICS_API_KEY: ${{ secrets.ANALYTICS_API_KEY }}

      - name: Extract Tag name
        id: draft-release-tag-name
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          export URL=$(gh api \
          -H "Accept: application/vnd.github+json" \
          /repos/$GITHUB_REPOSITORY/releases --jq '.[] | select(.tag_name == "${{ github.ref_name }}") | .html_url')
          export TAG="${URL##*/}"
          echo "Found tag: $TAG"
          echo ::set-output name=tag::$TAG

      - name: Create release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            try {
              const releaseNotes = await github.rest.repos.generateReleaseNotes({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: "${{ steps.draft-release-tag-name.outputs.tag }}",
                previous_tag_name: "${{ steps.prev-version.outputs.previous-version }}"
              });
              const release = await github.rest.repos.getReleaseByTag({
                tag: "${{ steps.draft-release-tag-name.outputs.tag }}",
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              await github.rest.repos.updateRelease({
                release_id: release.data.id,
                draft: false,
                name: "${{ github.ref_name }}",
                owner: context.repo.owner,
                prerelease: true,
                repo: context.repo.repo,
                tag_name: "${{ github.ref_name }}",
                body: releaseNotes.data.body
              });
            } catch (error) {
              core.setFailed(error.message);
            }
