name: CI
on:
  push:
  pull_request:
env:
  HELM_VERSION: v3.9.0
  GOLANGCI_LINT_VERSION: v1.54.2
  GOLANGCI_LINT_TIMEOUT: 10m

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || 'branch' }} # scope to for the current workflow
  cancel-in-progress: ${{ github.event_name == 'pull_request' }} # cancel only PR related jobs

jobs:
  lint-go:
    if: ${{ !contains(github.event.commits[0].message, '[skip-ci]') }}
    runs-on: ubuntu-latest
    name: Lint Go code
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: Verify Go modules
        run: go mod verify
        if: always()
      - name: Run Go import formatting
        run: make go-import-fmt
        if: always()
      - name: Detect git changes
        if: always()
        run: |
          if [[ $(git diff --stat) != '' ]]; then
            echo -e '❌ \033[0;31m. Run 'make lint-fix'.\033[0m'
            git diff --color
            exit 1
          else
            echo '✔ No issues detected. Have a nice day :-)'
          fi
  golangci:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          # When the files to be extracted are already present,
          # tar extraction in Golangci Lint fails with the "File exists"
          # errors. These files appear to be present because of
          # cache in setup-go, on disabling the cache we are no more seeing
          # such error. Cache is to be enabled once the fix is available for
          # this issue:
          # https://github.com/golangci/golangci-lint-action/issues/807
          cache: false

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout=${{ env.GOLANGCI_LINT_TIMEOUT }}


  test:
    if: ${{ !contains(github.event.commits[0].message, '[skip-ci]') }}
    runs-on: ubuntu-latest
    name: Run tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: Run tests
        run: make test

  build:
    if: ${{ !contains(github.event.commits[0].message, '[skip-ci]') }}
    runs-on: ubuntu-latest
    needs:
      - lint-go
      - test
    name: Build app
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: true
      - name: Build
        run: make
