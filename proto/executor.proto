syntax = "proto3";

import "google/protobuf/empty.proto";

option go_package = "pkg/api/executor";

package executor;

message Config {
	// rawYAML contains the Executor configuration in YAML definitions.
	bytes rawYAML = 1;
}

message ExecuteRequest {
	// command represents the exact command that was specified by the user.
	string command = 1;
	// config holds Executor configurations specified by users.
	Config config = 2;
	// context holds context execution.
	ExecuteContext context = 3;
}

message ExecuteContext {
	bool isInteractivitySupported = 1;
	bytes slackState = 2;
	bytes kubeConfig = 3;
}

message ExecuteResponse {
	bytes message = 1;
}

message MetadataResponse {
	// version is a version of a given plugin. It should follow the SemVer syntax.
	string version = 1;
	// description is a description of a given plugin.
	string description = 2;
	// json_schema is a JSON schema of a given plugin.
	JSONSchema json_schema = 3;
	// dependencies is a list of dependencies of a given plugin.
	map<string, Dependency> dependencies = 4;
}

message JSONSchema {
	// value is the string value of the JSON schema.
	string value = 1;
	// ref_url is the remote reference of the JSON schema.
	string ref_url = 2;
}

message Dependency {
	// urls is the map of URL of the dependency. The key is in format of "os/arch", such as "linux/amd64".
	map<string, string> urls = 1;
}

message HelpResponse {
	bytes help = 1;
}

service Executor {
	rpc Execute(ExecuteRequest) returns (ExecuteResponse) {}
	rpc Metadata(google.protobuf.Empty) returns (MetadataResponse) {}
	rpc Help(google.protobuf.Empty) returns (HelpResponse) {}
}
