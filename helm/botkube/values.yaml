#  Formatting rules:
#
#  | Sign | Description                                                              |
#  |------|--------------------------------------------------------------------------|
#  | # -- | Comment is rendered into README.md.                                      |
#  | #    | Only if defined after '# --' signifies the continuation of the sentence. |
#  | ##   | Comment is ignored during README.md rendering.                           |
#
#  Read more at https://github.com/norwoodj/helm-docs

## BotKube image configuration.
image:
  # -- BotKube container image registry.
  registry: ghcr.io
  # -- BotKube container image repository.
  repository: kubeshop/botkube
  # -- BotKube container image pull policy.
  pullPolicy: IfNotPresent
  # -- BotKube container image tag. Default tag is `appVersion` from Chart.yaml.
  tag: v9.99.9-dev

# -- Configures Pod Security Policy to allow BotKube to run in restricted clusters.
# [Ref doc](https://kubernetes.io/docs/concepts/policy/pod-security-policy/).
podSecurityPolicy:
  enabled: false

# -- Configures security context to manage user Privileges in Pod.
# [Ref doc](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod).
# @default -- Runs as a Non-Privileged user.
securityContext:
  runAsUser: 101
  runAsGroup: 101

# -- Configures container security context.
# [Ref doc](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container).
containerSecurityContext:
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true

## Kubeconfig settings used by BotKube.
kubeconfig:
  # -- If true, enables overriding the Kubernetes auth.
  enabled: false
  # -- A base64 encoded kubeconfig that will be stored in a Secret, mounted to the Pod, and specified in the KUBECONFIG environment variable.
  base64Config: ""
  # -- A Secret containing a kubeconfig to use.
  ## Secret format:
  ##  data:
  ##    config: {base64_encoded_kubeconfig}
  existingSecret: ""


# -- Map of sources. Source contains configuration for Kubernetes events and sending recommendations.
# The property name under `sources` object is an alias for a given configuration. You can define multiple sources configuration with different names.
# Key name is used as a binding reference.
# @default -- See the `values.yaml` file for full object.
#
## Format: sources.<alias>
sources:
  'k8s-events':

    # -- If true, BotKube sends recommendations about the best practices for the created resource.
    recommendations: true

    kubernetes:
      # -- Describes the Kubernetes resources you want to watch.
      # @default -- Watch all built-in K8s kinds.
      resources:
        - name: v1/pods             # Name of the resource. Resource name must be in group/version/resource (G/V/R) format
                                    # resource name should be plural (e.g apps/v1/deployments, v1/pods)
          namespaces:
            # Include contains a list of allowed Namespaces.
            # It can also contain a regex expressions:
            #  `- ".*"` - to specify all Namespaces.
            include:
              - ".*"
            # Exclude contains a list of Namespaces to be ignored even if allowed by Include.
            # It can also contain a regex expressions:
            #  `- "test-.*"` - to specif all Namespaces with `test-` prefix.
            # exclude: []
          events:                   # List of lifecycle events you want to receive, e.g create, update, delete, error OR all
            - create
            - delete
            - error
        - name: v1/services
          namespaces:
            include:
              - ".*"
          events:
            - create
            - delete
            - error
        - name: apps/v1/deployments
          namespaces:
            include:
              - ".*"
          events:
            - create
            - update
            - delete
            - error
          updateSetting:
            includeDiff: true
            fields:
              - spec.template.spec.containers[*].image
              - status.availableReplicas
        - name: apps/v1/statefulsets
          namespaces:
            include:
              - ".*"
          events:
            - create
            - update
            - delete
            - error
          updateSetting:
            includeDiff: true
            fields:
              - spec.template.spec.containers[*].image
              - status.readyReplicas
        - name: networking.k8s.io/v1/ingresses
          namespaces:
            include:
              - ".*"
          events:
            - create
            - delete
            - error
        - name: v1/nodes
          namespaces:
            include:
              - ".*"
          events:
            - create
            - delete
            - error
        - name: v1/namespaces
          namespaces:
            include:
              - ".*"
            exclude:
              -
          events:
            - create
            - delete
            - error
        - name: v1/persistentvolumes
          namespaces:
            include:
              - ".*"
          events:
            - create
            - delete
            - error
        - name: v1/persistentvolumeclaims
          namespaces:
            include:
              - ".*"
          events:
            - create
            - delete
            - error
        - name: v1/configmaps
          namespaces:
            include:
              - ".*"
          events:
            - create
            - delete
            - error
        - name: apps/v1/daemonsets
          namespaces:
            include:
              - ".*"
          events:
            - create
            - update
            - delete
            - error
          updateSetting:
            includeDiff: true
            fields:
              - spec.template.spec.containers[*].image
              - status.numberReady
        - name: batch/v1/jobs
          namespaces:
            include:
              - ".*"
          events:
            - create
            - update
            - delete
            - error
          updateSetting:
            includeDiff: true
            fields:
              - spec.template.spec.containers[*].image
              - status.conditions[*].type
        - name: rbac.authorization.k8s.io/v1/roles
          namespaces:
            include:
              - ".*"
          events:
            - create
            - delete
            - error
        - name: rbac.authorization.k8s.io/v1/rolebindings
          namespaces:
            include:
              - ".*"
            exclude:
              -
          events:
            - create
            - delete
            - error
        - name: rbac.authorization.k8s.io/v1/clusterrolebindings
          namespaces:
            include:
              - ".*"
          events:
            - create
            - delete
            - error
        - name: rbac.authorization.k8s.io/v1/clusterroles
          namespaces:
            include:
              - ".*"
          events:
            - create
            - delete
            - error
       ## Custom resource example
       # - name: velero.io/v1/backups
       #   namespaces:
       #     include:
       #       - ".*"
       #     exclude:
       #       -
       #   events:
       #     - create
       #     - update
       #     - delete
       #     - error
       #   updateSetting:
       #     includeDiff: true
       #     fields:
       #       - status.phase

# -- Map of executors. Executor contains configuration for running `kubectl` commands.
# The property name under `executors` is an alias for a given configuration. You can define multiple executor configurations with different names.
# Key name is used as a binding reference.
# @default -- See the `values.yaml` file for full object.
#
## Format: executors.<alias>
executors:
  'kubectl-read-only':
    ## Kubectl executor configuration.
    kubectl:
      namespaces:
        # -- List of allowed Kubernetes Namespaces for command execution.
        # It can also contain a regex expressions:
        #  `- ".*"` - to specify all Namespaces.
        include:
          - ".*"
        # -- List of ignored Kubernetes Namespace.
        # It can also contain a regex expressions:
        #  `- "test-.*"` - to specify all Namespaces.
        exclude: []
      # -- If true, enables `kubectl` commands execution.
      enabled: false
      ## List of allowed `kubectl` commands.
      commands:
        # -- Configures which `kubectl` methods are allowed.
        verbs: ["api-resources", "api-versions", "cluster-info", "describe", "diff", "explain", "get", "logs", "top", "auth"]
        # -- Configures which K8s resource are allowed.
        resources: ["deployments", "pods", "namespaces", "daemonsets", "statefulsets", "storageclasses", "nodes", "configmaps"]
      # -- Configures the default Namespace for executing BotKube `kubectl` commands. If not set, uses the 'default'.
      defaultNamespace: default
      # -- If true, enables commands execution from configured channel only.
      restrictAccess: false


# -- Configures existing Secret with communication settings. It MUST be in the `botkube` Namespace.
## Secret format:
##  stringData:
##    comm_config.yaml: |
##      communications:
##        # Here specify settings for each app, like Slack, Mattermost etc.
##        # NOTE: Use setting format visible below.
existingCommunicationsSecretName: ""

# -- Map of communication groups. Communication group contains settings for multiple communication platforms.
# The property name under `communications` object is an alias for a given configuration group. You can define multiple communication groups with different names.
# @default -- See the `values.yaml` file for full object.
#
## Format: communications.<alias>
communications:
  'default-group':
    ## Settings for Slack.
    slack:
      # -- If true, enables Slack bot.
      enabled: false
      # -- Map of configured channels. The property name under `channels` object is an alias for a given configuration.
      #
      ## Format: channels.<alias>
      channels:
        'default':
          # -- Slack channel name without '#' prefix where you have added BotKube and want to receive notifications in.
          name: 'SLACK_CHANNEL'
          bindings:
            # -- Executors configuration for a given channel.
            executors:
              - kubectl-read-only
            # -- Notification sources configuration for a given channel.
            sources:
              - k8s-events
      # -- Slack token.
      token: 'SLACK_API_TOKEN'
      notification:
        # -- Configures notification type that are sent. Possible values: `short`, `long`.
        type: short

    ## Settings for Mattermost.
    mattermost:
      # -- If true, enables Mattermost bot.
      enabled: false
      # -- User in Mattermost which belongs the specified Personal Access token.
      botName: 'BotKube'
      # -- The URL (including http/https schema) where Mattermost is running. e.g https://example.com:9243
      url: 'MATTERMOST_SERVER_URL'
      # -- Personal Access token generated by BotKube user.
      token: 'MATTERMOST_TOKEN'
      # -- The Mattermost Team name where BotKube is added.
      team: 'MATTERMOST_TEAM'
      # -- Map of configured channels. The property name under `channels` object is an alias for a given configuration.
      #
      ## Format: channels.<alias>
      channels:
        'default':
          # -- The Mattermost channel name for receiving BotKube alerts.
          # The BotKube user needs to be added to it.
          name: 'MATTERMOST_CHANNEL'
          bindings:
            # -- Executors configuration for a given channel.
            executors:
              - kubectl-read-only
            # -- Notification sources configuration for a given channel.
            sources:
              - k8s-events
      notification:
        # -- Configures notification type that are sent. Possible values: `short`, `long`.
        type: short

    ## Settings for MS Teams.
    teams:
      # -- If true, enables MS Teams bot.
      enabled: false
      # -- The Bot name set while registering Bot to MS Teams.
      botName: 'BotKube'
      # -- The BotKube application ID generated while registering Bot to MS Teams.
      appID: 'APPLICATION_ID'
      # -- The BotKube application password generated while registering Bot to MS Teams.
      appPassword: 'APPLICATION_PASSWORD'
      bindings:
        # -- Executor bindings apply to all MS Teams channels where BotKube has access to.
        executors:
          - kubectl-read-only
        # -- Source bindings apply to all channels which have notification turned on with `@BotKube notifier start` command.
        sources:
          - k8s-events
      # -- The path in endpoint URL provided while registering BotKube to MS Teams.
      messagePath: "/bots/teams"
      notification:
        # -- Configures notification type that are sent. Possible values: `short`, `long`.
        type: short
      # -- The Service port for bot endpoint on BotKube container.
      port: 3978

    ## Settings for Discord.
    discord:
      # -- If true, enables Discord bot.
      enabled: false
      # -- BotKube Bot Token.
      token: 'DISCORD_TOKEN'
      # -- BotKube Application Client ID.
      botID: 'DISCORD_BOT_ID'
      # -- Map of configured channels. The property name under `channels` object is an alias for a given configuration.
      #
      ## Format: channels.<alias>
      channels:
        'default':
          # -- Discord channel ID for receiving BotKube alerts.
          # The BotKube user needs to be added to it.
          id: 'DISCORD_CHANNEL_ID'
          bindings:
            # -- Executors configuration for a given channel.
            executors:
              - kubectl-read-only
            # -- Notification sources configuration for a given channel.
            sources:
              - k8s-events
      notification:
        # -- Configures notification type that are sent. Possible values: `short`, `long`.
        type: short

    ## Settings for Elasticsearch.
    elasticsearch:
      # -- If true, enables Elasticsearch.
      enabled: false
      awsSigning:
        # -- If true, enables awsSigning using IAM for Elasticsearch hosted on AWS. Make sure AWS environment variables are set.
        # [Ref doc](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html).
        enabled: false
        # -- AWS region where Elasticsearch is deployed.
        awsRegion: "us-east-1"
        # -- AWS IAM Role arn to assume for credentials, use this only if you don't want to use the EC2 instance role or not running on AWS instance.
        roleArn: ""
      # -- The server URL, e.g https://example.com:9243
      server: 'ELASTICSEARCH_ADDRESS'
      # -- Basic Auth username.
      username: 'ELASTICSEARCH_USERNAME'
      # -- Basic Auth password.
      password: 'ELASTICSEARCH_PASSWORD'
      # -- If true, skips the verification of TLS certificate of the Elastic nodes.
      # It's useful for clusters with self-signed certificates.
      skipTLSVerify: false
      # -- Map of configured indices. The `indices` property name is an alias for a given configuration.
      #
      ## Format: indices.<alias>
      indices:
        'default':
          # -- Configures Elasticsearch index settings.
          name: botkube
          type: botkube-event
          shards: 1
          replicas: 0
          bindings:
            # -- Notification sources configuration for a given index.
            sources:
              - k8s-events

    ## Settings for Webhook.
    webhook:
      # -- If true, enables Webhook.
      enabled: false
      # -- The Webhook URL, e.g.: https://example.com:80
      url: 'WEBHOOK_URL'

## Global BotKube configuration.
settings:
  # -- Cluster name to differentiate incoming messages.
  clusterName: not-configured
  # -- If true, restarts the BotKube Pod on config changes.
  configWatcher: true
  # -- If true, notifies about new BotKube releases.
  upgradeNotifier: true
  ## BotKube logging settings.
  log:
    # -- Sets one of the log levels. Allowed values: `info`, `warn`, `debug`, `error`, `fatal`, `panic`.
    level: info
    # -- If true, disable ANSI colors in logging.
    disableColors: false

## For using custom SSL certificates.
ssl:
  # -- If true, specify cert path in `config.ssl.cert` property or K8s Secret in `config.ssl.existingSecretName`.
  enabled: false

  # -- Using existing SSL Secret. It MUST be in `botkube` Namespace.
  ## Secret format:
  ##  data:
  ##    config: {base64_encoded_kubeconfig}
  existingSecretName: ""

  # -- SSL Certificate file e.g certs/my-cert.crt.
  cert: ""

# -- Configures Service settings for ServiceMonitor CR.
service:
  name: metrics
  port: 2112
  targetPort: 2112

# -- Configures Ingress settings that exposes MS Teams endpoint.
# [Ref doc](https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource).
ingress:
  create: false
  annotations:
    kubernetes.io/ingress.class: nginx
  host: 'HOST'
  tls:
    enabled: false
    secretName: ''

# -- Configures ServiceMonitor settings.
# [Ref doc](https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#servicemonitor).
serviceMonitor:
  enabled: false
  interval: 10s
  path: /metrics
  port: metrics
  labels: {}

## BotKube Deployment.
deployment:
  # -- Extra annotations to pass to the BotKube Deployment.
  annotations: {}

# -- Number of BotKube pods to load balance between.
# Currently, BotKube doesn't support HA.
# @ignore
replicaCount: 1
# -- Extra annotations to pass to the BotKube Pod.
extraAnnotations: {}
# -- Extra labels to pass to the BotKube Pod.
extraLabels: {}
# -- Priority class name for the BotKube Pod.
priorityClassName: ""

# -- Fully override "botkube.name" template.
nameOverride: ""
# -- Fully override "botkube.fullname" template.
fullnameOverride: ""

# -- The BotKube Pod resource request and limits. We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube.
# [Ref docs](https://kubernetes.io/docs/user-guide/compute-resources/)
resources: {}
  ## If you do want to specify resources, uncomment the following lines,
  ## adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

# -- Extra environment variables to pass to the BotKube container.
# [Ref docs](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#environment-variables).
extraEnv: []
#  - name: <key>
#    valueFrom:
#      configMapKeyRef:
#        name: configmap-name
#        key: value_key
#  - name: <key>
#    value: value


# -- Extra volumes to pass to the BotKube container. Mount it later with extraVolumeMounts.
# [Ref docs](https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/volume/#Volume).
extraVolumes: []
# - name: extra-volume-0
#   secret:
#     secretName: <secret-name>
#
## For CSI e.g. Vault:
# - name: secrets-store-inline
#   csi:
#     driver: secrets-store.csi.k8s.io
#     readOnly: true
#     volumeAttributes:
#       secretProviderClass: "vault-database"

# -- Extra volume mounts to pass to the BotKube container.
# [Ref docs](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#volumes-1).
extraVolumeMounts: []
# - name: extra-volume-0
#   mountPath: /mnt/volume0
#   readOnly: true
# - name: extra-volume-1
#   mountPath: /mnt/volume1
#   readOnly: true
# - name: secret-files
#   mountPath: /etc/secrets
#   subPath: ""
#
## For CSI e.g. Vault:
# - name: secrets-store-inline
#   mountPath: "/mnt/secrets-store"
#   readOnly: true

# -- Node labels for BotKube Pod assignment.
# [Ref doc](https://kubernetes.io/docs/user-guide/node-selection/).
nodeSelector: {}

# -- Tolerations for BotKube Pod assignment.
# [Ref doc](https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/).
tolerations: []

# -- Affinity for BotKube Pod assignment.
# [Ref doc](https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity).
affinity: {}

# -- Role Based Access for BotKube Pod.
# [Ref doc](https://kubernetes.io/docs/admin/authorization/rbac/).
rbac:
  create: true
  rules:
    - apiGroups: ["*"]
      resources: ["*"]
      verbs: ["get", "watch", "list"]

serviceAccount:
  # -- If true, a ServiceAccount is automatically created.
  create: true
  # -- The name of the service account to use.
  # If not set, a name is generated using the fullname template.
  name: ""
  # -- Extra annotations for the ServiceAccount.
  annotations: {}

# -- Extra Kubernetes resources to create. Helm templating is allowed as it is evaluated before creating the resources.
extraObjects: []
## For example, to create a ClusterRoleBinding resource without creating a dedicated ClusterRole, uncomment the following snippet.
## NOTE: While running Helm install/upgrade with this sample snippet uncommented, make sure to set the following values:
##    1. `rbac.create: false`
##    2.`extraClusterRoleName: {clusterRole}`, where {clusterRole} is a given ClusterRole name (e.g. `cluster-admin`).
#
#    - apiVersion: rbac.authorization.k8s.io/v1
#      kind: ClusterRoleBinding
#      metadata:
#        name: "{{ include \"botkube.fullname\" . }}-clusterrolebinding"
#        labels:
#          app.kubernetes.io/name: "{{ include \"botkube.name\" . }}"
#          helm.sh/chart: "{{ include \"botkube.chart\" . }}"
#          app.kubernetes.io/instance: "{{ .Release.Name }}"
#          app.kubernetes.io/managed-by: "{{ .Release.Service }}"
#      roleRef:
#        apiGroup: rbac.authorization.k8s.io
#        kind: ClusterRole
#        name: "{{ .Values.extraClusterRoleName }}"
#      subjects:
#      - kind: ServiceAccount
#        name: "{{ include \"botkube.serviceAccountName\" . }}"
#        namespace: "{{ .Release.Namespace }}"

## Parameters for anonymous analytics collection.
analytics:
  # -- If true, sending anonymous analytics is disabled. To learn what date we collect,
  # see [Privacy Policy](https://botkube.io/privacy#privacy-policy).
  disable: false

## Parameters for the test container with E2E tests.
e2eTest:
  image:
    # -- Test runner image registry.
    registry: ghcr.io
    # -- Test runner image repository.
    repository: kubeshop/botkube-test
    # -- Test runner image pull policy.
    pullPolicy: IfNotPresent
    # -- Test runner image tag. Default tag is `appVersion` from Chart.yaml.
    tag: v9.99.9-dev
  # -- Configures BotKube Deployment related data.
  deployment:
    waitTimeout: 3m
  ## Configures Slack workspace settings used for e2e testing.
  slack:
    # -- Name of the BotKube bot to interact with during the e2e tests.
    botName: "botkube"
    # -- Name of the BotKube Tester bot that sends messages during the e2e tests.
    testerName: "botkube_tester"
    # -- Slack tester application token that interacts with BotKube bot.
    testerAppToken: ""
    # -- Additional message that is sent by Tester. You can pass e.g. pull request number or source link where these tests are run from.
    additionalContextMessage: ""
    # -- Message wait timeout. It defines how long we wait to ensure that notification were not sent when disabled.
    messageWaitTimeout: 1m
