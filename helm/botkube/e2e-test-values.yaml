analytics:
  disable: true

rbac:
  create: true
  rules:
    - apiGroups: [ "*" ]
      resources: [ "*" ]
      verbs: [ "get", "watch", "list" ] # defaults
  staticGroupName: &static-group-name "botkube-plugins-default"

communications:
  'default-group':
    slack: # Configuration for the Slack app with RTM support
      enabled: false # Tests will override this temporarily
      token: "" # Provide a valid token for Botkube app
      channels:
        'default':
          name: "" # Tests will override this temporarily
          bindings:
            executors:
              - kubectl-first-channel-cmd
              - kubectl-exec-cmd
              - other-plugins
            sources:
              - k8s-events
              - k8s-annotated-cm-delete
              - k8s-pod-create-events
              - other-plugins
        'secondary':
          name: "" # Tests will override this temporarily
          notification:
            disabled: true
          bindings:
            executors:
              - k8s-default-tools
            sources:
              - k8s-updates
    discord:
      enabled: false # Tests will override this temporarily
      token: "" # Provide a valid token for Botkube app
      botID: "" # Provide a valid Application Client ID for Botkube app
      channels:
        'default':
          id: "" # Tests will override this channel ID temporarily
          bindings:
            executors:
              - kubectl-first-channel-cmd
              - kubectl-exec-cmd
              - other-plugins
            sources:
              - k8s-events
              - k8s-annotated-cm-delete
              - k8s-pod-create-events
              - other-plugins
        'secondary':
          id: "" # Tests will override this channel ID temporarily
          notification:
            disabled: true
          bindings:
            # -- Executors configuration for a given channel.
            executors:
              - k8s-default-tools
            # -- Notification sources configuration for a given channel.
            sources:
              - k8s-updates

sources:
  'k8s-events':
    displayName: "K8s recommendations"
    'botkube/kubernetes':
      context: &defaultPluginContext
        rbac:
          group:
            type: Static
            static:
              values: [*static-group-name] # "botkube-plugins-read-only" is the default
          user:
            type: Static
            static:
              value: *static-group-name

      enabled: true
      config:
        log:
          level: debug
        recommendations:
          pod:
            noLatestImageTag: true
            labelsSet: true
          ingress:
            backendServiceValid: false
            tlsSecretValid: false
        namespaces:
          include:
            - botkube
        event:
          types:
            - create
            - update
        resources:
          - type: v1/configmaps
  'k8s-annotated-cm-delete':
    displayName: "K8s ConfigMap delete events"
    'botkube/kubernetes':
      context: *defaultPluginContext
      enabled: true
      config:
        log:
          level: debug
        namespaces:
          include:
            - botkube
        labels:
          test.botkube.io: "true"
        event:
          types:
            - delete
        resources:
          - type: v1/configmaps

  'k8s-pod-create-events':
    'botkube/kubernetes':
      context: *defaultPluginContext
      enabled: true
      config:
        log:
          level: debug
        namespaces:
          include:
            - botkube
        event:
          types:
            - create
        resources:
          - type: v1/pods

  'k8s-service-create-event-for-action-only':
    displayName: "K8s Service creation, used only by action"
    'botkube/kubernetes':
      context: *defaultPluginContext
      enabled: true
      config:
        namespaces:
          include:
            - botkube
        event:
          types:
            - create
        resources:
          - type: v1/services

  'k8s-updates':
    displayName: "K8s ConfigMaps updates"
    'botkube/kubernetes':
      context: *defaultPluginContext
      enabled: true
      config:
        log:
          level: debug
        namespaces:
          include:
            - default
        event:
          types:
            - create
            - update
            - delete
        resources:
          - type: v1/configmaps
            namespaces:
              include:
                - botkube
            event: # overrides top level `event` entry
              types:
                - update

  'other-plugins':
    displayName: "K8s ConfigMaps changes"
    botkube/cm-watcher:
      context: *defaultPluginContext
      enabled: true
      config:
        configMap:
          name: cm-watcher-trigger
          namespace: botkube
          event: ADDED

executors:
  'k8s-default-tools':
    botkube/kubectl:
      enabled: true
  'kubectl-first-channel-cmd':
    botkube/kubectl:
      enabled: true
      context:
        rbac:
          group:
            type: Static
            static:
              values: [ "kubectl-first-channel" ]
  'kubectl-exec-cmd':
    botkube/kubectl:
      enabled: false
      context:
        rbac:
          group:
            type: Static
            static:
              # 'exec' verb perms on  'botkube' and 'default' namespaces
              values: [ "kc-exec-only" ]
  'kubectl-not-bound-to-any-channel':
    botkube/kubectl:
      enabled: true
      context:
        rbac:
          group:
            type: Static
            static:
              # deployments port-forward across all namespaces
              values: [ "kubectl-first-channel" ]
  'kubectl-with-svc-label-perms':
    botkube/kubectl:
      enabled: true
      context:
        rbac:
          group:
            type: Static
            static:
              # service labeling across all namespaces
              values: [ "kc-label-svc-all" ]

  'other-plugins':
    botkube/echo@v1.0.1-devel:
      enabled: true
      config:
        changeResponseToUpperCase: true

    botkube/helm:
      context: *defaultPluginContext
      enabled: true

plugins:
  repositories:
    botkube:
      url: http://host.k3d.internal:3000/botkube.yaml

actions:
  'get-created-resource':
    enabled: false # it's enabled in e2e test, otherwise Botkube tries to download all dependencies when starting
    displayName: "Get created resource"
    command: "kubectl get {{ .Event.Kind | lower }}{{ if .Event.Namespace }} -n {{ .Event.Namespace }}{{ end }} {{ .Event.Name }}"
    bindings:
      sources:
        - k8s-pod-create-events
      executors:
        - k8s-default-tools
  label-created-svc-resource:
    enabled: false # it's enabled in e2e test, otherwise Botkube tries to download all dependencies when starting
    displayName: "Label created Service"
    command: "kubectl label svc {{ if .Event.Namespace }} -n {{ .Event.Namespace }}{{ end }} {{ .Event.Name }} botkube-action=true"
    bindings:
      sources:
        - k8s-service-create-event-for-action-only
      executors:
        - kubectl-with-svc-label-perms

aliases:
  kc:
    command: kubectl
  k:
    command: kubectl
  kgp:
    command: kubectl get pods
    displayName: "Get Pods"
  kgda:
    command: kubectl get deployments -A
    displayName: "Get Deployments"
  e:
    command: echo
  p:
    command: ping

settings:
  clusterName: sample
  upgradeNotifier: false
  persistentConfig:
    runtime:
      configMap:
        annotations:
          botkube.io/disable: "true"
    startup:
      configMap:
        annotations:
          botkube.io/disable: "true"

extraAnnotations:
  botkube.io/disable: "true"

extraEnv:
  - name: LOG_LEVEL_SOURCE_BOTKUBE_KUBERNETES
    value: debug

extraObjects:

# Group 'kubectl-first-channel': permissions for kubectl for first channel
## namespace scoped permissions
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata: &kubectl-wait
    name: kubectl-first-channel-namespaced-perms
    labels:
      app.kubernetes.io/instance: botkube-e2e-test
  rules:
    - apiGroups: [ "apps" ]
      resources: [ "deployments" ]
      verbs: [ "get","watch","list" ]
    - apiGroups: [""]
      resources: ["configmaps", "pods"]
      verbs: ["get", "watch", "list"]
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    <<: *kubectl-wait
    namespace: botkube
  roleRef: &kubectl-wait-role
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kubectl-first-channel-namespaced-perms
  subjects: &kubectl-first-channel-subject
    - kind: Group
      name: kubectl-first-channel
      apiGroup: rbac.authorization.k8s.io
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    <<: *kubectl-wait
    namespace: default
  roleRef: *kubectl-wait-role
  subjects: *kubectl-first-channel-subject

### cluster permissions
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata: &kubectl-deploy-all-meta
    name: kc-first-channel-cluster-perms
    labels:
      app.kubernetes.io/instance: botkube-e2e-test
  rules:
    - apiGroups: [ "apps" ]
      resources: [ "deployments" ]
      verbs: [ "get", "list" ]
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata: *kubectl-deploy-all-meta
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kc-first-channel-cluster-perms
  subjects: *kubectl-first-channel-subject

# Group 'kc-exec-only'
## exec only for default and botkube namespaces:
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata: &kc-exec-only-meta
    name: kc-exec-only
    labels:
      app.kubernetes.io/instance: botkube-e2e-test
  rules:
    - apiGroups: [""]
      resources: ["pods/exec"]
      verbs: ["create"]
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    <<: *kc-exec-only-meta
    namespace: botkube
  roleRef: &kc-exec-only-role
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kc-exec-only
  subjects: &kc-exec-only-subject
    - kind: Group
      name: kc-exec-only
      apiGroup: rbac.authorization.k8s.io
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    <<: *kc-exec-only-meta
    namespace: default
  roleRef: *kc-exec-only-role
  subjects: *kc-exec-only-subject

# Group 'kc-label-svc-all':
## namespace scoped permissions
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata: &kc-label-svc-all-meta
    name: kc-label-svc-all
    labels:
      app.kubernetes.io/instance: botkube-e2e-test
  rules:
    - apiGroups: [ "" ]
      resources: [ "services" ]
      verbs: [ "get", "patch" ]
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata: *kc-label-svc-all-meta
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: kc-label-svc-all
  subjects:
    - kind: Group
      name: kc-label-svc-all
      apiGroup: rbac.authorization.k8s.io
