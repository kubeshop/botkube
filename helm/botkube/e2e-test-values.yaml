analytics:
  disable: true

communications:
  'default-group':
    slack: # Configuration for the Slack app with RTM support
      enabled: false # Tests will override this temporarily
      token: "" # Provide a valid token for Botkube app
      channels:
        'default':
          name: "" # Tests will override this temporarily
          bindings:
            executors:
              - k8s-default-tools
              - kubectl-wait-cmd
              - kubectl-exec-cmd
              - kubectl-allow-all
              - plugin-based
            sources:
              - k8s-events
              - k8s-annotated-cm-delete
              - k8s-pod-create-events
              - plugin-based
        'secondary':
          name: "" # Tests will override this temporarily
          notification:
            disabled: true
          bindings:
            executors:
              - k8s-default-tools
            sources:
              - k8s-updates
    discord:
      enabled: false # Tests will override this temporarily
      token: "" # Provide a valid token for Botkube app
      botID: "" # Provide a valid Application Client ID for Botkube app
      channels:
        'default':
          id: "" # Tests will override this channel ID temporarily
          bindings:
            executors:
              - k8s-default-tools
              - kubectl-wait-cmd
              - kubectl-exec-cmd
              - kubectl-allow-all
              - plugin-based
            sources:
              - k8s-events
              - k8s-annotated-cm-delete
              - k8s-pod-create-events
              - plugin-based
        'secondary':
          id: "" # Tests will override this channel ID temporarily
          notification:
            disabled: true
          bindings:
            # -- Executors configuration for a given channel.
            executors:
              - k8s-default-tools
            # -- Notification sources configuration for a given channel.
            sources:
              - k8s-updates

sources:
  'k8s-events':
    displayName: "K8s recommendations"
    kubernetes:
      recommendations:
        pod:
          noLatestImageTag: true
          labelsSet: true
        ingress:
          backendServiceValid: false
          tlsSecretValid: false
      namespaces:
        include:
          - botkube
      event:
        types:
          - create
          - update
      resources:
        - type: v1/configmaps
  'k8s-annotated-cm-delete':
    displayName: "K8s ConfigMap delete events"
    kubernetes:
      namespaces:
        include:
          - botkube
      labels:
        test.botkube.io: "true"
      event:
        types:
          - delete
      resources:
        - type: v1/configmaps

  'k8s-pod-create-events':
    kubernetes:
      namespaces:
        include:
          - botkube
      event:
        types:
          - create
      resources:
        - type: v1/pods

  'k8s-updates':
    displayName: "K8s ConfigMaps updates"
    kubernetes:
      namespaces:
        include:
          - default
      event:
        types:
          - create
          - update
          - delete
      resources:
        - type: v1/configmaps
          namespaces:
            include:
              - botkube
          event: # overrides top level `event` entry
            types:
              - update

  'plugin-based':
    displayName: "K8s ConfigMaps changes"
    botkube/cm-watcher:
      enabled: true
      config:
        configMap:
          name: cm-watcher-trigger
          namespace: botkube
          event: ADDED

executors:
  'k8s-default-tools':
    botkube/kubectl:
      enabled: true
      context:
        rbac:
          group:
            type: Static
            static:
              # read-only access to 'botkube' and 'default' namespaces
              values: ["kc-default"]
  'kubectl-wait-cmd':
    botkube/kubectl:
      enabled: true
      context:
        rbac:
          group:
            type: Static
            static:
              # 'wait' verb perms on  'botkube' and 'default' namespaces
              values: [ "kc-wait" ]
  'kubectl-exec-cmd':
    botkube/kubectl:
      context:
        rbac:
          group:
            type: Static
            static:
              # 'exec' verb perms on  'botkube' and 'default' namespaces
              values: [ "kc-exec" ]
  'kubectl-allow-all':
    botkube/kubectl:
      enabled: true
      context:
        rbac:
          group:
            type: Static
            static:
              # get deployments across all namespaces
              values: [ "kc-get-deploy-all" ]
  'kubectl-not-bound-to-any-channel':
    botkube/kubectl:
      enabled: true
      context:
        rbac:
          group:
            type: Static
            static:
              # deployments port-forward across all namespaces
              values: [ "kc-port-deploy-all" ]
  'plugin-based':
    botkube/echo@v1.0.1-devel:
      enabled: true
      config:
        changeResponseToUpperCase: true

    botkube/helm:
      enabled: true

plugins:
  repositories:
    botkube:
      url: http://host.k3d.internal:3000/botkube.yaml

actions:
  'get-created-resource':
    enabled: true
    displayName: "Get created resource"
    command: "kubectl get {{ .Event.TypeMeta.Kind | lower }}{{ if .Event.Namespace }} -n {{ .Event.Namespace }}{{ end }} {{ .Event.Name }}"
    bindings:
      sources:
        - k8s-pod-create-events
      executors:
        - k8s-default-tools

filters:
  kubernetes:
    objectAnnotationChecker: true
    nodeEventsChecker: false

aliases:
  kc:
    command: kubectl
  k:
    command: kubectl
  kgp:
    command: kubectl get pods
    displayName: "Get Pods"
  kgda:
    command: kubectl get deployments -A
    displayName: "Get Deployments"
  e:
    command: echo
  p:
    command: ping

settings:
  clusterName: sample
  upgradeNotifier: false
  persistentConfig:
    runtime:
      configMap:
        annotations:
          botkube.io/disable: "true"
    startup:
      configMap:
        annotations:
          botkube.io/disable: "true"

extraAnnotations:
  botkube.io/disable: "true"
